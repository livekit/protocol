// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: livekit_recording.proto

package livekit

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordingPreset int32

const (
	// All presets use 44100 Hz, 128k bitrate for audio and a color depth of 24
	RecordingPreset_NONE       RecordingPreset = 0
	RecordingPreset_HD_30      RecordingPreset = 1 // 720p, 30fps, 3000 kpbs
	RecordingPreset_HD_60      RecordingPreset = 2 // 720p, 60fps, 4500 kbps
	RecordingPreset_FULL_HD_30 RecordingPreset = 3 // 1080p, 30fps, 4500 kbps
	RecordingPreset_FULL_HD_60 RecordingPreset = 4 // 1080p, 60fps, 6000 kbps
)

// Enum value maps for RecordingPreset.
var (
	RecordingPreset_name = map[int32]string{
		0: "NONE",
		1: "HD_30",
		2: "HD_60",
		3: "FULL_HD_30",
		4: "FULL_HD_60",
	}
	RecordingPreset_value = map[string]int32{
		"NONE":       0,
		"HD_30":      1,
		"HD_60":      2,
		"FULL_HD_30": 3,
		"FULL_HD_60": 4,
	}
)

func (x RecordingPreset) Enum() *RecordingPreset {
	p := new(RecordingPreset)
	*p = x
	return p
}

func (x RecordingPreset) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordingPreset) Descriptor() protoreflect.EnumDescriptor {
	return file_livekit_recording_proto_enumTypes[0].Descriptor()
}

func (RecordingPreset) Type() protoreflect.EnumType {
	return &file_livekit_recording_proto_enumTypes[0]
}

func (x RecordingPreset) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordingPreset.Descriptor instead.
func (RecordingPreset) EnumDescriptor() ([]byte, []int) {
	return file_livekit_recording_proto_rawDescGZIP(), []int{0}
}

type StartRecordingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Input:
	//	*StartRecordingRequest_Url
	//	*StartRecordingRequest_Template
	Input isStartRecordingRequest_Input `protobuf_oneof:"input"`
	// Types that are assignable to Output:
	//	*StartRecordingRequest_S3Url
	//	*StartRecordingRequest_Rtmp
	//	*StartRecordingRequest_File
	Output  isStartRecordingRequest_Output `protobuf_oneof:"output"`
	Options *RecordingOptions              `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *StartRecordingRequest) Reset() {
	*x = StartRecordingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_recording_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRecordingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRecordingRequest) ProtoMessage() {}

func (x *StartRecordingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_recording_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRecordingRequest.ProtoReflect.Descriptor instead.
func (*StartRecordingRequest) Descriptor() ([]byte, []int) {
	return file_livekit_recording_proto_rawDescGZIP(), []int{0}
}

func (m *StartRecordingRequest) GetInput() isStartRecordingRequest_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (x *StartRecordingRequest) GetUrl() string {
	if x, ok := x.GetInput().(*StartRecordingRequest_Url); ok {
		return x.Url
	}
	return ""
}

func (x *StartRecordingRequest) GetTemplate() *RecordingTemplate {
	if x, ok := x.GetInput().(*StartRecordingRequest_Template); ok {
		return x.Template
	}
	return nil
}

func (m *StartRecordingRequest) GetOutput() isStartRecordingRequest_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (x *StartRecordingRequest) GetS3Url() string {
	if x, ok := x.GetOutput().(*StartRecordingRequest_S3Url); ok {
		return x.S3Url
	}
	return ""
}

func (x *StartRecordingRequest) GetRtmp() *RtmpOutput {
	if x, ok := x.GetOutput().(*StartRecordingRequest_Rtmp); ok {
		return x.Rtmp
	}
	return nil
}

func (x *StartRecordingRequest) GetFile() string {
	if x, ok := x.GetOutput().(*StartRecordingRequest_File); ok {
		return x.File
	}
	return ""
}

func (x *StartRecordingRequest) GetOptions() *RecordingOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type isStartRecordingRequest_Input interface {
	isStartRecordingRequest_Input()
}

type StartRecordingRequest_Url struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3,oneof"`
}

type StartRecordingRequest_Template struct {
	Template *RecordingTemplate `protobuf:"bytes,2,opt,name=template,proto3,oneof"`
}

func (*StartRecordingRequest_Url) isStartRecordingRequest_Input() {}

func (*StartRecordingRequest_Template) isStartRecordingRequest_Input() {}

type isStartRecordingRequest_Output interface {
	isStartRecordingRequest_Output()
}

type StartRecordingRequest_S3Url struct {
	S3Url string `protobuf:"bytes,3,opt,name=s3_url,json=s3Url,proto3,oneof"`
}

type StartRecordingRequest_Rtmp struct {
	Rtmp *RtmpOutput `protobuf:"bytes,4,opt,name=rtmp,proto3,oneof"`
}

type StartRecordingRequest_File struct {
	File string `protobuf:"bytes,5,opt,name=file,proto3,oneof"`
}

func (*StartRecordingRequest_S3Url) isStartRecordingRequest_Output() {}

func (*StartRecordingRequest_Rtmp) isStartRecordingRequest_Output() {}

func (*StartRecordingRequest_File) isStartRecordingRequest_Output() {}

type RecordingTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Layout string `protobuf:"bytes,1,opt,name=layout,proto3" json:"layout,omitempty"`
	// Types that are assignable to Room:
	//	*RecordingTemplate_RoomName
	//	*RecordingTemplate_Token
	Room isRecordingTemplate_Room `protobuf_oneof:"room"`
}

func (x *RecordingTemplate) Reset() {
	*x = RecordingTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_recording_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingTemplate) ProtoMessage() {}

func (x *RecordingTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_recording_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingTemplate.ProtoReflect.Descriptor instead.
func (*RecordingTemplate) Descriptor() ([]byte, []int) {
	return file_livekit_recording_proto_rawDescGZIP(), []int{1}
}

func (x *RecordingTemplate) GetLayout() string {
	if x != nil {
		return x.Layout
	}
	return ""
}

func (m *RecordingTemplate) GetRoom() isRecordingTemplate_Room {
	if m != nil {
		return m.Room
	}
	return nil
}

func (x *RecordingTemplate) GetRoomName() string {
	if x, ok := x.GetRoom().(*RecordingTemplate_RoomName); ok {
		return x.RoomName
	}
	return ""
}

func (x *RecordingTemplate) GetToken() string {
	if x, ok := x.GetRoom().(*RecordingTemplate_Token); ok {
		return x.Token
	}
	return ""
}

type isRecordingTemplate_Room interface {
	isRecordingTemplate_Room()
}

type RecordingTemplate_RoomName struct {
	RoomName string `protobuf:"bytes,2,opt,name=room_name,json=roomName,proto3,oneof"`
}

type RecordingTemplate_Token struct {
	Token string `protobuf:"bytes,3,opt,name=token,proto3,oneof"`
}

func (*RecordingTemplate_RoomName) isRecordingTemplate_Room() {}

func (*RecordingTemplate_Token) isRecordingTemplate_Room() {}

type RtmpOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urls []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *RtmpOutput) Reset() {
	*x = RtmpOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_recording_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtmpOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtmpOutput) ProtoMessage() {}

func (x *RtmpOutput) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_recording_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtmpOutput.ProtoReflect.Descriptor instead.
func (*RtmpOutput) Descriptor() ([]byte, []int) {
	return file_livekit_recording_proto_rawDescGZIP(), []int{2}
}

func (x *RtmpOutput) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type RecordingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preset         RecordingPreset `protobuf:"varint,1,opt,name=preset,proto3,enum=livekit.RecordingPreset" json:"preset,omitempty"`
	Width          int32           `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`                                         // default 1920
	Height         int32           `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`                                       // default 1080
	Depth          int32           `protobuf:"varint,4,opt,name=depth,proto3" json:"depth,omitempty"`                                         // default 24
	Framerate      int32           `protobuf:"varint,5,opt,name=framerate,proto3" json:"framerate,omitempty"`                                 // default 30
	AudioBitrate   int32           `protobuf:"varint,6,opt,name=audio_bitrate,json=audioBitrate,proto3" json:"audio_bitrate,omitempty"`       // default 128
	AudioFrequency int32           `protobuf:"varint,7,opt,name=audio_frequency,json=audioFrequency,proto3" json:"audio_frequency,omitempty"` // default 44100
	VideoBitrate   int32           `protobuf:"varint,8,opt,name=video_bitrate,json=videoBitrate,proto3" json:"video_bitrate,omitempty"`       // default 4500
}

func (x *RecordingOptions) Reset() {
	*x = RecordingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_recording_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingOptions) ProtoMessage() {}

func (x *RecordingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_recording_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingOptions.ProtoReflect.Descriptor instead.
func (*RecordingOptions) Descriptor() ([]byte, []int) {
	return file_livekit_recording_proto_rawDescGZIP(), []int{3}
}

func (x *RecordingOptions) GetPreset() RecordingPreset {
	if x != nil {
		return x.Preset
	}
	return RecordingPreset_NONE
}

func (x *RecordingOptions) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *RecordingOptions) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *RecordingOptions) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *RecordingOptions) GetFramerate() int32 {
	if x != nil {
		return x.Framerate
	}
	return 0
}

func (x *RecordingOptions) GetAudioBitrate() int32 {
	if x != nil {
		return x.AudioBitrate
	}
	return 0
}

func (x *RecordingOptions) GetAudioFrequency() int32 {
	if x != nil {
		return x.AudioFrequency
	}
	return 0
}

func (x *RecordingOptions) GetVideoBitrate() int32 {
	if x != nil {
		return x.VideoBitrate
	}
	return 0
}

type StartRecordingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordingId string `protobuf:"bytes,1,opt,name=recording_id,json=recordingId,proto3" json:"recording_id,omitempty"`
}

func (x *StartRecordingResponse) Reset() {
	*x = StartRecordingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_recording_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRecordingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRecordingResponse) ProtoMessage() {}

func (x *StartRecordingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_recording_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRecordingResponse.ProtoReflect.Descriptor instead.
func (*StartRecordingResponse) Descriptor() ([]byte, []int) {
	return file_livekit_recording_proto_rawDescGZIP(), []int{4}
}

func (x *StartRecordingResponse) GetRecordingId() string {
	if x != nil {
		return x.RecordingId
	}
	return ""
}

type AddOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordingId string `protobuf:"bytes,1,opt,name=recording_id,json=recordingId,proto3" json:"recording_id,omitempty"`
	RtmpUrl     string `protobuf:"bytes,2,opt,name=rtmp_url,json=rtmpUrl,proto3" json:"rtmp_url,omitempty"`
}

func (x *AddOutputRequest) Reset() {
	*x = AddOutputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_recording_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOutputRequest) ProtoMessage() {}

func (x *AddOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_recording_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOutputRequest.ProtoReflect.Descriptor instead.
func (*AddOutputRequest) Descriptor() ([]byte, []int) {
	return file_livekit_recording_proto_rawDescGZIP(), []int{5}
}

func (x *AddOutputRequest) GetRecordingId() string {
	if x != nil {
		return x.RecordingId
	}
	return ""
}

func (x *AddOutputRequest) GetRtmpUrl() string {
	if x != nil {
		return x.RtmpUrl
	}
	return ""
}

type RemoveOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordingId string `protobuf:"bytes,1,opt,name=recording_id,json=recordingId,proto3" json:"recording_id,omitempty"`
	RtmpUrl     string `protobuf:"bytes,2,opt,name=rtmp_url,json=rtmpUrl,proto3" json:"rtmp_url,omitempty"`
}

func (x *RemoveOutputRequest) Reset() {
	*x = RemoveOutputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_recording_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOutputRequest) ProtoMessage() {}

func (x *RemoveOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_recording_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOutputRequest.ProtoReflect.Descriptor instead.
func (*RemoveOutputRequest) Descriptor() ([]byte, []int) {
	return file_livekit_recording_proto_rawDescGZIP(), []int{6}
}

func (x *RemoveOutputRequest) GetRecordingId() string {
	if x != nil {
		return x.RecordingId
	}
	return ""
}

func (x *RemoveOutputRequest) GetRtmpUrl() string {
	if x != nil {
		return x.RtmpUrl
	}
	return ""
}

type EndRecordingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordingId string `protobuf:"bytes,1,opt,name=recording_id,json=recordingId,proto3" json:"recording_id,omitempty"`
}

func (x *EndRecordingRequest) Reset() {
	*x = EndRecordingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_recording_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndRecordingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndRecordingRequest) ProtoMessage() {}

func (x *EndRecordingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_recording_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndRecordingRequest.ProtoReflect.Descriptor instead.
func (*EndRecordingRequest) Descriptor() ([]byte, []int) {
	return file_livekit_recording_proto_rawDescGZIP(), []int{7}
}

func (x *EndRecordingRequest) GetRecordingId() string {
	if x != nil {
		return x.RecordingId
	}
	return ""
}

var File_livekit_recording_proto protoreflect.FileDescriptor

var file_livekit_recording_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x02, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a,
	0x06, 0x73, 0x33, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x05, 0x73, 0x33, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x04, 0x72, 0x74, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x52,
	0x74, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x01, 0x52, 0x04, 0x72, 0x74, 0x6d,
	0x70, 0x12, 0x14, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x07, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x6a, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x09,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x22, 0x20, 0x0a, 0x0a, 0x52,
	0x74, 0x6d, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0x99, 0x02,
	0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x62, 0x69,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x22, 0x3b, 0x0a, 0x16, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x74, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x74, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x22, 0x53, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x74, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x74, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x22, 0x38, 0x0a,
	0x13, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x2a, 0x51, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x44, 0x5f, 0x33, 0x30, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x48, 0x44, 0x5f, 0x36, 0x30, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55,
	0x4c, 0x4c, 0x5f, 0x48, 0x44, 0x5f, 0x33, 0x30, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55,
	0x4c, 0x4c, 0x5f, 0x48, 0x44, 0x5f, 0x36, 0x30, 0x10, 0x04, 0x32, 0xb3, 0x02, 0x0a, 0x10, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x51, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x44, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x1c, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_livekit_recording_proto_rawDescOnce sync.Once
	file_livekit_recording_proto_rawDescData = file_livekit_recording_proto_rawDesc
)

func file_livekit_recording_proto_rawDescGZIP() []byte {
	file_livekit_recording_proto_rawDescOnce.Do(func() {
		file_livekit_recording_proto_rawDescData = protoimpl.X.CompressGZIP(file_livekit_recording_proto_rawDescData)
	})
	return file_livekit_recording_proto_rawDescData
}

var file_livekit_recording_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_livekit_recording_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_livekit_recording_proto_goTypes = []interface{}{
	(RecordingPreset)(0),           // 0: livekit.RecordingPreset
	(*StartRecordingRequest)(nil),  // 1: livekit.StartRecordingRequest
	(*RecordingTemplate)(nil),      // 2: livekit.RecordingTemplate
	(*RtmpOutput)(nil),             // 3: livekit.RtmpOutput
	(*RecordingOptions)(nil),       // 4: livekit.RecordingOptions
	(*StartRecordingResponse)(nil), // 5: livekit.StartRecordingResponse
	(*AddOutputRequest)(nil),       // 6: livekit.AddOutputRequest
	(*RemoveOutputRequest)(nil),    // 7: livekit.RemoveOutputRequest
	(*EndRecordingRequest)(nil),    // 8: livekit.EndRecordingRequest
	(*emptypb.Empty)(nil),          // 9: google.protobuf.Empty
	(*RecordingResult)(nil),        // 10: livekit.RecordingResult
}
var file_livekit_recording_proto_depIdxs = []int32{
	2,  // 0: livekit.StartRecordingRequest.template:type_name -> livekit.RecordingTemplate
	3,  // 1: livekit.StartRecordingRequest.rtmp:type_name -> livekit.RtmpOutput
	4,  // 2: livekit.StartRecordingRequest.options:type_name -> livekit.RecordingOptions
	0,  // 3: livekit.RecordingOptions.preset:type_name -> livekit.RecordingPreset
	1,  // 4: livekit.RecordingService.StartRecording:input_type -> livekit.StartRecordingRequest
	6,  // 5: livekit.RecordingService.AddOutput:input_type -> livekit.AddOutputRequest
	7,  // 6: livekit.RecordingService.RemoveOutput:input_type -> livekit.RemoveOutputRequest
	8,  // 7: livekit.RecordingService.EndRecording:input_type -> livekit.EndRecordingRequest
	5,  // 8: livekit.RecordingService.StartRecording:output_type -> livekit.StartRecordingResponse
	9,  // 9: livekit.RecordingService.AddOutput:output_type -> google.protobuf.Empty
	9,  // 10: livekit.RecordingService.RemoveOutput:output_type -> google.protobuf.Empty
	10, // 11: livekit.RecordingService.EndRecording:output_type -> livekit.RecordingResult
	8,  // [8:12] is the sub-list for method output_type
	4,  // [4:8] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_livekit_recording_proto_init() }
func file_livekit_recording_proto_init() {
	if File_livekit_recording_proto != nil {
		return
	}
	file_livekit_models_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_livekit_recording_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRecordingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_recording_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_recording_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtmpOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_recording_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_recording_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRecordingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_recording_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOutputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_recording_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveOutputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_recording_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndRecordingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_livekit_recording_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*StartRecordingRequest_Url)(nil),
		(*StartRecordingRequest_Template)(nil),
		(*StartRecordingRequest_S3Url)(nil),
		(*StartRecordingRequest_Rtmp)(nil),
		(*StartRecordingRequest_File)(nil),
	}
	file_livekit_recording_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*RecordingTemplate_RoomName)(nil),
		(*RecordingTemplate_Token)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_livekit_recording_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_livekit_recording_proto_goTypes,
		DependencyIndexes: file_livekit_recording_proto_depIdxs,
		EnumInfos:         file_livekit_recording_proto_enumTypes,
		MessageInfos:      file_livekit_recording_proto_msgTypes,
	}.Build()
	File_livekit_recording_proto = out.File
	file_livekit_recording_proto_rawDesc = nil
	file_livekit_recording_proto_goTypes = nil
	file_livekit_recording_proto_depIdxs = nil
}
