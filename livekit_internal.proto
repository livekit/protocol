syntax = "proto3";

package livekit;
option go_package = "github.com/livekit/livekit-server/proto/livekit";

// internal protos, not exposed to clients
import "livekit_rtc.proto";
import "livekit_room.proto";

message Node {
  string id = 1;
  string ip = 2;
  uint32 num_cpus = 3;
  NodeStats stats = 4;
}

message NodeStats {
  // when server was started
  int64 started_at = 1;
  // when server last reported its status
  int64 updated_at = 2;
  uint32 num_rooms = 3;
  uint32 num_clients = 4;
  uint32 num_tracks_in = 5;
  uint32 num_tracks_out = 6;
}

// message to RTC nodes
message RTCNodeMessage {
  string participant_key = 1;
  oneof message {
    StartSession start_session = 2;
    SignalRequest request = 3;
    // internal messages
    RoomParticipantIdentity remove_participant = 4;
    MuteRoomTrackRequest mute_track = 5;
    UpdateParticipantRequest update_participant = 6;
    DeleteRoomRequest delete_room = 7;
    UpdateSubscriptionsRequest update_subscriptions = 8;
  }
}

// message to Signal nodes
message SignalNodeMessage {
  string connection_id = 1;
  oneof message {
    SignalResponse response = 2;
    EndSession end_session = 3;
  }
}

message StartSession {
  string room_name = 1;
  string identity = 2;
  string connection_id = 3;
  // if a client is reconnecting (i.e. resume instead of restart)
  bool reconnect = 4;
  // metadata to pass to participant
  string metadata = 5;
  ParticipantPermission permission = 6;
  int32 protocol_version = 7;
  bool use_plan_b = 8;
  bool auto_subscribe = 9;
  bool hidden = 10;
}

message EndSession {
}

message RemoveParticipant {
  string participant_id = 1;
}

message RecordingTemplate {
  string type = 1;
  string ws_url = 2;
  string token = 3;
}

message RecordingInput {
  string url = 1;
  RecordingTemplate template = 2;
  int32 width = 3;
  int32 height = 4;
  int32 depth = 5;
  int32 framerate = 6;
}

message RecordingS3Output {
  string bucket = 1;
  string key = 2;
  string access_key = 3;
  string secret = 4;
}

message RecordingOutput {
  string file = 1;
  string rtmp = 2;
  RecordingS3Output s3 = 3;
  int32 width = 4;
  int32 height = 5;
  string audioBitrate = 6;
  string audioFrequency = 7;
  string videoBitrate = 8;
  string videoBuffer = 9;
}

message StartRoomRecording {
  string id = 1;
  RecordingInput input = 2;
  RecordingOutput output = 3;
}

message EndRoomRecording {
  string id = 1;
}
