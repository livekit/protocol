{"version":3,"sources":["../../src/gen/livekit_agent_pb.ts"],"sourcesContent":["// Copyright 2023 LiveKit, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @generated by protoc-gen-es v1.10.0 with parameter \"target=ts\"\n// @generated from file livekit_agent.proto (package livekit, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from \"@bufbuild/protobuf\";\nimport { Message, proto3, protoInt64 } from \"@bufbuild/protobuf\";\nimport { ParticipantInfo, ParticipantPermission, Room, ServerInfo } from \"./livekit_models_pb.js\";\n\n/**\n * @generated from enum livekit.JobType\n */\nexport enum JobType {\n  /**\n   * @generated from enum value: JT_ROOM = 0;\n   */\n  JT_ROOM = 0,\n\n  /**\n   * @generated from enum value: JT_PUBLISHER = 1;\n   */\n  JT_PUBLISHER = 1,\n}\n// Retrieve enum metadata with: proto3.getEnumType(JobType)\nproto3.util.setEnumType(JobType, \"livekit.JobType\", [\n  { no: 0, name: \"JT_ROOM\" },\n  { no: 1, name: \"JT_PUBLISHER\" },\n]);\n\n/**\n * @generated from enum livekit.WorkerStatus\n */\nexport enum WorkerStatus {\n  /**\n   * @generated from enum value: WS_AVAILABLE = 0;\n   */\n  WS_AVAILABLE = 0,\n\n  /**\n   * @generated from enum value: WS_FULL = 1;\n   */\n  WS_FULL = 1,\n}\n// Retrieve enum metadata with: proto3.getEnumType(WorkerStatus)\nproto3.util.setEnumType(WorkerStatus, \"livekit.WorkerStatus\", [\n  { no: 0, name: \"WS_AVAILABLE\" },\n  { no: 1, name: \"WS_FULL\" },\n]);\n\n/**\n * @generated from enum livekit.JobStatus\n */\nexport enum JobStatus {\n  /**\n   * @generated from enum value: JS_PENDING = 0;\n   */\n  JS_PENDING = 0,\n\n  /**\n   * @generated from enum value: JS_RUNNING = 1;\n   */\n  JS_RUNNING = 1,\n\n  /**\n   * @generated from enum value: JS_SUCCESS = 2;\n   */\n  JS_SUCCESS = 2,\n\n  /**\n   * @generated from enum value: JS_FAILED = 3;\n   */\n  JS_FAILED = 3,\n}\n// Retrieve enum metadata with: proto3.getEnumType(JobStatus)\nproto3.util.setEnumType(JobStatus, \"livekit.JobStatus\", [\n  { no: 0, name: \"JS_PENDING\" },\n  { no: 1, name: \"JS_RUNNING\" },\n  { no: 2, name: \"JS_SUCCESS\" },\n  { no: 3, name: \"JS_FAILED\" },\n]);\n\n/**\n * @generated from message livekit.Job\n */\nexport class Job extends Message<Job> {\n  /**\n   * @generated from field: string id = 1;\n   */\n  id = \"\";\n\n  /**\n   * @generated from field: string dispatch_id = 9;\n   */\n  dispatchId = \"\";\n\n  /**\n   * @generated from field: livekit.JobType type = 2;\n   */\n  type = JobType.JT_ROOM;\n\n  /**\n   * @generated from field: livekit.Room room = 3;\n   */\n  room?: Room;\n\n  /**\n   * @generated from field: optional livekit.ParticipantInfo participant = 4;\n   */\n  participant?: ParticipantInfo;\n\n  /**\n   * @generated from field: string namespace = 5 [deprecated = true];\n   * @deprecated\n   */\n  namespace = \"\";\n\n  /**\n   * @generated from field: string metadata = 6;\n   */\n  metadata = \"\";\n\n  /**\n   * @generated from field: string agent_name = 7;\n   */\n  agentName = \"\";\n\n  /**\n   * @generated from field: livekit.JobState state = 8;\n   */\n  state?: JobState;\n\n  constructor(data?: PartialMessage<Job>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.Job\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 9, name: \"dispatch_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"type\", kind: \"enum\", T: proto3.getEnumType(JobType) },\n    { no: 3, name: \"room\", kind: \"message\", T: Room },\n    { no: 4, name: \"participant\", kind: \"message\", T: ParticipantInfo, opt: true },\n    { no: 5, name: \"namespace\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"metadata\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 7, name: \"agent_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 8, name: \"state\", kind: \"message\", T: JobState },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Job {\n    return new Job().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Job {\n    return new Job().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Job {\n    return new Job().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Job | PlainMessage<Job> | undefined, b: Job | PlainMessage<Job> | undefined): boolean {\n    return proto3.util.equals(Job, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.JobState\n */\nexport class JobState extends Message<JobState> {\n  /**\n   * @generated from field: livekit.JobStatus status = 1;\n   */\n  status = JobStatus.JS_PENDING;\n\n  /**\n   * @generated from field: string error = 2;\n   */\n  error = \"\";\n\n  /**\n   * @generated from field: int64 started_at = 3;\n   */\n  startedAt = protoInt64.zero;\n\n  /**\n   * @generated from field: int64 ended_at = 4;\n   */\n  endedAt = protoInt64.zero;\n\n  /**\n   * @generated from field: int64 updated_at = 5;\n   */\n  updatedAt = protoInt64.zero;\n\n  /**\n   * @generated from field: string participant_identity = 6;\n   */\n  participantIdentity = \"\";\n\n  constructor(data?: PartialMessage<JobState>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.JobState\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"status\", kind: \"enum\", T: proto3.getEnumType(JobStatus) },\n    { no: 2, name: \"error\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"started_at\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 4, name: \"ended_at\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 5, name: \"updated_at\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 6, name: \"participant_identity\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobState {\n    return new JobState().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobState {\n    return new JobState().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobState {\n    return new JobState().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: JobState | PlainMessage<JobState> | undefined, b: JobState | PlainMessage<JobState> | undefined): boolean {\n    return proto3.util.equals(JobState, a, b);\n  }\n}\n\n/**\n * from Worker to Server\n *\n * @generated from message livekit.WorkerMessage\n */\nexport class WorkerMessage extends Message<WorkerMessage> {\n  /**\n   * @generated from oneof livekit.WorkerMessage.message\n   */\n  message: {\n    /**\n     * agent workers need to register themselves with the server first\n     *\n     * @generated from field: livekit.RegisterWorkerRequest register = 1;\n     */\n    value: RegisterWorkerRequest;\n    case: \"register\";\n  } | {\n    /**\n     * worker confirms to server that it's available for a job, or declines it\n     *\n     * @generated from field: livekit.AvailabilityResponse availability = 2;\n     */\n    value: AvailabilityResponse;\n    case: \"availability\";\n  } | {\n    /**\n     * worker can update its status to the server, including taking itself out of the pool\n     *\n     * @generated from field: livekit.UpdateWorkerStatus update_worker = 3;\n     */\n    value: UpdateWorkerStatus;\n    case: \"updateWorker\";\n  } | {\n    /**\n     * job can send status updates to the server, useful for tracking progress\n     *\n     * @generated from field: livekit.UpdateJobStatus update_job = 4;\n     */\n    value: UpdateJobStatus;\n    case: \"updateJob\";\n  } | {\n    /**\n     * @generated from field: livekit.WorkerPing ping = 5;\n     */\n    value: WorkerPing;\n    case: \"ping\";\n  } | {\n    /**\n     * @generated from field: livekit.SimulateJobRequest simulate_job = 6;\n     */\n    value: SimulateJobRequest;\n    case: \"simulateJob\";\n  } | {\n    /**\n     * @generated from field: livekit.MigrateJobRequest migrate_job = 7;\n     */\n    value: MigrateJobRequest;\n    case: \"migrateJob\";\n  } | { case: undefined; value?: undefined } = { case: undefined };\n\n  constructor(data?: PartialMessage<WorkerMessage>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.WorkerMessage\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"register\", kind: \"message\", T: RegisterWorkerRequest, oneof: \"message\" },\n    { no: 2, name: \"availability\", kind: \"message\", T: AvailabilityResponse, oneof: \"message\" },\n    { no: 3, name: \"update_worker\", kind: \"message\", T: UpdateWorkerStatus, oneof: \"message\" },\n    { no: 4, name: \"update_job\", kind: \"message\", T: UpdateJobStatus, oneof: \"message\" },\n    { no: 5, name: \"ping\", kind: \"message\", T: WorkerPing, oneof: \"message\" },\n    { no: 6, name: \"simulate_job\", kind: \"message\", T: SimulateJobRequest, oneof: \"message\" },\n    { no: 7, name: \"migrate_job\", kind: \"message\", T: MigrateJobRequest, oneof: \"message\" },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkerMessage {\n    return new WorkerMessage().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkerMessage {\n    return new WorkerMessage().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkerMessage {\n    return new WorkerMessage().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: WorkerMessage | PlainMessage<WorkerMessage> | undefined, b: WorkerMessage | PlainMessage<WorkerMessage> | undefined): boolean {\n    return proto3.util.equals(WorkerMessage, a, b);\n  }\n}\n\n/**\n * from Server to Worker\n *\n * @generated from message livekit.ServerMessage\n */\nexport class ServerMessage extends Message<ServerMessage> {\n  /**\n   * @generated from oneof livekit.ServerMessage.message\n   */\n  message: {\n    /**\n     * server confirms the registration, from this moment on, the worker is considered active\n     *\n     * @generated from field: livekit.RegisterWorkerResponse register = 1;\n     */\n    value: RegisterWorkerResponse;\n    case: \"register\";\n  } | {\n    /**\n     * server asks worker to confirm availability for a job\n     *\n     * @generated from field: livekit.AvailabilityRequest availability = 2;\n     */\n    value: AvailabilityRequest;\n    case: \"availability\";\n  } | {\n    /**\n     * @generated from field: livekit.JobAssignment assignment = 3;\n     */\n    value: JobAssignment;\n    case: \"assignment\";\n  } | {\n    /**\n     * @generated from field: livekit.JobTermination termination = 5;\n     */\n    value: JobTermination;\n    case: \"termination\";\n  } | {\n    /**\n     * @generated from field: livekit.WorkerPong pong = 4;\n     */\n    value: WorkerPong;\n    case: \"pong\";\n  } | { case: undefined; value?: undefined } = { case: undefined };\n\n  constructor(data?: PartialMessage<ServerMessage>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ServerMessage\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"register\", kind: \"message\", T: RegisterWorkerResponse, oneof: \"message\" },\n    { no: 2, name: \"availability\", kind: \"message\", T: AvailabilityRequest, oneof: \"message\" },\n    { no: 3, name: \"assignment\", kind: \"message\", T: JobAssignment, oneof: \"message\" },\n    { no: 5, name: \"termination\", kind: \"message\", T: JobTermination, oneof: \"message\" },\n    { no: 4, name: \"pong\", kind: \"message\", T: WorkerPong, oneof: \"message\" },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerMessage {\n    return new ServerMessage().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerMessage {\n    return new ServerMessage().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerMessage {\n    return new ServerMessage().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ServerMessage | PlainMessage<ServerMessage> | undefined, b: ServerMessage | PlainMessage<ServerMessage> | undefined): boolean {\n    return proto3.util.equals(ServerMessage, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SimulateJobRequest\n */\nexport class SimulateJobRequest extends Message<SimulateJobRequest> {\n  /**\n   * @generated from field: livekit.JobType type = 1;\n   */\n  type = JobType.JT_ROOM;\n\n  /**\n   * @generated from field: livekit.Room room = 2;\n   */\n  room?: Room;\n\n  /**\n   * @generated from field: livekit.ParticipantInfo participant = 3;\n   */\n  participant?: ParticipantInfo;\n\n  constructor(data?: PartialMessage<SimulateJobRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SimulateJobRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"type\", kind: \"enum\", T: proto3.getEnumType(JobType) },\n    { no: 2, name: \"room\", kind: \"message\", T: Room },\n    { no: 3, name: \"participant\", kind: \"message\", T: ParticipantInfo },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimulateJobRequest {\n    return new SimulateJobRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimulateJobRequest {\n    return new SimulateJobRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimulateJobRequest {\n    return new SimulateJobRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SimulateJobRequest | PlainMessage<SimulateJobRequest> | undefined, b: SimulateJobRequest | PlainMessage<SimulateJobRequest> | undefined): boolean {\n    return proto3.util.equals(SimulateJobRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.WorkerPing\n */\nexport class WorkerPing extends Message<WorkerPing> {\n  /**\n   * @generated from field: int64 timestamp = 1;\n   */\n  timestamp = protoInt64.zero;\n\n  constructor(data?: PartialMessage<WorkerPing>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.WorkerPing\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"timestamp\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkerPing {\n    return new WorkerPing().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkerPing {\n    return new WorkerPing().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkerPing {\n    return new WorkerPing().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: WorkerPing | PlainMessage<WorkerPing> | undefined, b: WorkerPing | PlainMessage<WorkerPing> | undefined): boolean {\n    return proto3.util.equals(WorkerPing, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.WorkerPong\n */\nexport class WorkerPong extends Message<WorkerPong> {\n  /**\n   * @generated from field: int64 last_timestamp = 1;\n   */\n  lastTimestamp = protoInt64.zero;\n\n  /**\n   * @generated from field: int64 timestamp = 2;\n   */\n  timestamp = protoInt64.zero;\n\n  constructor(data?: PartialMessage<WorkerPong>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.WorkerPong\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"last_timestamp\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 2, name: \"timestamp\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkerPong {\n    return new WorkerPong().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkerPong {\n    return new WorkerPong().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkerPong {\n    return new WorkerPong().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: WorkerPong | PlainMessage<WorkerPong> | undefined, b: WorkerPong | PlainMessage<WorkerPong> | undefined): boolean {\n    return proto3.util.equals(WorkerPong, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.RegisterWorkerRequest\n */\nexport class RegisterWorkerRequest extends Message<RegisterWorkerRequest> {\n  /**\n   * @generated from field: livekit.JobType type = 1;\n   */\n  type = JobType.JT_ROOM;\n\n  /**\n   * @generated from field: string agent_name = 8;\n   */\n  agentName = \"\";\n\n  /**\n   * string worker_id = 2;\n   *\n   * @generated from field: string version = 3;\n   */\n  version = \"\";\n\n  /**\n   * string name = 4 [deprecated = true];\n   *\n   * @generated from field: uint32 ping_interval = 5;\n   */\n  pingInterval = 0;\n\n  /**\n   * @generated from field: optional string namespace = 6;\n   */\n  namespace?: string;\n\n  /**\n   * @generated from field: livekit.ParticipantPermission allowed_permissions = 7;\n   */\n  allowedPermissions?: ParticipantPermission;\n\n  constructor(data?: PartialMessage<RegisterWorkerRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.RegisterWorkerRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"type\", kind: \"enum\", T: proto3.getEnumType(JobType) },\n    { no: 8, name: \"agent_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"version\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"ping_interval\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 6, name: \"namespace\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 7, name: \"allowed_permissions\", kind: \"message\", T: ParticipantPermission },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterWorkerRequest {\n    return new RegisterWorkerRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterWorkerRequest {\n    return new RegisterWorkerRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterWorkerRequest {\n    return new RegisterWorkerRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: RegisterWorkerRequest | PlainMessage<RegisterWorkerRequest> | undefined, b: RegisterWorkerRequest | PlainMessage<RegisterWorkerRequest> | undefined): boolean {\n    return proto3.util.equals(RegisterWorkerRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.RegisterWorkerResponse\n */\nexport class RegisterWorkerResponse extends Message<RegisterWorkerResponse> {\n  /**\n   * @generated from field: string worker_id = 1;\n   */\n  workerId = \"\";\n\n  /**\n   * @generated from field: livekit.ServerInfo server_info = 3;\n   */\n  serverInfo?: ServerInfo;\n\n  constructor(data?: PartialMessage<RegisterWorkerResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.RegisterWorkerResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"worker_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"server_info\", kind: \"message\", T: ServerInfo },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterWorkerResponse {\n    return new RegisterWorkerResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterWorkerResponse {\n    return new RegisterWorkerResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterWorkerResponse {\n    return new RegisterWorkerResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: RegisterWorkerResponse | PlainMessage<RegisterWorkerResponse> | undefined, b: RegisterWorkerResponse | PlainMessage<RegisterWorkerResponse> | undefined): boolean {\n    return proto3.util.equals(RegisterWorkerResponse, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.MigrateJobRequest\n */\nexport class MigrateJobRequest extends Message<MigrateJobRequest> {\n  /**\n   * string job_id = 1 [deprecated = true];\n   *\n   * @generated from field: repeated string job_ids = 2;\n   */\n  jobIds: string[] = [];\n\n  constructor(data?: PartialMessage<MigrateJobRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.MigrateJobRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 2, name: \"job_ids\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigrateJobRequest {\n    return new MigrateJobRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigrateJobRequest {\n    return new MigrateJobRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigrateJobRequest {\n    return new MigrateJobRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: MigrateJobRequest | PlainMessage<MigrateJobRequest> | undefined, b: MigrateJobRequest | PlainMessage<MigrateJobRequest> | undefined): boolean {\n    return proto3.util.equals(MigrateJobRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.AvailabilityRequest\n */\nexport class AvailabilityRequest extends Message<AvailabilityRequest> {\n  /**\n   * @generated from field: livekit.Job job = 1;\n   */\n  job?: Job;\n\n  /**\n   * True when the job was previously assigned to another worker but has been\n   * migrated due to different reasons (e.g. worker failure, job migration)\n   *\n   * @generated from field: bool resuming = 2;\n   */\n  resuming = false;\n\n  constructor(data?: PartialMessage<AvailabilityRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.AvailabilityRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"job\", kind: \"message\", T: Job },\n    { no: 2, name: \"resuming\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AvailabilityRequest {\n    return new AvailabilityRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AvailabilityRequest {\n    return new AvailabilityRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AvailabilityRequest {\n    return new AvailabilityRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: AvailabilityRequest | PlainMessage<AvailabilityRequest> | undefined, b: AvailabilityRequest | PlainMessage<AvailabilityRequest> | undefined): boolean {\n    return proto3.util.equals(AvailabilityRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.AvailabilityResponse\n */\nexport class AvailabilityResponse extends Message<AvailabilityResponse> {\n  /**\n   * @generated from field: string job_id = 1;\n   */\n  jobId = \"\";\n\n  /**\n   * @generated from field: bool available = 2;\n   */\n  available = false;\n\n  /**\n   * @generated from field: bool supports_resume = 3;\n   */\n  supportsResume = false;\n\n  /**\n   * @generated from field: string participant_name = 4;\n   */\n  participantName = \"\";\n\n  /**\n   * @generated from field: string participant_identity = 5;\n   */\n  participantIdentity = \"\";\n\n  /**\n   * @generated from field: string participant_metadata = 6;\n   */\n  participantMetadata = \"\";\n\n  /**\n   * @generated from field: map<string, string> participant_attributes = 7;\n   */\n  participantAttributes: { [key: string]: string } = {};\n\n  constructor(data?: PartialMessage<AvailabilityResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.AvailabilityResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"job_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"available\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 3, name: \"supports_resume\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 4, name: \"participant_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"participant_identity\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"participant_metadata\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 7, name: \"participant_attributes\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"scalar\", T: 9 /* ScalarType.STRING */} },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AvailabilityResponse {\n    return new AvailabilityResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AvailabilityResponse {\n    return new AvailabilityResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AvailabilityResponse {\n    return new AvailabilityResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: AvailabilityResponse | PlainMessage<AvailabilityResponse> | undefined, b: AvailabilityResponse | PlainMessage<AvailabilityResponse> | undefined): boolean {\n    return proto3.util.equals(AvailabilityResponse, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.UpdateJobStatus\n */\nexport class UpdateJobStatus extends Message<UpdateJobStatus> {\n  /**\n   * @generated from field: string job_id = 1;\n   */\n  jobId = \"\";\n\n  /**\n   * The worker can indicate the job end by either specifying SUCCESS or FAILED\n   *\n   * @generated from field: livekit.JobStatus status = 2;\n   */\n  status = JobStatus.JS_PENDING;\n\n  /**\n   * metadata shown on the dashboard, useful for debugging\n   *\n   * @generated from field: string error = 3;\n   */\n  error = \"\";\n\n  constructor(data?: PartialMessage<UpdateJobStatus>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.UpdateJobStatus\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"job_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"status\", kind: \"enum\", T: proto3.getEnumType(JobStatus) },\n    { no: 3, name: \"error\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateJobStatus {\n    return new UpdateJobStatus().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateJobStatus {\n    return new UpdateJobStatus().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateJobStatus {\n    return new UpdateJobStatus().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateJobStatus | PlainMessage<UpdateJobStatus> | undefined, b: UpdateJobStatus | PlainMessage<UpdateJobStatus> | undefined): boolean {\n    return proto3.util.equals(UpdateJobStatus, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.UpdateWorkerStatus\n */\nexport class UpdateWorkerStatus extends Message<UpdateWorkerStatus> {\n  /**\n   * @generated from field: optional livekit.WorkerStatus status = 1;\n   */\n  status?: WorkerStatus;\n\n  /**\n   * optional string metadata = 2 [deprecated=true];\n   *\n   * @generated from field: float load = 3;\n   */\n  load = 0;\n\n  /**\n   * @generated from field: uint32 job_count = 4;\n   */\n  jobCount = 0;\n\n  constructor(data?: PartialMessage<UpdateWorkerStatus>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.UpdateWorkerStatus\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"status\", kind: \"enum\", T: proto3.getEnumType(WorkerStatus), opt: true },\n    { no: 3, name: \"load\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n    { no: 4, name: \"job_count\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWorkerStatus {\n    return new UpdateWorkerStatus().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWorkerStatus {\n    return new UpdateWorkerStatus().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWorkerStatus {\n    return new UpdateWorkerStatus().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateWorkerStatus | PlainMessage<UpdateWorkerStatus> | undefined, b: UpdateWorkerStatus | PlainMessage<UpdateWorkerStatus> | undefined): boolean {\n    return proto3.util.equals(UpdateWorkerStatus, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.JobAssignment\n */\nexport class JobAssignment extends Message<JobAssignment> {\n  /**\n   * @generated from field: livekit.Job job = 1;\n   */\n  job?: Job;\n\n  /**\n   * @generated from field: optional string url = 2;\n   */\n  url?: string;\n\n  /**\n   * @generated from field: string token = 3;\n   */\n  token = \"\";\n\n  constructor(data?: PartialMessage<JobAssignment>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.JobAssignment\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"job\", kind: \"message\", T: Job },\n    { no: 2, name: \"url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 3, name: \"token\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobAssignment {\n    return new JobAssignment().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobAssignment {\n    return new JobAssignment().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobAssignment {\n    return new JobAssignment().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: JobAssignment | PlainMessage<JobAssignment> | undefined, b: JobAssignment | PlainMessage<JobAssignment> | undefined): boolean {\n    return proto3.util.equals(JobAssignment, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.JobTermination\n */\nexport class JobTermination extends Message<JobTermination> {\n  /**\n   * @generated from field: string job_id = 1;\n   */\n  jobId = \"\";\n\n  constructor(data?: PartialMessage<JobTermination>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.JobTermination\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"job_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobTermination {\n    return new JobTermination().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobTermination {\n    return new JobTermination().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobTermination {\n    return new JobTermination().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: JobTermination | PlainMessage<JobTermination> | undefined, b: JobTermination | PlainMessage<JobTermination> | undefined): boolean {\n    return proto3.util.equals(JobTermination, a, b);\n  }\n}\n\n"],"mappings":"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","names":["JobType","WorkerStatus","JobStatus"]}