{"version":3,"sources":["../../src/gen/livekit_models_pb.ts"],"sourcesContent":["// Copyright 2023 LiveKit, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @generated by protoc-gen-es v1.10.0 with parameter \"target=ts\"\n// @generated from file livekit_models.proto (package livekit, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from \"@bufbuild/protobuf\";\nimport { Message, proto3, protoInt64, Timestamp } from \"@bufbuild/protobuf\";\nimport { MetricsBatch } from \"./livekit_metrics_pb.js\";\n\n/**\n * @generated from enum livekit.AudioCodec\n */\nexport enum AudioCodec {\n  /**\n   * @generated from enum value: DEFAULT_AC = 0;\n   */\n  DEFAULT_AC = 0,\n\n  /**\n   * @generated from enum value: OPUS = 1;\n   */\n  OPUS = 1,\n\n  /**\n   * @generated from enum value: AAC = 2;\n   */\n  AAC = 2,\n}\n// Retrieve enum metadata with: proto3.getEnumType(AudioCodec)\nproto3.util.setEnumType(AudioCodec, \"livekit.AudioCodec\", [\n  { no: 0, name: \"DEFAULT_AC\" },\n  { no: 1, name: \"OPUS\" },\n  { no: 2, name: \"AAC\" },\n]);\n\n/**\n * @generated from enum livekit.VideoCodec\n */\nexport enum VideoCodec {\n  /**\n   * @generated from enum value: DEFAULT_VC = 0;\n   */\n  DEFAULT_VC = 0,\n\n  /**\n   * @generated from enum value: H264_BASELINE = 1;\n   */\n  H264_BASELINE = 1,\n\n  /**\n   * @generated from enum value: H264_MAIN = 2;\n   */\n  H264_MAIN = 2,\n\n  /**\n   * @generated from enum value: H264_HIGH = 3;\n   */\n  H264_HIGH = 3,\n\n  /**\n   * @generated from enum value: VP8 = 4;\n   */\n  VP8 = 4,\n}\n// Retrieve enum metadata with: proto3.getEnumType(VideoCodec)\nproto3.util.setEnumType(VideoCodec, \"livekit.VideoCodec\", [\n  { no: 0, name: \"DEFAULT_VC\" },\n  { no: 1, name: \"H264_BASELINE\" },\n  { no: 2, name: \"H264_MAIN\" },\n  { no: 3, name: \"H264_HIGH\" },\n  { no: 4, name: \"VP8\" },\n]);\n\n/**\n * @generated from enum livekit.ImageCodec\n */\nexport enum ImageCodec {\n  /**\n   * @generated from enum value: IC_DEFAULT = 0;\n   */\n  IC_DEFAULT = 0,\n\n  /**\n   * @generated from enum value: IC_JPEG = 1;\n   */\n  IC_JPEG = 1,\n}\n// Retrieve enum metadata with: proto3.getEnumType(ImageCodec)\nproto3.util.setEnumType(ImageCodec, \"livekit.ImageCodec\", [\n  { no: 0, name: \"IC_DEFAULT\" },\n  { no: 1, name: \"IC_JPEG\" },\n]);\n\n/**\n * @generated from enum livekit.TrackType\n */\nexport enum TrackType {\n  /**\n   * @generated from enum value: AUDIO = 0;\n   */\n  AUDIO = 0,\n\n  /**\n   * @generated from enum value: VIDEO = 1;\n   */\n  VIDEO = 1,\n\n  /**\n   * @generated from enum value: DATA = 2;\n   */\n  DATA = 2,\n}\n// Retrieve enum metadata with: proto3.getEnumType(TrackType)\nproto3.util.setEnumType(TrackType, \"livekit.TrackType\", [\n  { no: 0, name: \"AUDIO\" },\n  { no: 1, name: \"VIDEO\" },\n  { no: 2, name: \"DATA\" },\n]);\n\n/**\n * @generated from enum livekit.TrackSource\n */\nexport enum TrackSource {\n  /**\n   * @generated from enum value: UNKNOWN = 0;\n   */\n  UNKNOWN = 0,\n\n  /**\n   * @generated from enum value: CAMERA = 1;\n   */\n  CAMERA = 1,\n\n  /**\n   * @generated from enum value: MICROPHONE = 2;\n   */\n  MICROPHONE = 2,\n\n  /**\n   * @generated from enum value: SCREEN_SHARE = 3;\n   */\n  SCREEN_SHARE = 3,\n\n  /**\n   * @generated from enum value: SCREEN_SHARE_AUDIO = 4;\n   */\n  SCREEN_SHARE_AUDIO = 4,\n}\n// Retrieve enum metadata with: proto3.getEnumType(TrackSource)\nproto3.util.setEnumType(TrackSource, \"livekit.TrackSource\", [\n  { no: 0, name: \"UNKNOWN\" },\n  { no: 1, name: \"CAMERA\" },\n  { no: 2, name: \"MICROPHONE\" },\n  { no: 3, name: \"SCREEN_SHARE\" },\n  { no: 4, name: \"SCREEN_SHARE_AUDIO\" },\n]);\n\n/**\n * @generated from enum livekit.VideoQuality\n */\nexport enum VideoQuality {\n  /**\n   * @generated from enum value: LOW = 0;\n   */\n  LOW = 0,\n\n  /**\n   * @generated from enum value: MEDIUM = 1;\n   */\n  MEDIUM = 1,\n\n  /**\n   * @generated from enum value: HIGH = 2;\n   */\n  HIGH = 2,\n\n  /**\n   * @generated from enum value: OFF = 3;\n   */\n  OFF = 3,\n}\n// Retrieve enum metadata with: proto3.getEnumType(VideoQuality)\nproto3.util.setEnumType(VideoQuality, \"livekit.VideoQuality\", [\n  { no: 0, name: \"LOW\" },\n  { no: 1, name: \"MEDIUM\" },\n  { no: 2, name: \"HIGH\" },\n  { no: 3, name: \"OFF\" },\n]);\n\n/**\n * @generated from enum livekit.ConnectionQuality\n */\nexport enum ConnectionQuality {\n  /**\n   * @generated from enum value: POOR = 0;\n   */\n  POOR = 0,\n\n  /**\n   * @generated from enum value: GOOD = 1;\n   */\n  GOOD = 1,\n\n  /**\n   * @generated from enum value: EXCELLENT = 2;\n   */\n  EXCELLENT = 2,\n\n  /**\n   * @generated from enum value: LOST = 3;\n   */\n  LOST = 3,\n}\n// Retrieve enum metadata with: proto3.getEnumType(ConnectionQuality)\nproto3.util.setEnumType(ConnectionQuality, \"livekit.ConnectionQuality\", [\n  { no: 0, name: \"POOR\" },\n  { no: 1, name: \"GOOD\" },\n  { no: 2, name: \"EXCELLENT\" },\n  { no: 3, name: \"LOST\" },\n]);\n\n/**\n * @generated from enum livekit.ClientConfigSetting\n */\nexport enum ClientConfigSetting {\n  /**\n   * @generated from enum value: UNSET = 0;\n   */\n  UNSET = 0,\n\n  /**\n   * @generated from enum value: DISABLED = 1;\n   */\n  DISABLED = 1,\n\n  /**\n   * @generated from enum value: ENABLED = 2;\n   */\n  ENABLED = 2,\n}\n// Retrieve enum metadata with: proto3.getEnumType(ClientConfigSetting)\nproto3.util.setEnumType(ClientConfigSetting, \"livekit.ClientConfigSetting\", [\n  { no: 0, name: \"UNSET\" },\n  { no: 1, name: \"DISABLED\" },\n  { no: 2, name: \"ENABLED\" },\n]);\n\n/**\n * @generated from enum livekit.DisconnectReason\n */\nexport enum DisconnectReason {\n  /**\n   * @generated from enum value: UNKNOWN_REASON = 0;\n   */\n  UNKNOWN_REASON = 0,\n\n  /**\n   * the client initiated the disconnect\n   *\n   * @generated from enum value: CLIENT_INITIATED = 1;\n   */\n  CLIENT_INITIATED = 1,\n\n  /**\n   * another participant with the same identity has joined the room\n   *\n   * @generated from enum value: DUPLICATE_IDENTITY = 2;\n   */\n  DUPLICATE_IDENTITY = 2,\n\n  /**\n   * the server instance is shutting down\n   *\n   * @generated from enum value: SERVER_SHUTDOWN = 3;\n   */\n  SERVER_SHUTDOWN = 3,\n\n  /**\n   * RoomService.RemoveParticipant was called\n   *\n   * @generated from enum value: PARTICIPANT_REMOVED = 4;\n   */\n  PARTICIPANT_REMOVED = 4,\n\n  /**\n   * RoomService.DeleteRoom was called\n   *\n   * @generated from enum value: ROOM_DELETED = 5;\n   */\n  ROOM_DELETED = 5,\n\n  /**\n   * the client is attempting to resume a session, but server is not aware of it\n   *\n   * @generated from enum value: STATE_MISMATCH = 6;\n   */\n  STATE_MISMATCH = 6,\n\n  /**\n   * client was unable to connect fully\n   *\n   * @generated from enum value: JOIN_FAILURE = 7;\n   */\n  JOIN_FAILURE = 7,\n\n  /**\n   * Cloud-only, the server requested Participant to migrate the connection elsewhere\n   *\n   * @generated from enum value: MIGRATION = 8;\n   */\n  MIGRATION = 8,\n\n  /**\n   * the signal websocket was closed unexpectedly\n   *\n   * @generated from enum value: SIGNAL_CLOSE = 9;\n   */\n  SIGNAL_CLOSE = 9,\n\n  /**\n   * the room was closed, due to all Standard and Ingress participants having left\n   *\n   * @generated from enum value: ROOM_CLOSED = 10;\n   */\n  ROOM_CLOSED = 10,\n\n  /**\n   * SIP callee did not respond in time\n   *\n   * @generated from enum value: USER_UNAVAILABLE = 11;\n   */\n  USER_UNAVAILABLE = 11,\n\n  /**\n   * SIP callee rejected the call (busy)\n   *\n   * @generated from enum value: USER_REJECTED = 12;\n   */\n  USER_REJECTED = 12,\n\n  /**\n   * SIP protocol failure or unexpected response\n   *\n   * @generated from enum value: SIP_TRUNK_FAILURE = 13;\n   */\n  SIP_TRUNK_FAILURE = 13,\n}\n// Retrieve enum metadata with: proto3.getEnumType(DisconnectReason)\nproto3.util.setEnumType(DisconnectReason, \"livekit.DisconnectReason\", [\n  { no: 0, name: \"UNKNOWN_REASON\" },\n  { no: 1, name: \"CLIENT_INITIATED\" },\n  { no: 2, name: \"DUPLICATE_IDENTITY\" },\n  { no: 3, name: \"SERVER_SHUTDOWN\" },\n  { no: 4, name: \"PARTICIPANT_REMOVED\" },\n  { no: 5, name: \"ROOM_DELETED\" },\n  { no: 6, name: \"STATE_MISMATCH\" },\n  { no: 7, name: \"JOIN_FAILURE\" },\n  { no: 8, name: \"MIGRATION\" },\n  { no: 9, name: \"SIGNAL_CLOSE\" },\n  { no: 10, name: \"ROOM_CLOSED\" },\n  { no: 11, name: \"USER_UNAVAILABLE\" },\n  { no: 12, name: \"USER_REJECTED\" },\n  { no: 13, name: \"SIP_TRUNK_FAILURE\" },\n]);\n\n/**\n * @generated from enum livekit.ReconnectReason\n */\nexport enum ReconnectReason {\n  /**\n   * @generated from enum value: RR_UNKNOWN = 0;\n   */\n  RR_UNKNOWN = 0,\n\n  /**\n   * @generated from enum value: RR_SIGNAL_DISCONNECTED = 1;\n   */\n  RR_SIGNAL_DISCONNECTED = 1,\n\n  /**\n   * @generated from enum value: RR_PUBLISHER_FAILED = 2;\n   */\n  RR_PUBLISHER_FAILED = 2,\n\n  /**\n   * @generated from enum value: RR_SUBSCRIBER_FAILED = 3;\n   */\n  RR_SUBSCRIBER_FAILED = 3,\n\n  /**\n   * @generated from enum value: RR_SWITCH_CANDIDATE = 4;\n   */\n  RR_SWITCH_CANDIDATE = 4,\n}\n// Retrieve enum metadata with: proto3.getEnumType(ReconnectReason)\nproto3.util.setEnumType(ReconnectReason, \"livekit.ReconnectReason\", [\n  { no: 0, name: \"RR_UNKNOWN\" },\n  { no: 1, name: \"RR_SIGNAL_DISCONNECTED\" },\n  { no: 2, name: \"RR_PUBLISHER_FAILED\" },\n  { no: 3, name: \"RR_SUBSCRIBER_FAILED\" },\n  { no: 4, name: \"RR_SWITCH_CANDIDATE\" },\n]);\n\n/**\n * @generated from enum livekit.SubscriptionError\n */\nexport enum SubscriptionError {\n  /**\n   * @generated from enum value: SE_UNKNOWN = 0;\n   */\n  SE_UNKNOWN = 0,\n\n  /**\n   * @generated from enum value: SE_CODEC_UNSUPPORTED = 1;\n   */\n  SE_CODEC_UNSUPPORTED = 1,\n\n  /**\n   * @generated from enum value: SE_TRACK_NOTFOUND = 2;\n   */\n  SE_TRACK_NOTFOUND = 2,\n}\n// Retrieve enum metadata with: proto3.getEnumType(SubscriptionError)\nproto3.util.setEnumType(SubscriptionError, \"livekit.SubscriptionError\", [\n  { no: 0, name: \"SE_UNKNOWN\" },\n  { no: 1, name: \"SE_CODEC_UNSUPPORTED\" },\n  { no: 2, name: \"SE_TRACK_NOTFOUND\" },\n]);\n\n/**\n * @generated from enum livekit.AudioTrackFeature\n */\nexport enum AudioTrackFeature {\n  /**\n   * @generated from enum value: TF_STEREO = 0;\n   */\n  TF_STEREO = 0,\n\n  /**\n   * @generated from enum value: TF_NO_DTX = 1;\n   */\n  TF_NO_DTX = 1,\n\n  /**\n   * @generated from enum value: TF_AUTO_GAIN_CONTROL = 2;\n   */\n  TF_AUTO_GAIN_CONTROL = 2,\n\n  /**\n   * @generated from enum value: TF_ECHO_CANCELLATION = 3;\n   */\n  TF_ECHO_CANCELLATION = 3,\n\n  /**\n   * @generated from enum value: TF_NOISE_SUPPRESSION = 4;\n   */\n  TF_NOISE_SUPPRESSION = 4,\n\n  /**\n   * @generated from enum value: TF_ENHANCED_NOISE_CANCELLATION = 5;\n   */\n  TF_ENHANCED_NOISE_CANCELLATION = 5,\n}\n// Retrieve enum metadata with: proto3.getEnumType(AudioTrackFeature)\nproto3.util.setEnumType(AudioTrackFeature, \"livekit.AudioTrackFeature\", [\n  { no: 0, name: \"TF_STEREO\" },\n  { no: 1, name: \"TF_NO_DTX\" },\n  { no: 2, name: \"TF_AUTO_GAIN_CONTROL\" },\n  { no: 3, name: \"TF_ECHO_CANCELLATION\" },\n  { no: 4, name: \"TF_NOISE_SUPPRESSION\" },\n  { no: 5, name: \"TF_ENHANCED_NOISE_CANCELLATION\" },\n]);\n\n/**\n * @generated from message livekit.Room\n */\nexport class Room extends Message<Room> {\n  /**\n   * @generated from field: string sid = 1;\n   */\n  sid = \"\";\n\n  /**\n   * @generated from field: string name = 2;\n   */\n  name = \"\";\n\n  /**\n   * @generated from field: uint32 empty_timeout = 3;\n   */\n  emptyTimeout = 0;\n\n  /**\n   * @generated from field: uint32 departure_timeout = 14;\n   */\n  departureTimeout = 0;\n\n  /**\n   * @generated from field: uint32 max_participants = 4;\n   */\n  maxParticipants = 0;\n\n  /**\n   * @generated from field: int64 creation_time = 5;\n   */\n  creationTime = protoInt64.zero;\n\n  /**\n   * @generated from field: string turn_password = 6;\n   */\n  turnPassword = \"\";\n\n  /**\n   * @generated from field: repeated livekit.Codec enabled_codecs = 7;\n   */\n  enabledCodecs: Codec[] = [];\n\n  /**\n   * @generated from field: string metadata = 8;\n   */\n  metadata = \"\";\n\n  /**\n   * @generated from field: uint32 num_participants = 9;\n   */\n  numParticipants = 0;\n\n  /**\n   * @generated from field: uint32 num_publishers = 11;\n   */\n  numPublishers = 0;\n\n  /**\n   * @generated from field: bool active_recording = 10;\n   */\n  activeRecording = false;\n\n  /**\n   * @generated from field: livekit.TimedVersion version = 13;\n   */\n  version?: TimedVersion;\n\n  constructor(data?: PartialMessage<Room>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.Room\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"empty_timeout\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 14, name: \"departure_timeout\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"max_participants\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 5, name: \"creation_time\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 6, name: \"turn_password\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 7, name: \"enabled_codecs\", kind: \"message\", T: Codec, repeated: true },\n    { no: 8, name: \"metadata\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 9, name: \"num_participants\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 11, name: \"num_publishers\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 10, name: \"active_recording\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 13, name: \"version\", kind: \"message\", T: TimedVersion },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Room {\n    return new Room().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Room {\n    return new Room().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Room {\n    return new Room().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Room | PlainMessage<Room> | undefined, b: Room | PlainMessage<Room> | undefined): boolean {\n    return proto3.util.equals(Room, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.Codec\n */\nexport class Codec extends Message<Codec> {\n  /**\n   * @generated from field: string mime = 1;\n   */\n  mime = \"\";\n\n  /**\n   * @generated from field: string fmtp_line = 2;\n   */\n  fmtpLine = \"\";\n\n  constructor(data?: PartialMessage<Codec>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.Codec\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"mime\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"fmtp_line\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Codec {\n    return new Codec().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Codec {\n    return new Codec().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Codec {\n    return new Codec().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Codec | PlainMessage<Codec> | undefined, b: Codec | PlainMessage<Codec> | undefined): boolean {\n    return proto3.util.equals(Codec, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.PlayoutDelay\n */\nexport class PlayoutDelay extends Message<PlayoutDelay> {\n  /**\n   * @generated from field: bool enabled = 1;\n   */\n  enabled = false;\n\n  /**\n   * @generated from field: uint32 min = 2;\n   */\n  min = 0;\n\n  /**\n   * @generated from field: uint32 max = 3;\n   */\n  max = 0;\n\n  constructor(data?: PartialMessage<PlayoutDelay>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.PlayoutDelay\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"min\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"max\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayoutDelay {\n    return new PlayoutDelay().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayoutDelay {\n    return new PlayoutDelay().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayoutDelay {\n    return new PlayoutDelay().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: PlayoutDelay | PlainMessage<PlayoutDelay> | undefined, b: PlayoutDelay | PlainMessage<PlayoutDelay> | undefined): boolean {\n    return proto3.util.equals(PlayoutDelay, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.ParticipantPermission\n */\nexport class ParticipantPermission extends Message<ParticipantPermission> {\n  /**\n   * allow participant to subscribe to other tracks in the room\n   *\n   * @generated from field: bool can_subscribe = 1;\n   */\n  canSubscribe = false;\n\n  /**\n   * allow participant to publish new tracks to room\n   *\n   * @generated from field: bool can_publish = 2;\n   */\n  canPublish = false;\n\n  /**\n   * allow participant to publish data\n   *\n   * @generated from field: bool can_publish_data = 3;\n   */\n  canPublishData = false;\n\n  /**\n   * sources that are allowed to be published\n   *\n   * @generated from field: repeated livekit.TrackSource can_publish_sources = 9;\n   */\n  canPublishSources: TrackSource[] = [];\n\n  /**\n   * indicates that it's hidden to others\n   *\n   * @generated from field: bool hidden = 7;\n   */\n  hidden = false;\n\n  /**\n   * indicates it's a recorder instance\n   * deprecated: use ParticipantInfo.kind instead\n   *\n   * @generated from field: bool recorder = 8 [deprecated = true];\n   * @deprecated\n   */\n  recorder = false;\n\n  /**\n   * indicates that participant can update own metadata and attributes\n   *\n   * @generated from field: bool can_update_metadata = 10;\n   */\n  canUpdateMetadata = false;\n\n  /**\n   * indicates that participant is an agent\n   * deprecated: use ParticipantInfo.kind instead\n   *\n   * @generated from field: bool agent = 11 [deprecated = true];\n   * @deprecated\n   */\n  agent = false;\n\n  /**\n   * if a participant can subscribe to metrics\n   *\n   * @generated from field: bool can_subscribe_metrics = 12;\n   */\n  canSubscribeMetrics = false;\n\n  constructor(data?: PartialMessage<ParticipantPermission>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ParticipantPermission\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"can_subscribe\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"can_publish\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 3, name: \"can_publish_data\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 9, name: \"can_publish_sources\", kind: \"enum\", T: proto3.getEnumType(TrackSource), repeated: true },\n    { no: 7, name: \"hidden\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 8, name: \"recorder\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 10, name: \"can_update_metadata\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 11, name: \"agent\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 12, name: \"can_subscribe_metrics\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantPermission {\n    return new ParticipantPermission().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantPermission {\n    return new ParticipantPermission().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantPermission {\n    return new ParticipantPermission().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ParticipantPermission | PlainMessage<ParticipantPermission> | undefined, b: ParticipantPermission | PlainMessage<ParticipantPermission> | undefined): boolean {\n    return proto3.util.equals(ParticipantPermission, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.ParticipantInfo\n */\nexport class ParticipantInfo extends Message<ParticipantInfo> {\n  /**\n   * @generated from field: string sid = 1;\n   */\n  sid = \"\";\n\n  /**\n   * @generated from field: string identity = 2;\n   */\n  identity = \"\";\n\n  /**\n   * @generated from field: livekit.ParticipantInfo.State state = 3;\n   */\n  state = ParticipantInfo_State.JOINING;\n\n  /**\n   * @generated from field: repeated livekit.TrackInfo tracks = 4;\n   */\n  tracks: TrackInfo[] = [];\n\n  /**\n   * @generated from field: string metadata = 5;\n   */\n  metadata = \"\";\n\n  /**\n   * timestamp when participant joined room, in seconds\n   *\n   * @generated from field: int64 joined_at = 6;\n   */\n  joinedAt = protoInt64.zero;\n\n  /**\n   * @generated from field: string name = 9;\n   */\n  name = \"\";\n\n  /**\n   * @generated from field: uint32 version = 10;\n   */\n  version = 0;\n\n  /**\n   * @generated from field: livekit.ParticipantPermission permission = 11;\n   */\n  permission?: ParticipantPermission;\n\n  /**\n   * @generated from field: string region = 12;\n   */\n  region = \"\";\n\n  /**\n   * indicates the participant has an active publisher connection\n   * and can publish to the server\n   *\n   * @generated from field: bool is_publisher = 13;\n   */\n  isPublisher = false;\n\n  /**\n   * @generated from field: livekit.ParticipantInfo.Kind kind = 14;\n   */\n  kind = ParticipantInfo_Kind.STANDARD;\n\n  /**\n   * @generated from field: map<string, string> attributes = 15;\n   */\n  attributes: { [key: string]: string } = {};\n\n  /**\n   * @generated from field: livekit.DisconnectReason disconnect_reason = 16;\n   */\n  disconnectReason = DisconnectReason.UNKNOWN_REASON;\n\n  constructor(data?: PartialMessage<ParticipantInfo>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ParticipantInfo\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"identity\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"state\", kind: \"enum\", T: proto3.getEnumType(ParticipantInfo_State) },\n    { no: 4, name: \"tracks\", kind: \"message\", T: TrackInfo, repeated: true },\n    { no: 5, name: \"metadata\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"joined_at\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 9, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 10, name: \"version\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 11, name: \"permission\", kind: \"message\", T: ParticipantPermission },\n    { no: 12, name: \"region\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 13, name: \"is_publisher\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 14, name: \"kind\", kind: \"enum\", T: proto3.getEnumType(ParticipantInfo_Kind) },\n    { no: 15, name: \"attributes\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"scalar\", T: 9 /* ScalarType.STRING */} },\n    { no: 16, name: \"disconnect_reason\", kind: \"enum\", T: proto3.getEnumType(DisconnectReason) },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantInfo {\n    return new ParticipantInfo().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantInfo {\n    return new ParticipantInfo().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantInfo {\n    return new ParticipantInfo().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ParticipantInfo | PlainMessage<ParticipantInfo> | undefined, b: ParticipantInfo | PlainMessage<ParticipantInfo> | undefined): boolean {\n    return proto3.util.equals(ParticipantInfo, a, b);\n  }\n}\n\n/**\n * @generated from enum livekit.ParticipantInfo.State\n */\nexport enum ParticipantInfo_State {\n  /**\n   * websocket' connected, but not offered yet\n   *\n   * @generated from enum value: JOINING = 0;\n   */\n  JOINING = 0,\n\n  /**\n   * server received client offer\n   *\n   * @generated from enum value: JOINED = 1;\n   */\n  JOINED = 1,\n\n  /**\n   * ICE connectivity established\n   *\n   * @generated from enum value: ACTIVE = 2;\n   */\n  ACTIVE = 2,\n\n  /**\n   * WS disconnected\n   *\n   * @generated from enum value: DISCONNECTED = 3;\n   */\n  DISCONNECTED = 3,\n}\n// Retrieve enum metadata with: proto3.getEnumType(ParticipantInfo_State)\nproto3.util.setEnumType(ParticipantInfo_State, \"livekit.ParticipantInfo.State\", [\n  { no: 0, name: \"JOINING\" },\n  { no: 1, name: \"JOINED\" },\n  { no: 2, name: \"ACTIVE\" },\n  { no: 3, name: \"DISCONNECTED\" },\n]);\n\n/**\n * @generated from enum livekit.ParticipantInfo.Kind\n */\nexport enum ParticipantInfo_Kind {\n  /**\n   * standard participants, e.g. web clients\n   *\n   * @generated from enum value: STANDARD = 0;\n   */\n  STANDARD = 0,\n\n  /**\n   * only ingests streams\n   *\n   * @generated from enum value: INGRESS = 1;\n   */\n  INGRESS = 1,\n\n  /**\n   * only consumes streams\n   *\n   * @generated from enum value: EGRESS = 2;\n   */\n  EGRESS = 2,\n\n  /**\n   * SIP participants\n   *\n   * @generated from enum value: SIP = 3;\n   */\n  SIP = 3,\n\n  /**\n   * LiveKit agents\n   *\n   * @generated from enum value: AGENT = 4;\n   */\n  AGENT = 4,\n}\n// Retrieve enum metadata with: proto3.getEnumType(ParticipantInfo_Kind)\nproto3.util.setEnumType(ParticipantInfo_Kind, \"livekit.ParticipantInfo.Kind\", [\n  { no: 0, name: \"STANDARD\" },\n  { no: 1, name: \"INGRESS\" },\n  { no: 2, name: \"EGRESS\" },\n  { no: 3, name: \"SIP\" },\n  { no: 4, name: \"AGENT\" },\n]);\n\n/**\n * @generated from message livekit.Encryption\n */\nexport class Encryption extends Message<Encryption> {\n  constructor(data?: PartialMessage<Encryption>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.Encryption\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Encryption {\n    return new Encryption().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Encryption {\n    return new Encryption().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Encryption {\n    return new Encryption().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Encryption | PlainMessage<Encryption> | undefined, b: Encryption | PlainMessage<Encryption> | undefined): boolean {\n    return proto3.util.equals(Encryption, a, b);\n  }\n}\n\n/**\n * @generated from enum livekit.Encryption.Type\n */\nexport enum Encryption_Type {\n  /**\n   * @generated from enum value: NONE = 0;\n   */\n  NONE = 0,\n\n  /**\n   * @generated from enum value: GCM = 1;\n   */\n  GCM = 1,\n\n  /**\n   * @generated from enum value: CUSTOM = 2;\n   */\n  CUSTOM = 2,\n}\n// Retrieve enum metadata with: proto3.getEnumType(Encryption_Type)\nproto3.util.setEnumType(Encryption_Type, \"livekit.Encryption.Type\", [\n  { no: 0, name: \"NONE\" },\n  { no: 1, name: \"GCM\" },\n  { no: 2, name: \"CUSTOM\" },\n]);\n\n/**\n * @generated from message livekit.SimulcastCodecInfo\n */\nexport class SimulcastCodecInfo extends Message<SimulcastCodecInfo> {\n  /**\n   * @generated from field: string mime_type = 1;\n   */\n  mimeType = \"\";\n\n  /**\n   * @generated from field: string mid = 2;\n   */\n  mid = \"\";\n\n  /**\n   * @generated from field: string cid = 3;\n   */\n  cid = \"\";\n\n  /**\n   * @generated from field: repeated livekit.VideoLayer layers = 4;\n   */\n  layers: VideoLayer[] = [];\n\n  constructor(data?: PartialMessage<SimulcastCodecInfo>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SimulcastCodecInfo\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"mime_type\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"mid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"cid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"layers\", kind: \"message\", T: VideoLayer, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimulcastCodecInfo {\n    return new SimulcastCodecInfo().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimulcastCodecInfo {\n    return new SimulcastCodecInfo().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimulcastCodecInfo {\n    return new SimulcastCodecInfo().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SimulcastCodecInfo | PlainMessage<SimulcastCodecInfo> | undefined, b: SimulcastCodecInfo | PlainMessage<SimulcastCodecInfo> | undefined): boolean {\n    return proto3.util.equals(SimulcastCodecInfo, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.TrackInfo\n */\nexport class TrackInfo extends Message<TrackInfo> {\n  /**\n   * @generated from field: string sid = 1;\n   */\n  sid = \"\";\n\n  /**\n   * @generated from field: livekit.TrackType type = 2;\n   */\n  type = TrackType.AUDIO;\n\n  /**\n   * @generated from field: string name = 3;\n   */\n  name = \"\";\n\n  /**\n   * @generated from field: bool muted = 4;\n   */\n  muted = false;\n\n  /**\n   * original width of video (unset for audio)\n   * clients may receive a lower resolution version with simulcast\n   *\n   * @generated from field: uint32 width = 5;\n   */\n  width = 0;\n\n  /**\n   * original height of video (unset for audio)\n   *\n   * @generated from field: uint32 height = 6;\n   */\n  height = 0;\n\n  /**\n   * true if track is simulcasted\n   *\n   * @generated from field: bool simulcast = 7;\n   */\n  simulcast = false;\n\n  /**\n   * true if DTX (Discontinuous Transmission) is disabled for audio\n   *\n   * @generated from field: bool disable_dtx = 8;\n   */\n  disableDtx = false;\n\n  /**\n   * source of media\n   *\n   * @generated from field: livekit.TrackSource source = 9;\n   */\n  source = TrackSource.UNKNOWN;\n\n  /**\n   * @generated from field: repeated livekit.VideoLayer layers = 10;\n   */\n  layers: VideoLayer[] = [];\n\n  /**\n   * mime type of codec\n   *\n   * @generated from field: string mime_type = 11;\n   */\n  mimeType = \"\";\n\n  /**\n   * @generated from field: string mid = 12;\n   */\n  mid = \"\";\n\n  /**\n   * @generated from field: repeated livekit.SimulcastCodecInfo codecs = 13;\n   */\n  codecs: SimulcastCodecInfo[] = [];\n\n  /**\n   * @generated from field: bool stereo = 14;\n   */\n  stereo = false;\n\n  /**\n   * true if RED (Redundant Encoding) is disabled for audio\n   *\n   * @generated from field: bool disable_red = 15;\n   */\n  disableRed = false;\n\n  /**\n   * @generated from field: livekit.Encryption.Type encryption = 16;\n   */\n  encryption = Encryption_Type.NONE;\n\n  /**\n   * @generated from field: string stream = 17;\n   */\n  stream = \"\";\n\n  /**\n   * @generated from field: livekit.TimedVersion version = 18;\n   */\n  version?: TimedVersion;\n\n  /**\n   * @generated from field: repeated livekit.AudioTrackFeature audio_features = 19;\n   */\n  audioFeatures: AudioTrackFeature[] = [];\n\n  constructor(data?: PartialMessage<TrackInfo>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.TrackInfo\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"type\", kind: \"enum\", T: proto3.getEnumType(TrackType) },\n    { no: 3, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"muted\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 5, name: \"width\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 6, name: \"height\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 7, name: \"simulcast\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 8, name: \"disable_dtx\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 9, name: \"source\", kind: \"enum\", T: proto3.getEnumType(TrackSource) },\n    { no: 10, name: \"layers\", kind: \"message\", T: VideoLayer, repeated: true },\n    { no: 11, name: \"mime_type\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 12, name: \"mid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 13, name: \"codecs\", kind: \"message\", T: SimulcastCodecInfo, repeated: true },\n    { no: 14, name: \"stereo\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 15, name: \"disable_red\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 16, name: \"encryption\", kind: \"enum\", T: proto3.getEnumType(Encryption_Type) },\n    { no: 17, name: \"stream\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 18, name: \"version\", kind: \"message\", T: TimedVersion },\n    { no: 19, name: \"audio_features\", kind: \"enum\", T: proto3.getEnumType(AudioTrackFeature), repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackInfo {\n    return new TrackInfo().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackInfo {\n    return new TrackInfo().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackInfo {\n    return new TrackInfo().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: TrackInfo | PlainMessage<TrackInfo> | undefined, b: TrackInfo | PlainMessage<TrackInfo> | undefined): boolean {\n    return proto3.util.equals(TrackInfo, a, b);\n  }\n}\n\n/**\n * provide information about available spatial layers\n *\n * @generated from message livekit.VideoLayer\n */\nexport class VideoLayer extends Message<VideoLayer> {\n  /**\n   * for tracks with a single layer, this should be HIGH\n   *\n   * @generated from field: livekit.VideoQuality quality = 1;\n   */\n  quality = VideoQuality.LOW;\n\n  /**\n   * @generated from field: uint32 width = 2;\n   */\n  width = 0;\n\n  /**\n   * @generated from field: uint32 height = 3;\n   */\n  height = 0;\n\n  /**\n   * target bitrate in bit per second (bps), server will measure actual\n   *\n   * @generated from field: uint32 bitrate = 4;\n   */\n  bitrate = 0;\n\n  /**\n   * @generated from field: uint32 ssrc = 5;\n   */\n  ssrc = 0;\n\n  constructor(data?: PartialMessage<VideoLayer>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.VideoLayer\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"quality\", kind: \"enum\", T: proto3.getEnumType(VideoQuality) },\n    { no: 2, name: \"width\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"height\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"bitrate\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 5, name: \"ssrc\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoLayer {\n    return new VideoLayer().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoLayer {\n    return new VideoLayer().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoLayer {\n    return new VideoLayer().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: VideoLayer | PlainMessage<VideoLayer> | undefined, b: VideoLayer | PlainMessage<VideoLayer> | undefined): boolean {\n    return proto3.util.equals(VideoLayer, a, b);\n  }\n}\n\n/**\n * new DataPacket API\n *\n * @generated from message livekit.DataPacket\n */\nexport class DataPacket extends Message<DataPacket> {\n  /**\n   * @generated from field: livekit.DataPacket.Kind kind = 1 [deprecated = true];\n   * @deprecated\n   */\n  kind = DataPacket_Kind.RELIABLE;\n\n  /**\n   * participant identity of user that sent the message\n   *\n   * @generated from field: string participant_identity = 4;\n   */\n  participantIdentity = \"\";\n\n  /**\n   * identities of participants who will receive the message (sent to all by default)\n   *\n   * @generated from field: repeated string destination_identities = 5;\n   */\n  destinationIdentities: string[] = [];\n\n  /**\n   * @generated from oneof livekit.DataPacket.value\n   */\n  value: {\n    /**\n     * @generated from field: livekit.UserPacket user = 2;\n     */\n    value: UserPacket;\n    case: \"user\";\n  } | {\n    /**\n     * @generated from field: livekit.ActiveSpeakerUpdate speaker = 3 [deprecated = true];\n     * @deprecated\n     */\n    value: ActiveSpeakerUpdate;\n    case: \"speaker\";\n  } | {\n    /**\n     * @generated from field: livekit.SipDTMF sip_dtmf = 6;\n     */\n    value: SipDTMF;\n    case: \"sipDtmf\";\n  } | {\n    /**\n     * @generated from field: livekit.Transcription transcription = 7;\n     */\n    value: Transcription;\n    case: \"transcription\";\n  } | {\n    /**\n     * @generated from field: livekit.MetricsBatch metrics = 8;\n     */\n    value: MetricsBatch;\n    case: \"metrics\";\n  } | {\n    /**\n     * @generated from field: livekit.ChatMessage chat_message = 9;\n     */\n    value: ChatMessage;\n    case: \"chatMessage\";\n  } | {\n    /**\n     * @generated from field: livekit.RpcRequest rpc_request = 10;\n     */\n    value: RpcRequest;\n    case: \"rpcRequest\";\n  } | {\n    /**\n     * @generated from field: livekit.RpcAck rpc_ack = 11;\n     */\n    value: RpcAck;\n    case: \"rpcAck\";\n  } | {\n    /**\n     * @generated from field: livekit.RpcResponse rpc_response = 12;\n     */\n    value: RpcResponse;\n    case: \"rpcResponse\";\n  } | {\n    /**\n     * @generated from field: livekit.DataStream.Header stream_header = 13;\n     */\n    value: DataStream_Header;\n    case: \"streamHeader\";\n  } | {\n    /**\n     * @generated from field: livekit.DataStream.Chunk stream_chunk = 14;\n     */\n    value: DataStream_Chunk;\n    case: \"streamChunk\";\n  } | { case: undefined; value?: undefined } = { case: undefined };\n\n  constructor(data?: PartialMessage<DataPacket>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.DataPacket\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"kind\", kind: \"enum\", T: proto3.getEnumType(DataPacket_Kind) },\n    { no: 4, name: \"participant_identity\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"destination_identities\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 2, name: \"user\", kind: \"message\", T: UserPacket, oneof: \"value\" },\n    { no: 3, name: \"speaker\", kind: \"message\", T: ActiveSpeakerUpdate, oneof: \"value\" },\n    { no: 6, name: \"sip_dtmf\", kind: \"message\", T: SipDTMF, oneof: \"value\" },\n    { no: 7, name: \"transcription\", kind: \"message\", T: Transcription, oneof: \"value\" },\n    { no: 8, name: \"metrics\", kind: \"message\", T: MetricsBatch, oneof: \"value\" },\n    { no: 9, name: \"chat_message\", kind: \"message\", T: ChatMessage, oneof: \"value\" },\n    { no: 10, name: \"rpc_request\", kind: \"message\", T: RpcRequest, oneof: \"value\" },\n    { no: 11, name: \"rpc_ack\", kind: \"message\", T: RpcAck, oneof: \"value\" },\n    { no: 12, name: \"rpc_response\", kind: \"message\", T: RpcResponse, oneof: \"value\" },\n    { no: 13, name: \"stream_header\", kind: \"message\", T: DataStream_Header, oneof: \"value\" },\n    { no: 14, name: \"stream_chunk\", kind: \"message\", T: DataStream_Chunk, oneof: \"value\" },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataPacket {\n    return new DataPacket().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataPacket {\n    return new DataPacket().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataPacket {\n    return new DataPacket().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: DataPacket | PlainMessage<DataPacket> | undefined, b: DataPacket | PlainMessage<DataPacket> | undefined): boolean {\n    return proto3.util.equals(DataPacket, a, b);\n  }\n}\n\n/**\n * @generated from enum livekit.DataPacket.Kind\n */\nexport enum DataPacket_Kind {\n  /**\n   * @generated from enum value: RELIABLE = 0;\n   */\n  RELIABLE = 0,\n\n  /**\n   * @generated from enum value: LOSSY = 1;\n   */\n  LOSSY = 1,\n}\n// Retrieve enum metadata with: proto3.getEnumType(DataPacket_Kind)\nproto3.util.setEnumType(DataPacket_Kind, \"livekit.DataPacket.Kind\", [\n  { no: 0, name: \"RELIABLE\" },\n  { no: 1, name: \"LOSSY\" },\n]);\n\n/**\n * @generated from message livekit.ActiveSpeakerUpdate\n */\nexport class ActiveSpeakerUpdate extends Message<ActiveSpeakerUpdate> {\n  /**\n   * @generated from field: repeated livekit.SpeakerInfo speakers = 1;\n   */\n  speakers: SpeakerInfo[] = [];\n\n  constructor(data?: PartialMessage<ActiveSpeakerUpdate>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ActiveSpeakerUpdate\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"speakers\", kind: \"message\", T: SpeakerInfo, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActiveSpeakerUpdate {\n    return new ActiveSpeakerUpdate().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActiveSpeakerUpdate {\n    return new ActiveSpeakerUpdate().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActiveSpeakerUpdate {\n    return new ActiveSpeakerUpdate().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ActiveSpeakerUpdate | PlainMessage<ActiveSpeakerUpdate> | undefined, b: ActiveSpeakerUpdate | PlainMessage<ActiveSpeakerUpdate> | undefined): boolean {\n    return proto3.util.equals(ActiveSpeakerUpdate, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SpeakerInfo\n */\nexport class SpeakerInfo extends Message<SpeakerInfo> {\n  /**\n   * @generated from field: string sid = 1;\n   */\n  sid = \"\";\n\n  /**\n   * audio level, 0-1.0, 1 is loudest\n   *\n   * @generated from field: float level = 2;\n   */\n  level = 0;\n\n  /**\n   * true if speaker is currently active\n   *\n   * @generated from field: bool active = 3;\n   */\n  active = false;\n\n  constructor(data?: PartialMessage<SpeakerInfo>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SpeakerInfo\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"level\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n    { no: 3, name: \"active\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpeakerInfo {\n    return new SpeakerInfo().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpeakerInfo {\n    return new SpeakerInfo().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpeakerInfo {\n    return new SpeakerInfo().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SpeakerInfo | PlainMessage<SpeakerInfo> | undefined, b: SpeakerInfo | PlainMessage<SpeakerInfo> | undefined): boolean {\n    return proto3.util.equals(SpeakerInfo, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.UserPacket\n */\nexport class UserPacket extends Message<UserPacket> {\n  /**\n   * participant ID of user that sent the message\n   *\n   * @generated from field: string participant_sid = 1 [deprecated = true];\n   * @deprecated\n   */\n  participantSid = \"\";\n\n  /**\n   * @generated from field: string participant_identity = 5 [deprecated = true];\n   * @deprecated\n   */\n  participantIdentity = \"\";\n\n  /**\n   * user defined payload\n   *\n   * @generated from field: bytes payload = 2;\n   */\n  payload = new Uint8Array(0);\n\n  /**\n   * the ID of the participants who will receive the message (sent to all by default)\n   *\n   * @generated from field: repeated string destination_sids = 3 [deprecated = true];\n   * @deprecated\n   */\n  destinationSids: string[] = [];\n\n  /**\n   * identities of participants who will receive the message (sent to all by default)\n   *\n   * @generated from field: repeated string destination_identities = 6 [deprecated = true];\n   * @deprecated\n   */\n  destinationIdentities: string[] = [];\n\n  /**\n   * topic under which the message was published\n   *\n   * @generated from field: optional string topic = 4;\n   */\n  topic?: string;\n\n  /**\n   * Unique ID to indentify the message\n   *\n   * @generated from field: optional string id = 8;\n   */\n  id?: string;\n\n  /**\n   * start and end time allow relating the message to specific media time\n   *\n   * @generated from field: optional uint64 start_time = 9;\n   */\n  startTime?: bigint;\n\n  /**\n   * @generated from field: optional uint64 end_time = 10;\n   */\n  endTime?: bigint;\n\n  constructor(data?: PartialMessage<UserPacket>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.UserPacket\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"participant_sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"participant_identity\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"payload\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 3, name: \"destination_sids\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 6, name: \"destination_identities\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 4, name: \"topic\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 8, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 9, name: \"start_time\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */, opt: true },\n    { no: 10, name: \"end_time\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */, opt: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserPacket {\n    return new UserPacket().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserPacket {\n    return new UserPacket().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserPacket {\n    return new UserPacket().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UserPacket | PlainMessage<UserPacket> | undefined, b: UserPacket | PlainMessage<UserPacket> | undefined): boolean {\n    return proto3.util.equals(UserPacket, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SipDTMF\n */\nexport class SipDTMF extends Message<SipDTMF> {\n  /**\n   * @generated from field: uint32 code = 3;\n   */\n  code = 0;\n\n  /**\n   * @generated from field: string digit = 4;\n   */\n  digit = \"\";\n\n  constructor(data?: PartialMessage<SipDTMF>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SipDTMF\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 3, name: \"code\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"digit\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SipDTMF {\n    return new SipDTMF().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SipDTMF {\n    return new SipDTMF().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SipDTMF {\n    return new SipDTMF().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SipDTMF | PlainMessage<SipDTMF> | undefined, b: SipDTMF | PlainMessage<SipDTMF> | undefined): boolean {\n    return proto3.util.equals(SipDTMF, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.Transcription\n */\nexport class Transcription extends Message<Transcription> {\n  /**\n   * Participant that got its speech transcribed\n   *\n   * @generated from field: string transcribed_participant_identity = 2;\n   */\n  transcribedParticipantIdentity = \"\";\n\n  /**\n   * @generated from field: string track_id = 3;\n   */\n  trackId = \"\";\n\n  /**\n   * @generated from field: repeated livekit.TranscriptionSegment segments = 4;\n   */\n  segments: TranscriptionSegment[] = [];\n\n  constructor(data?: PartialMessage<Transcription>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.Transcription\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 2, name: \"transcribed_participant_identity\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"track_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"segments\", kind: \"message\", T: TranscriptionSegment, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transcription {\n    return new Transcription().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transcription {\n    return new Transcription().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transcription {\n    return new Transcription().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Transcription | PlainMessage<Transcription> | undefined, b: Transcription | PlainMessage<Transcription> | undefined): boolean {\n    return proto3.util.equals(Transcription, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.TranscriptionSegment\n */\nexport class TranscriptionSegment extends Message<TranscriptionSegment> {\n  /**\n   * @generated from field: string id = 1;\n   */\n  id = \"\";\n\n  /**\n   * @generated from field: string text = 2;\n   */\n  text = \"\";\n\n  /**\n   * @generated from field: uint64 start_time = 3;\n   */\n  startTime = protoInt64.zero;\n\n  /**\n   * @generated from field: uint64 end_time = 4;\n   */\n  endTime = protoInt64.zero;\n\n  /**\n   * @generated from field: bool final = 5;\n   */\n  final = false;\n\n  /**\n   * @generated from field: string language = 6;\n   */\n  language = \"\";\n\n  constructor(data?: PartialMessage<TranscriptionSegment>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.TranscriptionSegment\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"text\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"start_time\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 4, name: \"end_time\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 5, name: \"final\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 6, name: \"language\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TranscriptionSegment {\n    return new TranscriptionSegment().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TranscriptionSegment {\n    return new TranscriptionSegment().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TranscriptionSegment {\n    return new TranscriptionSegment().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: TranscriptionSegment | PlainMessage<TranscriptionSegment> | undefined, b: TranscriptionSegment | PlainMessage<TranscriptionSegment> | undefined): boolean {\n    return proto3.util.equals(TranscriptionSegment, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.ChatMessage\n */\nexport class ChatMessage extends Message<ChatMessage> {\n  /**\n   * uuid\n   *\n   * @generated from field: string id = 1;\n   */\n  id = \"\";\n\n  /**\n   * @generated from field: int64 timestamp = 2;\n   */\n  timestamp = protoInt64.zero;\n\n  /**\n   * populated only if the intent is to edit/update an existing message\n   *\n   * @generated from field: optional int64 edit_timestamp = 3;\n   */\n  editTimestamp?: bigint;\n\n  /**\n   * @generated from field: string message = 4;\n   */\n  message = \"\";\n\n  /**\n   * true to remove message\n   *\n   * @generated from field: bool deleted = 5;\n   */\n  deleted = false;\n\n  /**\n   * true if the chat message has been generated by an agent from a participant's audio transcription\n   *\n   * @generated from field: bool generated = 6;\n   */\n  generated = false;\n\n  constructor(data?: PartialMessage<ChatMessage>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ChatMessage\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"timestamp\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 3, name: \"edit_timestamp\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */, opt: true },\n    { no: 4, name: \"message\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"deleted\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 6, name: \"generated\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatMessage {\n    return new ChatMessage().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatMessage {\n    return new ChatMessage().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatMessage {\n    return new ChatMessage().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ChatMessage | PlainMessage<ChatMessage> | undefined, b: ChatMessage | PlainMessage<ChatMessage> | undefined): boolean {\n    return proto3.util.equals(ChatMessage, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.RpcRequest\n */\nexport class RpcRequest extends Message<RpcRequest> {\n  /**\n   * @generated from field: string id = 1;\n   */\n  id = \"\";\n\n  /**\n   * @generated from field: string method = 2;\n   */\n  method = \"\";\n\n  /**\n   * @generated from field: string payload = 3;\n   */\n  payload = \"\";\n\n  /**\n   * @generated from field: uint32 response_timeout_ms = 4;\n   */\n  responseTimeoutMs = 0;\n\n  /**\n   * @generated from field: uint32 version = 5;\n   */\n  version = 0;\n\n  constructor(data?: PartialMessage<RpcRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.RpcRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"method\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"payload\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"response_timeout_ms\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 5, name: \"version\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RpcRequest {\n    return new RpcRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RpcRequest {\n    return new RpcRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RpcRequest {\n    return new RpcRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: RpcRequest | PlainMessage<RpcRequest> | undefined, b: RpcRequest | PlainMessage<RpcRequest> | undefined): boolean {\n    return proto3.util.equals(RpcRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.RpcAck\n */\nexport class RpcAck extends Message<RpcAck> {\n  /**\n   * @generated from field: string request_id = 1;\n   */\n  requestId = \"\";\n\n  constructor(data?: PartialMessage<RpcAck>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.RpcAck\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"request_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RpcAck {\n    return new RpcAck().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RpcAck {\n    return new RpcAck().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RpcAck {\n    return new RpcAck().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: RpcAck | PlainMessage<RpcAck> | undefined, b: RpcAck | PlainMessage<RpcAck> | undefined): boolean {\n    return proto3.util.equals(RpcAck, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.RpcResponse\n */\nexport class RpcResponse extends Message<RpcResponse> {\n  /**\n   * @generated from field: string request_id = 1;\n   */\n  requestId = \"\";\n\n  /**\n   * @generated from oneof livekit.RpcResponse.value\n   */\n  value: {\n    /**\n     * @generated from field: string payload = 2;\n     */\n    value: string;\n    case: \"payload\";\n  } | {\n    /**\n     * @generated from field: livekit.RpcError error = 3;\n     */\n    value: RpcError;\n    case: \"error\";\n  } | { case: undefined; value?: undefined } = { case: undefined };\n\n  constructor(data?: PartialMessage<RpcResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.RpcResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"request_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"payload\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, oneof: \"value\" },\n    { no: 3, name: \"error\", kind: \"message\", T: RpcError, oneof: \"value\" },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RpcResponse {\n    return new RpcResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RpcResponse {\n    return new RpcResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RpcResponse {\n    return new RpcResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: RpcResponse | PlainMessage<RpcResponse> | undefined, b: RpcResponse | PlainMessage<RpcResponse> | undefined): boolean {\n    return proto3.util.equals(RpcResponse, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.RpcError\n */\nexport class RpcError extends Message<RpcError> {\n  /**\n   * @generated from field: uint32 code = 1;\n   */\n  code = 0;\n\n  /**\n   * @generated from field: string message = 2;\n   */\n  message = \"\";\n\n  /**\n   * @generated from field: string data = 3;\n   */\n  data = \"\";\n\n  constructor(data?: PartialMessage<RpcError>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.RpcError\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"code\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"message\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"data\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RpcError {\n    return new RpcError().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RpcError {\n    return new RpcError().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RpcError {\n    return new RpcError().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: RpcError | PlainMessage<RpcError> | undefined, b: RpcError | PlainMessage<RpcError> | undefined): boolean {\n    return proto3.util.equals(RpcError, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.ParticipantTracks\n */\nexport class ParticipantTracks extends Message<ParticipantTracks> {\n  /**\n   * participant ID of participant to whom the tracks belong\n   *\n   * @generated from field: string participant_sid = 1;\n   */\n  participantSid = \"\";\n\n  /**\n   * @generated from field: repeated string track_sids = 2;\n   */\n  trackSids: string[] = [];\n\n  constructor(data?: PartialMessage<ParticipantTracks>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ParticipantTracks\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"participant_sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"track_sids\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantTracks {\n    return new ParticipantTracks().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantTracks {\n    return new ParticipantTracks().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantTracks {\n    return new ParticipantTracks().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ParticipantTracks | PlainMessage<ParticipantTracks> | undefined, b: ParticipantTracks | PlainMessage<ParticipantTracks> | undefined): boolean {\n    return proto3.util.equals(ParticipantTracks, a, b);\n  }\n}\n\n/**\n * details about the server\n *\n * @generated from message livekit.ServerInfo\n */\nexport class ServerInfo extends Message<ServerInfo> {\n  /**\n   * @generated from field: livekit.ServerInfo.Edition edition = 1;\n   */\n  edition = ServerInfo_Edition.Standard;\n\n  /**\n   * @generated from field: string version = 2;\n   */\n  version = \"\";\n\n  /**\n   * @generated from field: int32 protocol = 3;\n   */\n  protocol = 0;\n\n  /**\n   * @generated from field: string region = 4;\n   */\n  region = \"\";\n\n  /**\n   * @generated from field: string node_id = 5;\n   */\n  nodeId = \"\";\n\n  /**\n   * additional debugging information. sent only if server is in development mode\n   *\n   * @generated from field: string debug_info = 6;\n   */\n  debugInfo = \"\";\n\n  /**\n   * @generated from field: int32 agent_protocol = 7;\n   */\n  agentProtocol = 0;\n\n  constructor(data?: PartialMessage<ServerInfo>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ServerInfo\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"edition\", kind: \"enum\", T: proto3.getEnumType(ServerInfo_Edition) },\n    { no: 2, name: \"version\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"protocol\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 4, name: \"region\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"node_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"debug_info\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 7, name: \"agent_protocol\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerInfo {\n    return new ServerInfo().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerInfo {\n    return new ServerInfo().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerInfo {\n    return new ServerInfo().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ServerInfo | PlainMessage<ServerInfo> | undefined, b: ServerInfo | PlainMessage<ServerInfo> | undefined): boolean {\n    return proto3.util.equals(ServerInfo, a, b);\n  }\n}\n\n/**\n * @generated from enum livekit.ServerInfo.Edition\n */\nexport enum ServerInfo_Edition {\n  /**\n   * @generated from enum value: Standard = 0;\n   */\n  Standard = 0,\n\n  /**\n   * @generated from enum value: Cloud = 1;\n   */\n  Cloud = 1,\n}\n// Retrieve enum metadata with: proto3.getEnumType(ServerInfo_Edition)\nproto3.util.setEnumType(ServerInfo_Edition, \"livekit.ServerInfo.Edition\", [\n  { no: 0, name: \"Standard\" },\n  { no: 1, name: \"Cloud\" },\n]);\n\n/**\n * details about the client\n *\n * @generated from message livekit.ClientInfo\n */\nexport class ClientInfo extends Message<ClientInfo> {\n  /**\n   * @generated from field: livekit.ClientInfo.SDK sdk = 1;\n   */\n  sdk = ClientInfo_SDK.UNKNOWN;\n\n  /**\n   * @generated from field: string version = 2;\n   */\n  version = \"\";\n\n  /**\n   * @generated from field: int32 protocol = 3;\n   */\n  protocol = 0;\n\n  /**\n   * @generated from field: string os = 4;\n   */\n  os = \"\";\n\n  /**\n   * @generated from field: string os_version = 5;\n   */\n  osVersion = \"\";\n\n  /**\n   * @generated from field: string device_model = 6;\n   */\n  deviceModel = \"\";\n\n  /**\n   * @generated from field: string browser = 7;\n   */\n  browser = \"\";\n\n  /**\n   * @generated from field: string browser_version = 8;\n   */\n  browserVersion = \"\";\n\n  /**\n   * @generated from field: string address = 9;\n   */\n  address = \"\";\n\n  /**\n   * wifi, wired, cellular, vpn, empty if not known\n   *\n   * @generated from field: string network = 10;\n   */\n  network = \"\";\n\n  /**\n   * comma separated list of additional LiveKit SDKs in use of this client, with versions\n   * e.g. \"components-js:1.2.3,track-processors-js:1.2.3\"\n   *\n   * @generated from field: string other_sdks = 11;\n   */\n  otherSdks = \"\";\n\n  constructor(data?: PartialMessage<ClientInfo>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ClientInfo\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"sdk\", kind: \"enum\", T: proto3.getEnumType(ClientInfo_SDK) },\n    { no: 2, name: \"version\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"protocol\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 4, name: \"os\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"os_version\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"device_model\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 7, name: \"browser\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 8, name: \"browser_version\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 9, name: \"address\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 10, name: \"network\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 11, name: \"other_sdks\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientInfo {\n    return new ClientInfo().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientInfo {\n    return new ClientInfo().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientInfo {\n    return new ClientInfo().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ClientInfo | PlainMessage<ClientInfo> | undefined, b: ClientInfo | PlainMessage<ClientInfo> | undefined): boolean {\n    return proto3.util.equals(ClientInfo, a, b);\n  }\n}\n\n/**\n * @generated from enum livekit.ClientInfo.SDK\n */\nexport enum ClientInfo_SDK {\n  /**\n   * @generated from enum value: UNKNOWN = 0;\n   */\n  UNKNOWN = 0,\n\n  /**\n   * @generated from enum value: JS = 1;\n   */\n  JS = 1,\n\n  /**\n   * @generated from enum value: SWIFT = 2;\n   */\n  SWIFT = 2,\n\n  /**\n   * @generated from enum value: ANDROID = 3;\n   */\n  ANDROID = 3,\n\n  /**\n   * @generated from enum value: FLUTTER = 4;\n   */\n  FLUTTER = 4,\n\n  /**\n   * @generated from enum value: GO = 5;\n   */\n  GO = 5,\n\n  /**\n   * @generated from enum value: UNITY = 6;\n   */\n  UNITY = 6,\n\n  /**\n   * @generated from enum value: REACT_NATIVE = 7;\n   */\n  REACT_NATIVE = 7,\n\n  /**\n   * @generated from enum value: RUST = 8;\n   */\n  RUST = 8,\n\n  /**\n   * @generated from enum value: PYTHON = 9;\n   */\n  PYTHON = 9,\n\n  /**\n   * @generated from enum value: CPP = 10;\n   */\n  CPP = 10,\n\n  /**\n   * @generated from enum value: UNITY_WEB = 11;\n   */\n  UNITY_WEB = 11,\n\n  /**\n   * @generated from enum value: NODE = 12;\n   */\n  NODE = 12,\n}\n// Retrieve enum metadata with: proto3.getEnumType(ClientInfo_SDK)\nproto3.util.setEnumType(ClientInfo_SDK, \"livekit.ClientInfo.SDK\", [\n  { no: 0, name: \"UNKNOWN\" },\n  { no: 1, name: \"JS\" },\n  { no: 2, name: \"SWIFT\" },\n  { no: 3, name: \"ANDROID\" },\n  { no: 4, name: \"FLUTTER\" },\n  { no: 5, name: \"GO\" },\n  { no: 6, name: \"UNITY\" },\n  { no: 7, name: \"REACT_NATIVE\" },\n  { no: 8, name: \"RUST\" },\n  { no: 9, name: \"PYTHON\" },\n  { no: 10, name: \"CPP\" },\n  { no: 11, name: \"UNITY_WEB\" },\n  { no: 12, name: \"NODE\" },\n]);\n\n/**\n * server provided client configuration\n *\n * @generated from message livekit.ClientConfiguration\n */\nexport class ClientConfiguration extends Message<ClientConfiguration> {\n  /**\n   * @generated from field: livekit.VideoConfiguration video = 1;\n   */\n  video?: VideoConfiguration;\n\n  /**\n   * @generated from field: livekit.VideoConfiguration screen = 2;\n   */\n  screen?: VideoConfiguration;\n\n  /**\n   * @generated from field: livekit.ClientConfigSetting resume_connection = 3;\n   */\n  resumeConnection = ClientConfigSetting.UNSET;\n\n  /**\n   * @generated from field: livekit.DisabledCodecs disabled_codecs = 4;\n   */\n  disabledCodecs?: DisabledCodecs;\n\n  /**\n   * @generated from field: livekit.ClientConfigSetting force_relay = 5;\n   */\n  forceRelay = ClientConfigSetting.UNSET;\n\n  constructor(data?: PartialMessage<ClientConfiguration>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ClientConfiguration\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"video\", kind: \"message\", T: VideoConfiguration },\n    { no: 2, name: \"screen\", kind: \"message\", T: VideoConfiguration },\n    { no: 3, name: \"resume_connection\", kind: \"enum\", T: proto3.getEnumType(ClientConfigSetting) },\n    { no: 4, name: \"disabled_codecs\", kind: \"message\", T: DisabledCodecs },\n    { no: 5, name: \"force_relay\", kind: \"enum\", T: proto3.getEnumType(ClientConfigSetting) },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientConfiguration {\n    return new ClientConfiguration().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientConfiguration {\n    return new ClientConfiguration().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientConfiguration {\n    return new ClientConfiguration().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ClientConfiguration | PlainMessage<ClientConfiguration> | undefined, b: ClientConfiguration | PlainMessage<ClientConfiguration> | undefined): boolean {\n    return proto3.util.equals(ClientConfiguration, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.VideoConfiguration\n */\nexport class VideoConfiguration extends Message<VideoConfiguration> {\n  /**\n   * @generated from field: livekit.ClientConfigSetting hardware_encoder = 1;\n   */\n  hardwareEncoder = ClientConfigSetting.UNSET;\n\n  constructor(data?: PartialMessage<VideoConfiguration>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.VideoConfiguration\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"hardware_encoder\", kind: \"enum\", T: proto3.getEnumType(ClientConfigSetting) },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VideoConfiguration {\n    return new VideoConfiguration().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VideoConfiguration {\n    return new VideoConfiguration().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VideoConfiguration {\n    return new VideoConfiguration().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: VideoConfiguration | PlainMessage<VideoConfiguration> | undefined, b: VideoConfiguration | PlainMessage<VideoConfiguration> | undefined): boolean {\n    return proto3.util.equals(VideoConfiguration, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.DisabledCodecs\n */\nexport class DisabledCodecs extends Message<DisabledCodecs> {\n  /**\n   * disabled for both publish and subscribe\n   *\n   * @generated from field: repeated livekit.Codec codecs = 1;\n   */\n  codecs: Codec[] = [];\n\n  /**\n   * only disable for publish\n   *\n   * @generated from field: repeated livekit.Codec publish = 2;\n   */\n  publish: Codec[] = [];\n\n  constructor(data?: PartialMessage<DisabledCodecs>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.DisabledCodecs\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"codecs\", kind: \"message\", T: Codec, repeated: true },\n    { no: 2, name: \"publish\", kind: \"message\", T: Codec, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DisabledCodecs {\n    return new DisabledCodecs().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DisabledCodecs {\n    return new DisabledCodecs().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DisabledCodecs {\n    return new DisabledCodecs().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: DisabledCodecs | PlainMessage<DisabledCodecs> | undefined, b: DisabledCodecs | PlainMessage<DisabledCodecs> | undefined): boolean {\n    return proto3.util.equals(DisabledCodecs, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.RTPDrift\n */\nexport class RTPDrift extends Message<RTPDrift> {\n  /**\n   * @generated from field: google.protobuf.Timestamp start_time = 1;\n   */\n  startTime?: Timestamp;\n\n  /**\n   * @generated from field: google.protobuf.Timestamp end_time = 2;\n   */\n  endTime?: Timestamp;\n\n  /**\n   * @generated from field: double duration = 3;\n   */\n  duration = 0;\n\n  /**\n   * @generated from field: uint64 start_timestamp = 4;\n   */\n  startTimestamp = protoInt64.zero;\n\n  /**\n   * @generated from field: uint64 end_timestamp = 5;\n   */\n  endTimestamp = protoInt64.zero;\n\n  /**\n   * @generated from field: uint64 rtp_clock_ticks = 6;\n   */\n  rtpClockTicks = protoInt64.zero;\n\n  /**\n   * @generated from field: int64 drift_samples = 7;\n   */\n  driftSamples = protoInt64.zero;\n\n  /**\n   * @generated from field: double drift_ms = 8;\n   */\n  driftMs = 0;\n\n  /**\n   * @generated from field: double clock_rate = 9;\n   */\n  clockRate = 0;\n\n  constructor(data?: PartialMessage<RTPDrift>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.RTPDrift\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"start_time\", kind: \"message\", T: Timestamp },\n    { no: 2, name: \"end_time\", kind: \"message\", T: Timestamp },\n    { no: 3, name: \"duration\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */ },\n    { no: 4, name: \"start_timestamp\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 5, name: \"end_timestamp\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 6, name: \"rtp_clock_ticks\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 7, name: \"drift_samples\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 8, name: \"drift_ms\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */ },\n    { no: 9, name: \"clock_rate\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RTPDrift {\n    return new RTPDrift().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RTPDrift {\n    return new RTPDrift().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RTPDrift {\n    return new RTPDrift().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: RTPDrift | PlainMessage<RTPDrift> | undefined, b: RTPDrift | PlainMessage<RTPDrift> | undefined): boolean {\n    return proto3.util.equals(RTPDrift, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.RTPStats\n */\nexport class RTPStats extends Message<RTPStats> {\n  /**\n   * @generated from field: google.protobuf.Timestamp start_time = 1;\n   */\n  startTime?: Timestamp;\n\n  /**\n   * @generated from field: google.protobuf.Timestamp end_time = 2;\n   */\n  endTime?: Timestamp;\n\n  /**\n   * @generated from field: double duration = 3;\n   */\n  duration = 0;\n\n  /**\n   * @generated from field: uint32 packets = 4;\n   */\n  packets = 0;\n\n  /**\n   * @generated from field: double packet_rate = 5;\n   */\n  packetRate = 0;\n\n  /**\n   * @generated from field: uint64 bytes = 6;\n   */\n  bytes = protoInt64.zero;\n\n  /**\n   * @generated from field: uint64 header_bytes = 39;\n   */\n  headerBytes = protoInt64.zero;\n\n  /**\n   * @generated from field: double bitrate = 7;\n   */\n  bitrate = 0;\n\n  /**\n   * @generated from field: uint32 packets_lost = 8;\n   */\n  packetsLost = 0;\n\n  /**\n   * @generated from field: double packet_loss_rate = 9;\n   */\n  packetLossRate = 0;\n\n  /**\n   * @generated from field: float packet_loss_percentage = 10;\n   */\n  packetLossPercentage = 0;\n\n  /**\n   * @generated from field: uint32 packets_duplicate = 11;\n   */\n  packetsDuplicate = 0;\n\n  /**\n   * @generated from field: double packet_duplicate_rate = 12;\n   */\n  packetDuplicateRate = 0;\n\n  /**\n   * @generated from field: uint64 bytes_duplicate = 13;\n   */\n  bytesDuplicate = protoInt64.zero;\n\n  /**\n   * @generated from field: uint64 header_bytes_duplicate = 40;\n   */\n  headerBytesDuplicate = protoInt64.zero;\n\n  /**\n   * @generated from field: double bitrate_duplicate = 14;\n   */\n  bitrateDuplicate = 0;\n\n  /**\n   * @generated from field: uint32 packets_padding = 15;\n   */\n  packetsPadding = 0;\n\n  /**\n   * @generated from field: double packet_padding_rate = 16;\n   */\n  packetPaddingRate = 0;\n\n  /**\n   * @generated from field: uint64 bytes_padding = 17;\n   */\n  bytesPadding = protoInt64.zero;\n\n  /**\n   * @generated from field: uint64 header_bytes_padding = 41;\n   */\n  headerBytesPadding = protoInt64.zero;\n\n  /**\n   * @generated from field: double bitrate_padding = 18;\n   */\n  bitratePadding = 0;\n\n  /**\n   * @generated from field: uint32 packets_out_of_order = 19;\n   */\n  packetsOutOfOrder = 0;\n\n  /**\n   * @generated from field: uint32 frames = 20;\n   */\n  frames = 0;\n\n  /**\n   * @generated from field: double frame_rate = 21;\n   */\n  frameRate = 0;\n\n  /**\n   * @generated from field: double jitter_current = 22;\n   */\n  jitterCurrent = 0;\n\n  /**\n   * @generated from field: double jitter_max = 23;\n   */\n  jitterMax = 0;\n\n  /**\n   * @generated from field: map<int32, uint32> gap_histogram = 24;\n   */\n  gapHistogram: { [key: number]: number } = {};\n\n  /**\n   * @generated from field: uint32 nacks = 25;\n   */\n  nacks = 0;\n\n  /**\n   * @generated from field: uint32 nack_acks = 37;\n   */\n  nackAcks = 0;\n\n  /**\n   * @generated from field: uint32 nack_misses = 26;\n   */\n  nackMisses = 0;\n\n  /**\n   * @generated from field: uint32 nack_repeated = 38;\n   */\n  nackRepeated = 0;\n\n  /**\n   * @generated from field: uint32 plis = 27;\n   */\n  plis = 0;\n\n  /**\n   * @generated from field: google.protobuf.Timestamp last_pli = 28;\n   */\n  lastPli?: Timestamp;\n\n  /**\n   * @generated from field: uint32 firs = 29;\n   */\n  firs = 0;\n\n  /**\n   * @generated from field: google.protobuf.Timestamp last_fir = 30;\n   */\n  lastFir?: Timestamp;\n\n  /**\n   * @generated from field: uint32 rtt_current = 31;\n   */\n  rttCurrent = 0;\n\n  /**\n   * @generated from field: uint32 rtt_max = 32;\n   */\n  rttMax = 0;\n\n  /**\n   * @generated from field: uint32 key_frames = 33;\n   */\n  keyFrames = 0;\n\n  /**\n   * @generated from field: google.protobuf.Timestamp last_key_frame = 34;\n   */\n  lastKeyFrame?: Timestamp;\n\n  /**\n   * @generated from field: uint32 layer_lock_plis = 35;\n   */\n  layerLockPlis = 0;\n\n  /**\n   * @generated from field: google.protobuf.Timestamp last_layer_lock_pli = 36;\n   */\n  lastLayerLockPli?: Timestamp;\n\n  /**\n   * @generated from field: livekit.RTPDrift packet_drift = 44;\n   */\n  packetDrift?: RTPDrift;\n\n  /**\n   * @generated from field: livekit.RTPDrift ntp_report_drift = 45;\n   */\n  ntpReportDrift?: RTPDrift;\n\n  /**\n   * @generated from field: livekit.RTPDrift rebased_report_drift = 46;\n   */\n  rebasedReportDrift?: RTPDrift;\n\n  /**\n   * NEXT_ID: 48\n   *\n   * @generated from field: livekit.RTPDrift received_report_drift = 47;\n   */\n  receivedReportDrift?: RTPDrift;\n\n  constructor(data?: PartialMessage<RTPStats>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.RTPStats\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"start_time\", kind: \"message\", T: Timestamp },\n    { no: 2, name: \"end_time\", kind: \"message\", T: Timestamp },\n    { no: 3, name: \"duration\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */ },\n    { no: 4, name: \"packets\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 5, name: \"packet_rate\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */ },\n    { no: 6, name: \"bytes\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 39, name: \"header_bytes\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 7, name: \"bitrate\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */ },\n    { no: 8, name: \"packets_lost\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 9, name: \"packet_loss_rate\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */ },\n    { no: 10, name: \"packet_loss_percentage\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n    { no: 11, name: \"packets_duplicate\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 12, name: \"packet_duplicate_rate\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */ },\n    { no: 13, name: \"bytes_duplicate\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 40, name: \"header_bytes_duplicate\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 14, name: \"bitrate_duplicate\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */ },\n    { no: 15, name: \"packets_padding\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 16, name: \"packet_padding_rate\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */ },\n    { no: 17, name: \"bytes_padding\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 41, name: \"header_bytes_padding\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 18, name: \"bitrate_padding\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */ },\n    { no: 19, name: \"packets_out_of_order\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 20, name: \"frames\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 21, name: \"frame_rate\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */ },\n    { no: 22, name: \"jitter_current\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */ },\n    { no: 23, name: \"jitter_max\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */ },\n    { no: 24, name: \"gap_histogram\", kind: \"map\", K: 5 /* ScalarType.INT32 */, V: {kind: \"scalar\", T: 13 /* ScalarType.UINT32 */} },\n    { no: 25, name: \"nacks\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 37, name: \"nack_acks\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 26, name: \"nack_misses\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 38, name: \"nack_repeated\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 27, name: \"plis\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 28, name: \"last_pli\", kind: \"message\", T: Timestamp },\n    { no: 29, name: \"firs\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 30, name: \"last_fir\", kind: \"message\", T: Timestamp },\n    { no: 31, name: \"rtt_current\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 32, name: \"rtt_max\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 33, name: \"key_frames\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 34, name: \"last_key_frame\", kind: \"message\", T: Timestamp },\n    { no: 35, name: \"layer_lock_plis\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 36, name: \"last_layer_lock_pli\", kind: \"message\", T: Timestamp },\n    { no: 44, name: \"packet_drift\", kind: \"message\", T: RTPDrift },\n    { no: 45, name: \"ntp_report_drift\", kind: \"message\", T: RTPDrift },\n    { no: 46, name: \"rebased_report_drift\", kind: \"message\", T: RTPDrift },\n    { no: 47, name: \"received_report_drift\", kind: \"message\", T: RTPDrift },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RTPStats {\n    return new RTPStats().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RTPStats {\n    return new RTPStats().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RTPStats {\n    return new RTPStats().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: RTPStats | PlainMessage<RTPStats> | undefined, b: RTPStats | PlainMessage<RTPStats> | undefined): boolean {\n    return proto3.util.equals(RTPStats, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.RTCPSenderReportState\n */\nexport class RTCPSenderReportState extends Message<RTCPSenderReportState> {\n  /**\n   * @generated from field: uint32 rtp_timestamp = 1;\n   */\n  rtpTimestamp = 0;\n\n  /**\n   * @generated from field: uint64 rtp_timestamp_ext = 2;\n   */\n  rtpTimestampExt = protoInt64.zero;\n\n  /**\n   * @generated from field: uint64 ntp_timestamp = 3;\n   */\n  ntpTimestamp = protoInt64.zero;\n\n  /**\n   * time at which this happened\n   *\n   * @generated from field: int64 at = 4;\n   */\n  at = protoInt64.zero;\n\n  /**\n   * @generated from field: int64 at_adjusted = 5;\n   */\n  atAdjusted = protoInt64.zero;\n\n  /**\n   * @generated from field: uint32 packets = 6;\n   */\n  packets = 0;\n\n  /**\n   * @generated from field: uint64 octets = 7;\n   */\n  octets = protoInt64.zero;\n\n  constructor(data?: PartialMessage<RTCPSenderReportState>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.RTCPSenderReportState\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"rtp_timestamp\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"rtp_timestamp_ext\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 3, name: \"ntp_timestamp\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 4, name: \"at\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 5, name: \"at_adjusted\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 6, name: \"packets\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 7, name: \"octets\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RTCPSenderReportState {\n    return new RTCPSenderReportState().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RTCPSenderReportState {\n    return new RTCPSenderReportState().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RTCPSenderReportState {\n    return new RTCPSenderReportState().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: RTCPSenderReportState | PlainMessage<RTCPSenderReportState> | undefined, b: RTCPSenderReportState | PlainMessage<RTCPSenderReportState> | undefined): boolean {\n    return proto3.util.equals(RTCPSenderReportState, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.RTPForwarderState\n */\nexport class RTPForwarderState extends Message<RTPForwarderState> {\n  /**\n   * @generated from field: bool started = 1;\n   */\n  started = false;\n\n  /**\n   * @generated from field: int32 reference_layer_spatial = 2;\n   */\n  referenceLayerSpatial = 0;\n\n  /**\n   * @generated from field: int64 pre_start_time = 3;\n   */\n  preStartTime = protoInt64.zero;\n\n  /**\n   * @generated from field: uint64 ext_first_timestamp = 4;\n   */\n  extFirstTimestamp = protoInt64.zero;\n\n  /**\n   * @generated from field: uint64 dummy_start_timestamp_offset = 5;\n   */\n  dummyStartTimestampOffset = protoInt64.zero;\n\n  /**\n   * @generated from field: livekit.RTPMungerState rtp_munger = 6;\n   */\n  rtpMunger?: RTPMungerState;\n\n  /**\n   * @generated from oneof livekit.RTPForwarderState.codec_munger\n   */\n  codecMunger: {\n    /**\n     * @generated from field: livekit.VP8MungerState vp8_munger = 7;\n     */\n    value: VP8MungerState;\n    case: \"vp8Munger\";\n  } | { case: undefined; value?: undefined } = { case: undefined };\n\n  /**\n   * @generated from field: repeated livekit.RTCPSenderReportState sender_report_state = 8;\n   */\n  senderReportState: RTCPSenderReportState[] = [];\n\n  constructor(data?: PartialMessage<RTPForwarderState>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.RTPForwarderState\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"started\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"reference_layer_spatial\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 3, name: \"pre_start_time\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 4, name: \"ext_first_timestamp\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 5, name: \"dummy_start_timestamp_offset\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 6, name: \"rtp_munger\", kind: \"message\", T: RTPMungerState },\n    { no: 7, name: \"vp8_munger\", kind: \"message\", T: VP8MungerState, oneof: \"codec_munger\" },\n    { no: 8, name: \"sender_report_state\", kind: \"message\", T: RTCPSenderReportState, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RTPForwarderState {\n    return new RTPForwarderState().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RTPForwarderState {\n    return new RTPForwarderState().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RTPForwarderState {\n    return new RTPForwarderState().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: RTPForwarderState | PlainMessage<RTPForwarderState> | undefined, b: RTPForwarderState | PlainMessage<RTPForwarderState> | undefined): boolean {\n    return proto3.util.equals(RTPForwarderState, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.RTPMungerState\n */\nexport class RTPMungerState extends Message<RTPMungerState> {\n  /**\n   * @generated from field: uint64 ext_last_sequence_number = 1;\n   */\n  extLastSequenceNumber = protoInt64.zero;\n\n  /**\n   * @generated from field: uint64 ext_second_last_sequence_number = 2;\n   */\n  extSecondLastSequenceNumber = protoInt64.zero;\n\n  /**\n   * @generated from field: uint64 ext_last_timestamp = 3;\n   */\n  extLastTimestamp = protoInt64.zero;\n\n  /**\n   * @generated from field: uint64 ext_second_last_timestamp = 4;\n   */\n  extSecondLastTimestamp = protoInt64.zero;\n\n  /**\n   * @generated from field: bool last_marker = 5;\n   */\n  lastMarker = false;\n\n  /**\n   * @generated from field: bool second_last_marker = 6;\n   */\n  secondLastMarker = false;\n\n  constructor(data?: PartialMessage<RTPMungerState>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.RTPMungerState\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"ext_last_sequence_number\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 2, name: \"ext_second_last_sequence_number\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 3, name: \"ext_last_timestamp\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 4, name: \"ext_second_last_timestamp\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 5, name: \"last_marker\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 6, name: \"second_last_marker\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RTPMungerState {\n    return new RTPMungerState().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RTPMungerState {\n    return new RTPMungerState().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RTPMungerState {\n    return new RTPMungerState().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: RTPMungerState | PlainMessage<RTPMungerState> | undefined, b: RTPMungerState | PlainMessage<RTPMungerState> | undefined): boolean {\n    return proto3.util.equals(RTPMungerState, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.VP8MungerState\n */\nexport class VP8MungerState extends Message<VP8MungerState> {\n  /**\n   * @generated from field: int32 ext_last_picture_id = 1;\n   */\n  extLastPictureId = 0;\n\n  /**\n   * @generated from field: bool picture_id_used = 2;\n   */\n  pictureIdUsed = false;\n\n  /**\n   * @generated from field: uint32 last_tl0_pic_idx = 3;\n   */\n  lastTl0PicIdx = 0;\n\n  /**\n   * @generated from field: bool tl0_pic_idx_used = 4;\n   */\n  tl0PicIdxUsed = false;\n\n  /**\n   * @generated from field: bool tid_used = 5;\n   */\n  tidUsed = false;\n\n  /**\n   * @generated from field: uint32 last_key_idx = 6;\n   */\n  lastKeyIdx = 0;\n\n  /**\n   * @generated from field: bool key_idx_used = 7;\n   */\n  keyIdxUsed = false;\n\n  constructor(data?: PartialMessage<VP8MungerState>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.VP8MungerState\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"ext_last_picture_id\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"picture_id_used\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 3, name: \"last_tl0_pic_idx\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"tl0_pic_idx_used\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 5, name: \"tid_used\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 6, name: \"last_key_idx\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 7, name: \"key_idx_used\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VP8MungerState {\n    return new VP8MungerState().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VP8MungerState {\n    return new VP8MungerState().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VP8MungerState {\n    return new VP8MungerState().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: VP8MungerState | PlainMessage<VP8MungerState> | undefined, b: VP8MungerState | PlainMessage<VP8MungerState> | undefined): boolean {\n    return proto3.util.equals(VP8MungerState, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.TimedVersion\n */\nexport class TimedVersion extends Message<TimedVersion> {\n  /**\n   * @generated from field: int64 unix_micro = 1;\n   */\n  unixMicro = protoInt64.zero;\n\n  /**\n   * @generated from field: int32 ticks = 2;\n   */\n  ticks = 0;\n\n  constructor(data?: PartialMessage<TimedVersion>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.TimedVersion\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"unix_micro\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 2, name: \"ticks\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimedVersion {\n    return new TimedVersion().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimedVersion {\n    return new TimedVersion().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimedVersion {\n    return new TimedVersion().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: TimedVersion | PlainMessage<TimedVersion> | undefined, b: TimedVersion | PlainMessage<TimedVersion> | undefined): boolean {\n    return proto3.util.equals(TimedVersion, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.DataStream\n */\nexport class DataStream extends Message<DataStream> {\n  constructor(data?: PartialMessage<DataStream>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.DataStream\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataStream {\n    return new DataStream().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataStream {\n    return new DataStream().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataStream {\n    return new DataStream().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: DataStream | PlainMessage<DataStream> | undefined, b: DataStream | PlainMessage<DataStream> | undefined): boolean {\n    return proto3.util.equals(DataStream, a, b);\n  }\n}\n\n/**\n * enum for operation types (specific to TextHeader)\n *\n * @generated from enum livekit.DataStream.OperationType\n */\nexport enum DataStream_OperationType {\n  /**\n   * @generated from enum value: CREATE = 0;\n   */\n  CREATE = 0,\n\n  /**\n   * @generated from enum value: UPDATE = 1;\n   */\n  UPDATE = 1,\n\n  /**\n   * @generated from enum value: DELETE = 2;\n   */\n  DELETE = 2,\n\n  /**\n   * @generated from enum value: REACTION = 3;\n   */\n  REACTION = 3,\n}\n// Retrieve enum metadata with: proto3.getEnumType(DataStream_OperationType)\nproto3.util.setEnumType(DataStream_OperationType, \"livekit.DataStream.OperationType\", [\n  { no: 0, name: \"CREATE\" },\n  { no: 1, name: \"UPDATE\" },\n  { no: 2, name: \"DELETE\" },\n  { no: 3, name: \"REACTION\" },\n]);\n\n/**\n * header properties specific to text streams\n *\n * @generated from message livekit.DataStream.TextHeader\n */\nexport class DataStream_TextHeader extends Message<DataStream_TextHeader> {\n  /**\n   * @generated from field: livekit.DataStream.OperationType operation_type = 1;\n   */\n  operationType = DataStream_OperationType.CREATE;\n\n  /**\n   * Optional: Version for updates/edits\n   *\n   * @generated from field: int32 version = 2;\n   */\n  version = 0;\n\n  /**\n   * Optional: Reply to specific message\n   *\n   * @generated from field: string reply_to_stream_id = 3;\n   */\n  replyToStreamId = \"\";\n\n  /**\n   * file attachments for text streams\n   *\n   * @generated from field: repeated string attached_stream_ids = 4;\n   */\n  attachedStreamIds: string[] = [];\n\n  /**\n   * true if the text has been generated by an agent from a participant's audio transcription\n   *\n   * @generated from field: bool generated = 5;\n   */\n  generated = false;\n\n  constructor(data?: PartialMessage<DataStream_TextHeader>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.DataStream.TextHeader\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"operation_type\", kind: \"enum\", T: proto3.getEnumType(DataStream_OperationType) },\n    { no: 2, name: \"version\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 3, name: \"reply_to_stream_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"attached_stream_ids\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 5, name: \"generated\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataStream_TextHeader {\n    return new DataStream_TextHeader().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataStream_TextHeader {\n    return new DataStream_TextHeader().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataStream_TextHeader {\n    return new DataStream_TextHeader().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: DataStream_TextHeader | PlainMessage<DataStream_TextHeader> | undefined, b: DataStream_TextHeader | PlainMessage<DataStream_TextHeader> | undefined): boolean {\n    return proto3.util.equals(DataStream_TextHeader, a, b);\n  }\n}\n\n/**\n * header properties specific to file or image streams\n *\n * @generated from message livekit.DataStream.FileHeader\n */\nexport class DataStream_FileHeader extends Message<DataStream_FileHeader> {\n  /**\n   * name of the file\n   *\n   * @generated from field: string file_name = 1;\n   */\n  fileName = \"\";\n\n  constructor(data?: PartialMessage<DataStream_FileHeader>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.DataStream.FileHeader\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"file_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataStream_FileHeader {\n    return new DataStream_FileHeader().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataStream_FileHeader {\n    return new DataStream_FileHeader().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataStream_FileHeader {\n    return new DataStream_FileHeader().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: DataStream_FileHeader | PlainMessage<DataStream_FileHeader> | undefined, b: DataStream_FileHeader | PlainMessage<DataStream_FileHeader> | undefined): boolean {\n    return proto3.util.equals(DataStream_FileHeader, a, b);\n  }\n}\n\n/**\n * main DataStream.Header that contains a oneof for specific headers\n *\n * @generated from message livekit.DataStream.Header\n */\nexport class DataStream_Header extends Message<DataStream_Header> {\n  /**\n   * unique identifier for this data stream\n   *\n   * @generated from field: string stream_id = 1;\n   */\n  streamId = \"\";\n\n  /**\n   * using int64 for Unix timestamp\n   *\n   * @generated from field: int64 timestamp = 2;\n   */\n  timestamp = protoInt64.zero;\n\n  /**\n   * @generated from field: string topic = 3;\n   */\n  topic = \"\";\n\n  /**\n   * @generated from field: string mime_type = 4;\n   */\n  mimeType = \"\";\n\n  /**\n   * only populated for finite streams, if it's a stream of unknown size this stays empty\n   *\n   * @generated from field: optional uint64 total_length = 5;\n   */\n  totalLength?: bigint;\n\n  /**\n   * only populated for finite streams, if it's a stream of unknown size this stays empty\n   *\n   * @generated from field: optional uint64 total_chunks = 6;\n   */\n  totalChunks?: bigint;\n\n  /**\n   * defaults to NONE\n   *\n   * @generated from field: livekit.Encryption.Type encryption_type = 7;\n   */\n  encryptionType = Encryption_Type.NONE;\n\n  /**\n   * user defined extensions map that can carry additional info\n   *\n   * @generated from field: map<string, string> extensions = 8;\n   */\n  extensions: { [key: string]: string } = {};\n\n  /**\n   * oneof to choose between specific header types\n   *\n   * @generated from oneof livekit.DataStream.Header.content_header\n   */\n  contentHeader: {\n    /**\n     * @generated from field: livekit.DataStream.TextHeader text_header = 9;\n     */\n    value: DataStream_TextHeader;\n    case: \"textHeader\";\n  } | {\n    /**\n     * @generated from field: livekit.DataStream.FileHeader file_header = 10;\n     */\n    value: DataStream_FileHeader;\n    case: \"fileHeader\";\n  } | { case: undefined; value?: undefined } = { case: undefined };\n\n  constructor(data?: PartialMessage<DataStream_Header>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.DataStream.Header\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"stream_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"timestamp\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 3, name: \"topic\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"mime_type\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"total_length\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */, opt: true },\n    { no: 6, name: \"total_chunks\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */, opt: true },\n    { no: 7, name: \"encryption_type\", kind: \"enum\", T: proto3.getEnumType(Encryption_Type) },\n    { no: 8, name: \"extensions\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"scalar\", T: 9 /* ScalarType.STRING */} },\n    { no: 9, name: \"text_header\", kind: \"message\", T: DataStream_TextHeader, oneof: \"content_header\" },\n    { no: 10, name: \"file_header\", kind: \"message\", T: DataStream_FileHeader, oneof: \"content_header\" },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataStream_Header {\n    return new DataStream_Header().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataStream_Header {\n    return new DataStream_Header().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataStream_Header {\n    return new DataStream_Header().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: DataStream_Header | PlainMessage<DataStream_Header> | undefined, b: DataStream_Header | PlainMessage<DataStream_Header> | undefined): boolean {\n    return proto3.util.equals(DataStream_Header, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.DataStream.Chunk\n */\nexport class DataStream_Chunk extends Message<DataStream_Chunk> {\n  /**\n   * unique identifier for this data stream to map it to the correct header\n   *\n   * @generated from field: string stream_id = 1;\n   */\n  streamId = \"\";\n\n  /**\n   * @generated from field: uint64 chunk_index = 2;\n   */\n  chunkIndex = protoInt64.zero;\n\n  /**\n   * content as binary (bytes)\n   *\n   * @generated from field: bytes content = 3;\n   */\n  content = new Uint8Array(0);\n\n  /**\n   * true only if this is the last chunk of this stream - can also be sent with empty content\n   *\n   * @generated from field: bool complete = 4;\n   */\n  complete = false;\n\n  /**\n   * a version indicating that this chunk_index has been retroactively modified and the original one needs to be replaced\n   *\n   * @generated from field: int32 version = 5;\n   */\n  version = 0;\n\n  /**\n   * optional, initialization vector for AES-GCM encryption\n   *\n   * @generated from field: optional bytes iv = 6;\n   */\n  iv?: Uint8Array;\n\n  constructor(data?: PartialMessage<DataStream_Chunk>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.DataStream.Chunk\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"stream_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"chunk_index\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 3, name: \"content\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 4, name: \"complete\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 5, name: \"version\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 6, name: \"iv\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */, opt: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataStream_Chunk {\n    return new DataStream_Chunk().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataStream_Chunk {\n    return new DataStream_Chunk().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataStream_Chunk {\n    return new DataStream_Chunk().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: DataStream_Chunk | PlainMessage<DataStream_Chunk> | undefined, b: DataStream_Chunk | PlainMessage<DataStream_Chunk> | undefined): boolean {\n    return proto3.util.equals(DataStream_Chunk, a, b);\n  }\n}\n\n"],"mappings":"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","names":["AudioCodec","VideoCodec","ImageCodec","TrackType","TrackSource","VideoQuality","ConnectionQuality","ClientConfigSetting","DisconnectReason","ReconnectReason","SubscriptionError","AudioTrackFeature","ParticipantInfo_State","ParticipantInfo_Kind","Encryption_Type","DataPacket_Kind","ServerInfo_Edition","ClientInfo_SDK","DataStream_OperationType"]}