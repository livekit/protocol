{"version":3,"sources":["../../src/gen/livekit_sip_pb.ts"],"sourcesContent":["// Copyright 2023 LiveKit, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @generated by protoc-gen-es v1.10.0 with parameter \"target=ts\"\n// @generated from file livekit_sip.proto (package livekit, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from \"@bufbuild/protobuf\";\nimport { Duration, Message, proto3, protoInt64 } from \"@bufbuild/protobuf\";\nimport { DisconnectReason } from \"./livekit_models_pb.js\";\n\n/**\n * @generated from enum livekit.SIPTransport\n */\nexport enum SIPTransport {\n  /**\n   * @generated from enum value: SIP_TRANSPORT_AUTO = 0;\n   */\n  SIP_TRANSPORT_AUTO = 0,\n\n  /**\n   * @generated from enum value: SIP_TRANSPORT_UDP = 1;\n   */\n  SIP_TRANSPORT_UDP = 1,\n\n  /**\n   * @generated from enum value: SIP_TRANSPORT_TCP = 2;\n   */\n  SIP_TRANSPORT_TCP = 2,\n\n  /**\n   * @generated from enum value: SIP_TRANSPORT_TLS = 3;\n   */\n  SIP_TRANSPORT_TLS = 3,\n}\n// Retrieve enum metadata with: proto3.getEnumType(SIPTransport)\nproto3.util.setEnumType(SIPTransport, \"livekit.SIPTransport\", [\n  { no: 0, name: \"SIP_TRANSPORT_AUTO\" },\n  { no: 1, name: \"SIP_TRANSPORT_UDP\" },\n  { no: 2, name: \"SIP_TRANSPORT_TCP\" },\n  { no: 3, name: \"SIP_TRANSPORT_TLS\" },\n]);\n\n/**\n * @generated from enum livekit.SIPCallStatus\n */\nexport enum SIPCallStatus {\n  /**\n   * Incoming call is being handled by the SIP service. The SIP participant hasn't joined a LiveKit room yet\n   *\n   * @generated from enum value: SCS_CALL_INCOMING = 0;\n   */\n  SCS_CALL_INCOMING = 0,\n\n  /**\n   * SIP participant for outgoing call has been created. The SIP outgoing call is being established\n   *\n   * @generated from enum value: SCS_PARTICIPANT_JOINED = 1;\n   */\n  SCS_PARTICIPANT_JOINED = 1,\n\n  /**\n   * Call is ongoing. SIP participant is active in the LiveKit room\n   *\n   * @generated from enum value: SCS_ACTIVE = 2;\n   */\n  SCS_ACTIVE = 2,\n\n  /**\n   * Call has ended\n   *\n   * @generated from enum value: SCS_DISCONNECTED = 3;\n   */\n  SCS_DISCONNECTED = 3,\n\n  /**\n   * Call has ended or never succeeded because of an error\n   *\n   * @generated from enum value: SCS_ERROR = 4;\n   */\n  SCS_ERROR = 4,\n}\n// Retrieve enum metadata with: proto3.getEnumType(SIPCallStatus)\nproto3.util.setEnumType(SIPCallStatus, \"livekit.SIPCallStatus\", [\n  { no: 0, name: \"SCS_CALL_INCOMING\" },\n  { no: 1, name: \"SCS_PARTICIPANT_JOINED\" },\n  { no: 2, name: \"SCS_ACTIVE\" },\n  { no: 3, name: \"SCS_DISCONNECTED\" },\n  { no: 4, name: \"SCS_ERROR\" },\n]);\n\n/**\n * @generated from enum livekit.SIPFeature\n */\nexport enum SIPFeature {\n  /**\n   * @generated from enum value: NONE = 0;\n   */\n  NONE = 0,\n\n  /**\n   * @generated from enum value: KRISP_ENABLED = 1;\n   */\n  KRISP_ENABLED = 1,\n}\n// Retrieve enum metadata with: proto3.getEnumType(SIPFeature)\nproto3.util.setEnumType(SIPFeature, \"livekit.SIPFeature\", [\n  { no: 0, name: \"NONE\" },\n  { no: 1, name: \"KRISP_ENABLED\" },\n]);\n\n/**\n * @generated from message livekit.CreateSIPTrunkRequest\n * @deprecated\n */\nexport class CreateSIPTrunkRequest extends Message<CreateSIPTrunkRequest> {\n  /**\n   * CIDR or IPs that traffic is accepted from\n   * An empty list means all inbound traffic is accepted.\n   *\n   * @generated from field: repeated string inbound_addresses = 1;\n   */\n  inboundAddresses: string[] = [];\n\n  /**\n   * IP that SIP INVITE is sent too\n   *\n   * @generated from field: string outbound_address = 2;\n   */\n  outboundAddress = \"\";\n\n  /**\n   * Number used to make outbound calls\n   *\n   * @generated from field: string outbound_number = 3;\n   */\n  outboundNumber = \"\";\n\n  /**\n   * @generated from field: repeated string inbound_numbers_regex = 4 [deprecated = true];\n   * @deprecated\n   */\n  inboundNumbersRegex: string[] = [];\n\n  /**\n   * Accepted `To` values. This Trunk will only accept a call made to\n   * these numbers. This allows you to have distinct Trunks for different phone\n   * numbers at the same provider.\n   *\n   * @generated from field: repeated string inbound_numbers = 9;\n   */\n  inboundNumbers: string[] = [];\n\n  /**\n   * Username and password used to authenticate inbound and outbound SIP invites\n   * May be empty to have no Authentication\n   *\n   * @generated from field: string inbound_username = 5;\n   */\n  inboundUsername = \"\";\n\n  /**\n   * @generated from field: string inbound_password = 6;\n   */\n  inboundPassword = \"\";\n\n  /**\n   * @generated from field: string outbound_username = 7;\n   */\n  outboundUsername = \"\";\n\n  /**\n   * @generated from field: string outbound_password = 8;\n   */\n  outboundPassword = \"\";\n\n  /**\n   * Optional human-readable name for the Trunk.\n   *\n   * @generated from field: string name = 10;\n   */\n  name = \"\";\n\n  /**\n   * Optional user-defined metadata for the Trunk.\n   *\n   * @generated from field: string metadata = 11;\n   */\n  metadata = \"\";\n\n  constructor(data?: PartialMessage<CreateSIPTrunkRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.CreateSIPTrunkRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"inbound_addresses\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 2, name: \"outbound_address\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"outbound_number\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"inbound_numbers_regex\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 9, name: \"inbound_numbers\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 5, name: \"inbound_username\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"inbound_password\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 7, name: \"outbound_username\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 8, name: \"outbound_password\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 10, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 11, name: \"metadata\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSIPTrunkRequest {\n    return new CreateSIPTrunkRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSIPTrunkRequest {\n    return new CreateSIPTrunkRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSIPTrunkRequest {\n    return new CreateSIPTrunkRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CreateSIPTrunkRequest | PlainMessage<CreateSIPTrunkRequest> | undefined, b: CreateSIPTrunkRequest | PlainMessage<CreateSIPTrunkRequest> | undefined): boolean {\n    return proto3.util.equals(CreateSIPTrunkRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SIPTrunkInfo\n * @deprecated\n */\nexport class SIPTrunkInfo extends Message<SIPTrunkInfo> {\n  /**\n   * @generated from field: string sip_trunk_id = 1;\n   */\n  sipTrunkId = \"\";\n\n  /**\n   * @generated from field: livekit.SIPTrunkInfo.TrunkKind kind = 14;\n   */\n  kind = SIPTrunkInfo_TrunkKind.TRUNK_LEGACY;\n\n  /**\n   * CIDR or IPs that traffic is accepted from\n   * An empty list means all inbound traffic is accepted.\n   *\n   * @generated from field: repeated string inbound_addresses = 2;\n   */\n  inboundAddresses: string[] = [];\n\n  /**\n   * IP that SIP INVITE is sent too\n   *\n   * @generated from field: string outbound_address = 3;\n   */\n  outboundAddress = \"\";\n\n  /**\n   * Number used to make outbound calls\n   *\n   * @generated from field: string outbound_number = 4;\n   */\n  outboundNumber = \"\";\n\n  /**\n   * Transport used for inbound and outbound calls.\n   *\n   * @generated from field: livekit.SIPTransport transport = 13;\n   */\n  transport = SIPTransport.SIP_TRANSPORT_AUTO;\n\n  /**\n   * @generated from field: repeated string inbound_numbers_regex = 5 [deprecated = true];\n   * @deprecated\n   */\n  inboundNumbersRegex: string[] = [];\n\n  /**\n   * Accepted `To` values. This Trunk will only accept a call made to\n   * these numbers. This allows you to have distinct Trunks for different phone\n   * numbers at the same provider.\n   *\n   * @generated from field: repeated string inbound_numbers = 10;\n   */\n  inboundNumbers: string[] = [];\n\n  /**\n   * Username and password used to authenticate inbound and outbound SIP invites\n   * May be empty to have no Authentication\n   *\n   * @generated from field: string inbound_username = 6;\n   */\n  inboundUsername = \"\";\n\n  /**\n   * @generated from field: string inbound_password = 7;\n   */\n  inboundPassword = \"\";\n\n  /**\n   * @generated from field: string outbound_username = 8;\n   */\n  outboundUsername = \"\";\n\n  /**\n   * @generated from field: string outbound_password = 9;\n   */\n  outboundPassword = \"\";\n\n  /**\n   * Human-readable name for the Trunk.\n   *\n   * @generated from field: string name = 11;\n   */\n  name = \"\";\n\n  /**\n   * User-defined metadata for the Trunk.\n   *\n   * @generated from field: string metadata = 12;\n   */\n  metadata = \"\";\n\n  constructor(data?: PartialMessage<SIPTrunkInfo>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SIPTrunkInfo\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"sip_trunk_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 14, name: \"kind\", kind: \"enum\", T: proto3.getEnumType(SIPTrunkInfo_TrunkKind) },\n    { no: 2, name: \"inbound_addresses\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 3, name: \"outbound_address\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"outbound_number\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 13, name: \"transport\", kind: \"enum\", T: proto3.getEnumType(SIPTransport) },\n    { no: 5, name: \"inbound_numbers_regex\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 10, name: \"inbound_numbers\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 6, name: \"inbound_username\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 7, name: \"inbound_password\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 8, name: \"outbound_username\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 9, name: \"outbound_password\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 11, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 12, name: \"metadata\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SIPTrunkInfo {\n    return new SIPTrunkInfo().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SIPTrunkInfo {\n    return new SIPTrunkInfo().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SIPTrunkInfo {\n    return new SIPTrunkInfo().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SIPTrunkInfo | PlainMessage<SIPTrunkInfo> | undefined, b: SIPTrunkInfo | PlainMessage<SIPTrunkInfo> | undefined): boolean {\n    return proto3.util.equals(SIPTrunkInfo, a, b);\n  }\n}\n\n/**\n * @generated from enum livekit.SIPTrunkInfo.TrunkKind\n */\nexport enum SIPTrunkInfo_TrunkKind {\n  /**\n   * @generated from enum value: TRUNK_LEGACY = 0;\n   */\n  TRUNK_LEGACY = 0,\n\n  /**\n   * @generated from enum value: TRUNK_INBOUND = 1;\n   */\n  TRUNK_INBOUND = 1,\n\n  /**\n   * @generated from enum value: TRUNK_OUTBOUND = 2;\n   */\n  TRUNK_OUTBOUND = 2,\n}\n// Retrieve enum metadata with: proto3.getEnumType(SIPTrunkInfo_TrunkKind)\nproto3.util.setEnumType(SIPTrunkInfo_TrunkKind, \"livekit.SIPTrunkInfo.TrunkKind\", [\n  { no: 0, name: \"TRUNK_LEGACY\" },\n  { no: 1, name: \"TRUNK_INBOUND\" },\n  { no: 2, name: \"TRUNK_OUTBOUND\" },\n]);\n\n/**\n * @generated from message livekit.CreateSIPInboundTrunkRequest\n */\nexport class CreateSIPInboundTrunkRequest extends Message<CreateSIPInboundTrunkRequest> {\n  /**\n   * Trunk ID is ignored\n   *\n   * @generated from field: livekit.SIPInboundTrunkInfo trunk = 1;\n   */\n  trunk?: SIPInboundTrunkInfo;\n\n  constructor(data?: PartialMessage<CreateSIPInboundTrunkRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.CreateSIPInboundTrunkRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"trunk\", kind: \"message\", T: SIPInboundTrunkInfo },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSIPInboundTrunkRequest {\n    return new CreateSIPInboundTrunkRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSIPInboundTrunkRequest {\n    return new CreateSIPInboundTrunkRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSIPInboundTrunkRequest {\n    return new CreateSIPInboundTrunkRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CreateSIPInboundTrunkRequest | PlainMessage<CreateSIPInboundTrunkRequest> | undefined, b: CreateSIPInboundTrunkRequest | PlainMessage<CreateSIPInboundTrunkRequest> | undefined): boolean {\n    return proto3.util.equals(CreateSIPInboundTrunkRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SIPInboundTrunkInfo\n */\nexport class SIPInboundTrunkInfo extends Message<SIPInboundTrunkInfo> {\n  /**\n   * @generated from field: string sip_trunk_id = 1;\n   */\n  sipTrunkId = \"\";\n\n  /**\n   * Human-readable name for the Trunk.\n   *\n   * @generated from field: string name = 2;\n   */\n  name = \"\";\n\n  /**\n   * User-defined metadata for the Trunk.\n   *\n   * @generated from field: string metadata = 3;\n   */\n  metadata = \"\";\n\n  /**\n   * Numbers associated with LiveKit SIP. The Trunk will only accept calls made to these numbers.\n   * Creating multiple Trunks with different phone numbers allows having different rules for a single provider.\n   *\n   * @generated from field: repeated string numbers = 4;\n   */\n  numbers: string[] = [];\n\n  /**\n   * CIDR or IPs that traffic is accepted from.\n   * An empty list means all inbound traffic is accepted.\n   *\n   * @generated from field: repeated string allowed_addresses = 5;\n   */\n  allowedAddresses: string[] = [];\n\n  /**\n   * Numbers that are allowed to make calls to this Trunk.\n   * An empty list means calls from any phone number is accepted.\n   *\n   * @generated from field: repeated string allowed_numbers = 6;\n   */\n  allowedNumbers: string[] = [];\n\n  /**\n   * Username and password used to authenticate inbound SIP invites.\n   * May be empty to have no authentication.\n   *\n   * @generated from field: string auth_username = 7;\n   */\n  authUsername = \"\";\n\n  /**\n   * @generated from field: string auth_password = 8;\n   */\n  authPassword = \"\";\n\n  /**\n   * Include these SIP X-* headers in 200 OK responses.\n   *\n   * @generated from field: map<string, string> headers = 9;\n   */\n  headers: { [key: string]: string } = {};\n\n  /**\n   * Map SIP X-* headers from INVITE to SIP participant attributes.\n   *\n   * @generated from field: map<string, string> headers_to_attributes = 10;\n   */\n  headersToAttributes: { [key: string]: string } = {};\n\n  /**\n   * Map LiveKit attributes to SIP X-* headers when sending BYE or REFER requests.\n   * Keys are the names of attributes and values are the names of X-* headers they will be mapped to.\n   *\n   * @generated from field: map<string, string> attributes_to_headers = 14;\n   */\n  attributesToHeaders: { [key: string]: string } = {};\n\n  /**\n   * Max time for the caller to wait for track subscription.\n   *\n   * @generated from field: google.protobuf.Duration ringing_timeout = 11;\n   */\n  ringingTimeout?: Duration;\n\n  /**\n   * Max call duration.\n   *\n   * @generated from field: google.protobuf.Duration max_call_duration = 12;\n   */\n  maxCallDuration?: Duration;\n\n  /**\n   * @generated from field: bool krisp_enabled = 13;\n   */\n  krispEnabled = false;\n\n  constructor(data?: PartialMessage<SIPInboundTrunkInfo>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SIPInboundTrunkInfo\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"sip_trunk_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"metadata\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"numbers\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 5, name: \"allowed_addresses\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 6, name: \"allowed_numbers\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 7, name: \"auth_username\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 8, name: \"auth_password\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 9, name: \"headers\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"scalar\", T: 9 /* ScalarType.STRING */} },\n    { no: 10, name: \"headers_to_attributes\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"scalar\", T: 9 /* ScalarType.STRING */} },\n    { no: 14, name: \"attributes_to_headers\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"scalar\", T: 9 /* ScalarType.STRING */} },\n    { no: 11, name: \"ringing_timeout\", kind: \"message\", T: Duration },\n    { no: 12, name: \"max_call_duration\", kind: \"message\", T: Duration },\n    { no: 13, name: \"krisp_enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SIPInboundTrunkInfo {\n    return new SIPInboundTrunkInfo().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SIPInboundTrunkInfo {\n    return new SIPInboundTrunkInfo().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SIPInboundTrunkInfo {\n    return new SIPInboundTrunkInfo().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SIPInboundTrunkInfo | PlainMessage<SIPInboundTrunkInfo> | undefined, b: SIPInboundTrunkInfo | PlainMessage<SIPInboundTrunkInfo> | undefined): boolean {\n    return proto3.util.equals(SIPInboundTrunkInfo, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.CreateSIPOutboundTrunkRequest\n */\nexport class CreateSIPOutboundTrunkRequest extends Message<CreateSIPOutboundTrunkRequest> {\n  /**\n   * Trunk ID is ignored\n   *\n   * @generated from field: livekit.SIPOutboundTrunkInfo trunk = 1;\n   */\n  trunk?: SIPOutboundTrunkInfo;\n\n  constructor(data?: PartialMessage<CreateSIPOutboundTrunkRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.CreateSIPOutboundTrunkRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"trunk\", kind: \"message\", T: SIPOutboundTrunkInfo },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSIPOutboundTrunkRequest {\n    return new CreateSIPOutboundTrunkRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSIPOutboundTrunkRequest {\n    return new CreateSIPOutboundTrunkRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSIPOutboundTrunkRequest {\n    return new CreateSIPOutboundTrunkRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CreateSIPOutboundTrunkRequest | PlainMessage<CreateSIPOutboundTrunkRequest> | undefined, b: CreateSIPOutboundTrunkRequest | PlainMessage<CreateSIPOutboundTrunkRequest> | undefined): boolean {\n    return proto3.util.equals(CreateSIPOutboundTrunkRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SIPOutboundTrunkInfo\n */\nexport class SIPOutboundTrunkInfo extends Message<SIPOutboundTrunkInfo> {\n  /**\n   * @generated from field: string sip_trunk_id = 1;\n   */\n  sipTrunkId = \"\";\n\n  /**\n   * Human-readable name for the Trunk.\n   *\n   * @generated from field: string name = 2;\n   */\n  name = \"\";\n\n  /**\n   * User-defined metadata for the Trunk.\n   *\n   * @generated from field: string metadata = 3;\n   */\n  metadata = \"\";\n\n  /**\n   * Hostname or IP that SIP INVITE is sent too.\n   * Note that this is not a SIP URI and should not contain the 'sip:' protocol prefix.\n   *\n   * @generated from field: string address = 4;\n   */\n  address = \"\";\n\n  /**\n   * SIP Transport used for outbound call.\n   *\n   * @generated from field: livekit.SIPTransport transport = 5;\n   */\n  transport = SIPTransport.SIP_TRANSPORT_AUTO;\n\n  /**\n   * Numbers used to make the calls. Random one from this list will be selected.\n   *\n   * @generated from field: repeated string numbers = 6;\n   */\n  numbers: string[] = [];\n\n  /**\n   * Username and password used to authenticate with SIP server.\n   * May be empty to have no authentication.\n   *\n   * @generated from field: string auth_username = 7;\n   */\n  authUsername = \"\";\n\n  /**\n   * @generated from field: string auth_password = 8;\n   */\n  authPassword = \"\";\n\n  /**\n   * Include these SIP X-* headers in INVITE request.\n   * These headers are sent as-is and may help identify this call as coming from LiveKit for the other SIP endpoint.\n   *\n   * @generated from field: map<string, string> headers = 9;\n   */\n  headers: { [key: string]: string } = {};\n\n  /**\n   * Map SIP X-* headers from 200 OK to SIP participant attributes.\n   * Keys are the names of X-* headers and values are the names of attributes they will be mapped to.\n   *\n   * @generated from field: map<string, string> headers_to_attributes = 10;\n   */\n  headersToAttributes: { [key: string]: string } = {};\n\n  /**\n   * Map LiveKit attributes to SIP X-* headers when sending BYE or REFER requests.\n   * Keys are the names of attributes and values are the names of X-* headers they will be mapped to.\n   *\n   * @generated from field: map<string, string> attributes_to_headers = 11;\n   */\n  attributesToHeaders: { [key: string]: string } = {};\n\n  constructor(data?: PartialMessage<SIPOutboundTrunkInfo>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SIPOutboundTrunkInfo\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"sip_trunk_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"metadata\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"address\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"transport\", kind: \"enum\", T: proto3.getEnumType(SIPTransport) },\n    { no: 6, name: \"numbers\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 7, name: \"auth_username\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 8, name: \"auth_password\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 9, name: \"headers\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"scalar\", T: 9 /* ScalarType.STRING */} },\n    { no: 10, name: \"headers_to_attributes\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"scalar\", T: 9 /* ScalarType.STRING */} },\n    { no: 11, name: \"attributes_to_headers\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"scalar\", T: 9 /* ScalarType.STRING */} },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SIPOutboundTrunkInfo {\n    return new SIPOutboundTrunkInfo().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SIPOutboundTrunkInfo {\n    return new SIPOutboundTrunkInfo().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SIPOutboundTrunkInfo {\n    return new SIPOutboundTrunkInfo().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SIPOutboundTrunkInfo | PlainMessage<SIPOutboundTrunkInfo> | undefined, b: SIPOutboundTrunkInfo | PlainMessage<SIPOutboundTrunkInfo> | undefined): boolean {\n    return proto3.util.equals(SIPOutboundTrunkInfo, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.GetSIPInboundTrunkRequest\n */\nexport class GetSIPInboundTrunkRequest extends Message<GetSIPInboundTrunkRequest> {\n  /**\n   * @generated from field: string sip_trunk_id = 1;\n   */\n  sipTrunkId = \"\";\n\n  constructor(data?: PartialMessage<GetSIPInboundTrunkRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.GetSIPInboundTrunkRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"sip_trunk_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSIPInboundTrunkRequest {\n    return new GetSIPInboundTrunkRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSIPInboundTrunkRequest {\n    return new GetSIPInboundTrunkRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSIPInboundTrunkRequest {\n    return new GetSIPInboundTrunkRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GetSIPInboundTrunkRequest | PlainMessage<GetSIPInboundTrunkRequest> | undefined, b: GetSIPInboundTrunkRequest | PlainMessage<GetSIPInboundTrunkRequest> | undefined): boolean {\n    return proto3.util.equals(GetSIPInboundTrunkRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.GetSIPInboundTrunkResponse\n */\nexport class GetSIPInboundTrunkResponse extends Message<GetSIPInboundTrunkResponse> {\n  /**\n   * @generated from field: livekit.SIPInboundTrunkInfo trunk = 1;\n   */\n  trunk?: SIPInboundTrunkInfo;\n\n  constructor(data?: PartialMessage<GetSIPInboundTrunkResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.GetSIPInboundTrunkResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"trunk\", kind: \"message\", T: SIPInboundTrunkInfo },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSIPInboundTrunkResponse {\n    return new GetSIPInboundTrunkResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSIPInboundTrunkResponse {\n    return new GetSIPInboundTrunkResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSIPInboundTrunkResponse {\n    return new GetSIPInboundTrunkResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GetSIPInboundTrunkResponse | PlainMessage<GetSIPInboundTrunkResponse> | undefined, b: GetSIPInboundTrunkResponse | PlainMessage<GetSIPInboundTrunkResponse> | undefined): boolean {\n    return proto3.util.equals(GetSIPInboundTrunkResponse, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.GetSIPOutboundTrunkRequest\n */\nexport class GetSIPOutboundTrunkRequest extends Message<GetSIPOutboundTrunkRequest> {\n  /**\n   * @generated from field: string sip_trunk_id = 1;\n   */\n  sipTrunkId = \"\";\n\n  constructor(data?: PartialMessage<GetSIPOutboundTrunkRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.GetSIPOutboundTrunkRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"sip_trunk_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSIPOutboundTrunkRequest {\n    return new GetSIPOutboundTrunkRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSIPOutboundTrunkRequest {\n    return new GetSIPOutboundTrunkRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSIPOutboundTrunkRequest {\n    return new GetSIPOutboundTrunkRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GetSIPOutboundTrunkRequest | PlainMessage<GetSIPOutboundTrunkRequest> | undefined, b: GetSIPOutboundTrunkRequest | PlainMessage<GetSIPOutboundTrunkRequest> | undefined): boolean {\n    return proto3.util.equals(GetSIPOutboundTrunkRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.GetSIPOutboundTrunkResponse\n */\nexport class GetSIPOutboundTrunkResponse extends Message<GetSIPOutboundTrunkResponse> {\n  /**\n   * @generated from field: livekit.SIPOutboundTrunkInfo trunk = 1;\n   */\n  trunk?: SIPOutboundTrunkInfo;\n\n  constructor(data?: PartialMessage<GetSIPOutboundTrunkResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.GetSIPOutboundTrunkResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"trunk\", kind: \"message\", T: SIPOutboundTrunkInfo },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSIPOutboundTrunkResponse {\n    return new GetSIPOutboundTrunkResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSIPOutboundTrunkResponse {\n    return new GetSIPOutboundTrunkResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSIPOutboundTrunkResponse {\n    return new GetSIPOutboundTrunkResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GetSIPOutboundTrunkResponse | PlainMessage<GetSIPOutboundTrunkResponse> | undefined, b: GetSIPOutboundTrunkResponse | PlainMessage<GetSIPOutboundTrunkResponse> | undefined): boolean {\n    return proto3.util.equals(GetSIPOutboundTrunkResponse, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.ListSIPTrunkRequest\n * @deprecated\n */\nexport class ListSIPTrunkRequest extends Message<ListSIPTrunkRequest> {\n  constructor(data?: PartialMessage<ListSIPTrunkRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ListSIPTrunkRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSIPTrunkRequest {\n    return new ListSIPTrunkRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSIPTrunkRequest {\n    return new ListSIPTrunkRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSIPTrunkRequest {\n    return new ListSIPTrunkRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ListSIPTrunkRequest | PlainMessage<ListSIPTrunkRequest> | undefined, b: ListSIPTrunkRequest | PlainMessage<ListSIPTrunkRequest> | undefined): boolean {\n    return proto3.util.equals(ListSIPTrunkRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.ListSIPTrunkResponse\n * @deprecated\n */\nexport class ListSIPTrunkResponse extends Message<ListSIPTrunkResponse> {\n  /**\n   * @generated from field: repeated livekit.SIPTrunkInfo items = 1;\n   */\n  items: SIPTrunkInfo[] = [];\n\n  constructor(data?: PartialMessage<ListSIPTrunkResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ListSIPTrunkResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"items\", kind: \"message\", T: SIPTrunkInfo, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSIPTrunkResponse {\n    return new ListSIPTrunkResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSIPTrunkResponse {\n    return new ListSIPTrunkResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSIPTrunkResponse {\n    return new ListSIPTrunkResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ListSIPTrunkResponse | PlainMessage<ListSIPTrunkResponse> | undefined, b: ListSIPTrunkResponse | PlainMessage<ListSIPTrunkResponse> | undefined): boolean {\n    return proto3.util.equals(ListSIPTrunkResponse, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.ListSIPInboundTrunkRequest\n */\nexport class ListSIPInboundTrunkRequest extends Message<ListSIPInboundTrunkRequest> {\n  constructor(data?: PartialMessage<ListSIPInboundTrunkRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ListSIPInboundTrunkRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSIPInboundTrunkRequest {\n    return new ListSIPInboundTrunkRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSIPInboundTrunkRequest {\n    return new ListSIPInboundTrunkRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSIPInboundTrunkRequest {\n    return new ListSIPInboundTrunkRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ListSIPInboundTrunkRequest | PlainMessage<ListSIPInboundTrunkRequest> | undefined, b: ListSIPInboundTrunkRequest | PlainMessage<ListSIPInboundTrunkRequest> | undefined): boolean {\n    return proto3.util.equals(ListSIPInboundTrunkRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.ListSIPInboundTrunkResponse\n */\nexport class ListSIPInboundTrunkResponse extends Message<ListSIPInboundTrunkResponse> {\n  /**\n   * @generated from field: repeated livekit.SIPInboundTrunkInfo items = 1;\n   */\n  items: SIPInboundTrunkInfo[] = [];\n\n  constructor(data?: PartialMessage<ListSIPInboundTrunkResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ListSIPInboundTrunkResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"items\", kind: \"message\", T: SIPInboundTrunkInfo, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSIPInboundTrunkResponse {\n    return new ListSIPInboundTrunkResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSIPInboundTrunkResponse {\n    return new ListSIPInboundTrunkResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSIPInboundTrunkResponse {\n    return new ListSIPInboundTrunkResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ListSIPInboundTrunkResponse | PlainMessage<ListSIPInboundTrunkResponse> | undefined, b: ListSIPInboundTrunkResponse | PlainMessage<ListSIPInboundTrunkResponse> | undefined): boolean {\n    return proto3.util.equals(ListSIPInboundTrunkResponse, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.ListSIPOutboundTrunkRequest\n */\nexport class ListSIPOutboundTrunkRequest extends Message<ListSIPOutboundTrunkRequest> {\n  constructor(data?: PartialMessage<ListSIPOutboundTrunkRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ListSIPOutboundTrunkRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSIPOutboundTrunkRequest {\n    return new ListSIPOutboundTrunkRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSIPOutboundTrunkRequest {\n    return new ListSIPOutboundTrunkRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSIPOutboundTrunkRequest {\n    return new ListSIPOutboundTrunkRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ListSIPOutboundTrunkRequest | PlainMessage<ListSIPOutboundTrunkRequest> | undefined, b: ListSIPOutboundTrunkRequest | PlainMessage<ListSIPOutboundTrunkRequest> | undefined): boolean {\n    return proto3.util.equals(ListSIPOutboundTrunkRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.ListSIPOutboundTrunkResponse\n */\nexport class ListSIPOutboundTrunkResponse extends Message<ListSIPOutboundTrunkResponse> {\n  /**\n   * @generated from field: repeated livekit.SIPOutboundTrunkInfo items = 1;\n   */\n  items: SIPOutboundTrunkInfo[] = [];\n\n  constructor(data?: PartialMessage<ListSIPOutboundTrunkResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ListSIPOutboundTrunkResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"items\", kind: \"message\", T: SIPOutboundTrunkInfo, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSIPOutboundTrunkResponse {\n    return new ListSIPOutboundTrunkResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSIPOutboundTrunkResponse {\n    return new ListSIPOutboundTrunkResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSIPOutboundTrunkResponse {\n    return new ListSIPOutboundTrunkResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ListSIPOutboundTrunkResponse | PlainMessage<ListSIPOutboundTrunkResponse> | undefined, b: ListSIPOutboundTrunkResponse | PlainMessage<ListSIPOutboundTrunkResponse> | undefined): boolean {\n    return proto3.util.equals(ListSIPOutboundTrunkResponse, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.DeleteSIPTrunkRequest\n */\nexport class DeleteSIPTrunkRequest extends Message<DeleteSIPTrunkRequest> {\n  /**\n   * @generated from field: string sip_trunk_id = 1;\n   */\n  sipTrunkId = \"\";\n\n  constructor(data?: PartialMessage<DeleteSIPTrunkRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.DeleteSIPTrunkRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"sip_trunk_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSIPTrunkRequest {\n    return new DeleteSIPTrunkRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSIPTrunkRequest {\n    return new DeleteSIPTrunkRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSIPTrunkRequest {\n    return new DeleteSIPTrunkRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: DeleteSIPTrunkRequest | PlainMessage<DeleteSIPTrunkRequest> | undefined, b: DeleteSIPTrunkRequest | PlainMessage<DeleteSIPTrunkRequest> | undefined): boolean {\n    return proto3.util.equals(DeleteSIPTrunkRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SIPDispatchRuleDirect\n */\nexport class SIPDispatchRuleDirect extends Message<SIPDispatchRuleDirect> {\n  /**\n   * What room should call be directed into\n   *\n   * @generated from field: string room_name = 1;\n   */\n  roomName = \"\";\n\n  /**\n   * Optional pin required to enter room\n   *\n   * @generated from field: string pin = 2;\n   */\n  pin = \"\";\n\n  constructor(data?: PartialMessage<SIPDispatchRuleDirect>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SIPDispatchRuleDirect\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"room_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"pin\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SIPDispatchRuleDirect {\n    return new SIPDispatchRuleDirect().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SIPDispatchRuleDirect {\n    return new SIPDispatchRuleDirect().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SIPDispatchRuleDirect {\n    return new SIPDispatchRuleDirect().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SIPDispatchRuleDirect | PlainMessage<SIPDispatchRuleDirect> | undefined, b: SIPDispatchRuleDirect | PlainMessage<SIPDispatchRuleDirect> | undefined): boolean {\n    return proto3.util.equals(SIPDispatchRuleDirect, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SIPDispatchRuleIndividual\n */\nexport class SIPDispatchRuleIndividual extends Message<SIPDispatchRuleIndividual> {\n  /**\n   * Prefix used on new room name\n   *\n   * @generated from field: string room_prefix = 1;\n   */\n  roomPrefix = \"\";\n\n  /**\n   * Optional pin required to enter room\n   *\n   * @generated from field: string pin = 2;\n   */\n  pin = \"\";\n\n  constructor(data?: PartialMessage<SIPDispatchRuleIndividual>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SIPDispatchRuleIndividual\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"room_prefix\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"pin\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SIPDispatchRuleIndividual {\n    return new SIPDispatchRuleIndividual().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SIPDispatchRuleIndividual {\n    return new SIPDispatchRuleIndividual().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SIPDispatchRuleIndividual {\n    return new SIPDispatchRuleIndividual().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SIPDispatchRuleIndividual | PlainMessage<SIPDispatchRuleIndividual> | undefined, b: SIPDispatchRuleIndividual | PlainMessage<SIPDispatchRuleIndividual> | undefined): boolean {\n    return proto3.util.equals(SIPDispatchRuleIndividual, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SIPDispatchRuleCallee\n */\nexport class SIPDispatchRuleCallee extends Message<SIPDispatchRuleCallee> {\n  /**\n   * Prefix used on new room name\n   *\n   * @generated from field: string room_prefix = 1;\n   */\n  roomPrefix = \"\";\n\n  /**\n   * Optional pin required to enter room\n   *\n   * @generated from field: string pin = 2;\n   */\n  pin = \"\";\n\n  /**\n   * Optionally append random suffix\n   *\n   * @generated from field: bool randomize = 3;\n   */\n  randomize = false;\n\n  constructor(data?: PartialMessage<SIPDispatchRuleCallee>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SIPDispatchRuleCallee\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"room_prefix\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"pin\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"randomize\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SIPDispatchRuleCallee {\n    return new SIPDispatchRuleCallee().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SIPDispatchRuleCallee {\n    return new SIPDispatchRuleCallee().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SIPDispatchRuleCallee {\n    return new SIPDispatchRuleCallee().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SIPDispatchRuleCallee | PlainMessage<SIPDispatchRuleCallee> | undefined, b: SIPDispatchRuleCallee | PlainMessage<SIPDispatchRuleCallee> | undefined): boolean {\n    return proto3.util.equals(SIPDispatchRuleCallee, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SIPDispatchRule\n */\nexport class SIPDispatchRule extends Message<SIPDispatchRule> {\n  /**\n   * @generated from oneof livekit.SIPDispatchRule.rule\n   */\n  rule: {\n    /**\n     * SIPDispatchRuleDirect is a `SIP Dispatch Rule` that puts a user directly into a room\n     * This places users into an existing room. Optionally you can require a pin before a user can\n     * enter the room\n     *\n     * @generated from field: livekit.SIPDispatchRuleDirect dispatch_rule_direct = 1;\n     */\n    value: SIPDispatchRuleDirect;\n    case: \"dispatchRuleDirect\";\n  } | {\n    /**\n     * SIPDispatchRuleIndividual is a `SIP Dispatch Rule` that creates a new room for each caller.\n     *\n     * @generated from field: livekit.SIPDispatchRuleIndividual dispatch_rule_individual = 2;\n     */\n    value: SIPDispatchRuleIndividual;\n    case: \"dispatchRuleIndividual\";\n  } | {\n    /**\n     * SIPDispatchRuleCallee is a `SIP Dispatch Rule` that creates a new room for each callee.\n     *\n     * @generated from field: livekit.SIPDispatchRuleCallee dispatch_rule_callee = 3;\n     */\n    value: SIPDispatchRuleCallee;\n    case: \"dispatchRuleCallee\";\n  } | { case: undefined; value?: undefined } = { case: undefined };\n\n  constructor(data?: PartialMessage<SIPDispatchRule>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SIPDispatchRule\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"dispatch_rule_direct\", kind: \"message\", T: SIPDispatchRuleDirect, oneof: \"rule\" },\n    { no: 2, name: \"dispatch_rule_individual\", kind: \"message\", T: SIPDispatchRuleIndividual, oneof: \"rule\" },\n    { no: 3, name: \"dispatch_rule_callee\", kind: \"message\", T: SIPDispatchRuleCallee, oneof: \"rule\" },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SIPDispatchRule {\n    return new SIPDispatchRule().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SIPDispatchRule {\n    return new SIPDispatchRule().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SIPDispatchRule {\n    return new SIPDispatchRule().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SIPDispatchRule | PlainMessage<SIPDispatchRule> | undefined, b: SIPDispatchRule | PlainMessage<SIPDispatchRule> | undefined): boolean {\n    return proto3.util.equals(SIPDispatchRule, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.CreateSIPDispatchRuleRequest\n */\nexport class CreateSIPDispatchRuleRequest extends Message<CreateSIPDispatchRuleRequest> {\n  /**\n   * @generated from field: livekit.SIPDispatchRule rule = 1;\n   */\n  rule?: SIPDispatchRule;\n\n  /**\n   * What trunks are accepted for this dispatch rule\n   * If empty all trunks will match this dispatch rule\n   *\n   * @generated from field: repeated string trunk_ids = 2;\n   */\n  trunkIds: string[] = [];\n\n  /**\n   * By default the From value (Phone number) is used for participant name/identity and added to attributes.\n   * If true, a random value for identity will be used and numbers will be omitted from attributes.\n   *\n   * @generated from field: bool hide_phone_number = 3;\n   */\n  hidePhoneNumber = false;\n\n  /**\n   * Dispatch Rule will only accept a call made to these numbers (if set).\n   *\n   * @generated from field: repeated string inbound_numbers = 6;\n   */\n  inboundNumbers: string[] = [];\n\n  /**\n   * Optional human-readable name for the Dispatch Rule.\n   *\n   * @generated from field: string name = 4;\n   */\n  name = \"\";\n\n  /**\n   * User-defined metadata for the Dispatch Rule.\n   * Participants created by this rule will inherit this metadata.\n   *\n   * @generated from field: string metadata = 5;\n   */\n  metadata = \"\";\n\n  /**\n   * User-defined attributes for the Dispatch Rule.\n   * Participants created by this rule will inherit these attributes.\n   *\n   * @generated from field: map<string, string> attributes = 7;\n   */\n  attributes: { [key: string]: string } = {};\n\n  constructor(data?: PartialMessage<CreateSIPDispatchRuleRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.CreateSIPDispatchRuleRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"rule\", kind: \"message\", T: SIPDispatchRule },\n    { no: 2, name: \"trunk_ids\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 3, name: \"hide_phone_number\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 6, name: \"inbound_numbers\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 4, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"metadata\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 7, name: \"attributes\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"scalar\", T: 9 /* ScalarType.STRING */} },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSIPDispatchRuleRequest {\n    return new CreateSIPDispatchRuleRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSIPDispatchRuleRequest {\n    return new CreateSIPDispatchRuleRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSIPDispatchRuleRequest {\n    return new CreateSIPDispatchRuleRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CreateSIPDispatchRuleRequest | PlainMessage<CreateSIPDispatchRuleRequest> | undefined, b: CreateSIPDispatchRuleRequest | PlainMessage<CreateSIPDispatchRuleRequest> | undefined): boolean {\n    return proto3.util.equals(CreateSIPDispatchRuleRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SIPDispatchRuleInfo\n */\nexport class SIPDispatchRuleInfo extends Message<SIPDispatchRuleInfo> {\n  /**\n   * @generated from field: string sip_dispatch_rule_id = 1;\n   */\n  sipDispatchRuleId = \"\";\n\n  /**\n   * @generated from field: livekit.SIPDispatchRule rule = 2;\n   */\n  rule?: SIPDispatchRule;\n\n  /**\n   * @generated from field: repeated string trunk_ids = 3;\n   */\n  trunkIds: string[] = [];\n\n  /**\n   * @generated from field: bool hide_phone_number = 4;\n   */\n  hidePhoneNumber = false;\n\n  /**\n   * Dispatch Rule will only accept a call made to these numbers (if set).\n   *\n   * @generated from field: repeated string inbound_numbers = 7;\n   */\n  inboundNumbers: string[] = [];\n\n  /**\n   * Human-readable name for the Dispatch Rule.\n   *\n   * @generated from field: string name = 5;\n   */\n  name = \"\";\n\n  /**\n   * User-defined metadata for the Dispatch Rule.\n   * Participants created by this rule will inherit this metadata.\n   *\n   * @generated from field: string metadata = 6;\n   */\n  metadata = \"\";\n\n  /**\n   * User-defined attributes for the Dispatch Rule.\n   * Participants created by this rule will inherit these attributes.\n   *\n   * @generated from field: map<string, string> attributes = 8;\n   */\n  attributes: { [key: string]: string } = {};\n\n  constructor(data?: PartialMessage<SIPDispatchRuleInfo>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SIPDispatchRuleInfo\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"sip_dispatch_rule_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"rule\", kind: \"message\", T: SIPDispatchRule },\n    { no: 3, name: \"trunk_ids\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 4, name: \"hide_phone_number\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 7, name: \"inbound_numbers\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 5, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"metadata\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 8, name: \"attributes\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"scalar\", T: 9 /* ScalarType.STRING */} },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SIPDispatchRuleInfo {\n    return new SIPDispatchRuleInfo().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SIPDispatchRuleInfo {\n    return new SIPDispatchRuleInfo().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SIPDispatchRuleInfo {\n    return new SIPDispatchRuleInfo().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SIPDispatchRuleInfo | PlainMessage<SIPDispatchRuleInfo> | undefined, b: SIPDispatchRuleInfo | PlainMessage<SIPDispatchRuleInfo> | undefined): boolean {\n    return proto3.util.equals(SIPDispatchRuleInfo, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.ListSIPDispatchRuleRequest\n */\nexport class ListSIPDispatchRuleRequest extends Message<ListSIPDispatchRuleRequest> {\n  constructor(data?: PartialMessage<ListSIPDispatchRuleRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ListSIPDispatchRuleRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSIPDispatchRuleRequest {\n    return new ListSIPDispatchRuleRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSIPDispatchRuleRequest {\n    return new ListSIPDispatchRuleRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSIPDispatchRuleRequest {\n    return new ListSIPDispatchRuleRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ListSIPDispatchRuleRequest | PlainMessage<ListSIPDispatchRuleRequest> | undefined, b: ListSIPDispatchRuleRequest | PlainMessage<ListSIPDispatchRuleRequest> | undefined): boolean {\n    return proto3.util.equals(ListSIPDispatchRuleRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.ListSIPDispatchRuleResponse\n */\nexport class ListSIPDispatchRuleResponse extends Message<ListSIPDispatchRuleResponse> {\n  /**\n   * @generated from field: repeated livekit.SIPDispatchRuleInfo items = 1;\n   */\n  items: SIPDispatchRuleInfo[] = [];\n\n  constructor(data?: PartialMessage<ListSIPDispatchRuleResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ListSIPDispatchRuleResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"items\", kind: \"message\", T: SIPDispatchRuleInfo, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSIPDispatchRuleResponse {\n    return new ListSIPDispatchRuleResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSIPDispatchRuleResponse {\n    return new ListSIPDispatchRuleResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSIPDispatchRuleResponse {\n    return new ListSIPDispatchRuleResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ListSIPDispatchRuleResponse | PlainMessage<ListSIPDispatchRuleResponse> | undefined, b: ListSIPDispatchRuleResponse | PlainMessage<ListSIPDispatchRuleResponse> | undefined): boolean {\n    return proto3.util.equals(ListSIPDispatchRuleResponse, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.DeleteSIPDispatchRuleRequest\n */\nexport class DeleteSIPDispatchRuleRequest extends Message<DeleteSIPDispatchRuleRequest> {\n  /**\n   * @generated from field: string sip_dispatch_rule_id = 1;\n   */\n  sipDispatchRuleId = \"\";\n\n  constructor(data?: PartialMessage<DeleteSIPDispatchRuleRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.DeleteSIPDispatchRuleRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"sip_dispatch_rule_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSIPDispatchRuleRequest {\n    return new DeleteSIPDispatchRuleRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSIPDispatchRuleRequest {\n    return new DeleteSIPDispatchRuleRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSIPDispatchRuleRequest {\n    return new DeleteSIPDispatchRuleRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: DeleteSIPDispatchRuleRequest | PlainMessage<DeleteSIPDispatchRuleRequest> | undefined, b: DeleteSIPDispatchRuleRequest | PlainMessage<DeleteSIPDispatchRuleRequest> | undefined): boolean {\n    return proto3.util.equals(DeleteSIPDispatchRuleRequest, a, b);\n  }\n}\n\n/**\n * A SIP Participant is a singular SIP session connected to a LiveKit room via\n * a SIP Trunk into a SIP DispatchRule\n *\n * @generated from message livekit.CreateSIPParticipantRequest\n */\nexport class CreateSIPParticipantRequest extends Message<CreateSIPParticipantRequest> {\n  /**\n   * What SIP Trunk should be used to dial the user\n   *\n   * @generated from field: string sip_trunk_id = 1;\n   */\n  sipTrunkId = \"\";\n\n  /**\n   * What number should be dialed via SIP\n   *\n   * @generated from field: string sip_call_to = 2;\n   */\n  sipCallTo = \"\";\n\n  /**\n   * Optional SIP From number to use. If empty, trunk number is used.\n   *\n   * @generated from field: string sip_number = 15;\n   */\n  sipNumber = \"\";\n\n  /**\n   * What LiveKit room should this participant be connected too\n   *\n   * @generated from field: string room_name = 3;\n   */\n  roomName = \"\";\n\n  /**\n   * Optional identity of the participant in LiveKit room\n   *\n   * @generated from field: string participant_identity = 4;\n   */\n  participantIdentity = \"\";\n\n  /**\n   * Optional name of the participant in LiveKit room\n   *\n   * @generated from field: string participant_name = 7;\n   */\n  participantName = \"\";\n\n  /**\n   * Optional user-defined metadata. Will be attached to a created Participant in the room.\n   *\n   * @generated from field: string participant_metadata = 8;\n   */\n  participantMetadata = \"\";\n\n  /**\n   * Optional user-defined attributes. Will be attached to a created Participant in the room.\n   *\n   * @generated from field: map<string, string> participant_attributes = 9;\n   */\n  participantAttributes: { [key: string]: string } = {};\n\n  /**\n   * Optionally send following DTMF digits (extension codes) when making a call.\n   * Character 'w' can be used to add a 0.5 sec delay.\n   *\n   * @generated from field: string dtmf = 5;\n   */\n  dtmf = \"\";\n\n  /**\n   * Optionally play dialtone in the room as an audible indicator for existing participants. The `play_ringtone` option is deprectated but has the same effect.\n   *\n   * @generated from field: bool play_ringtone = 6 [deprecated = true];\n   * @deprecated\n   */\n  playRingtone = false;\n\n  /**\n   * @generated from field: bool play_dialtone = 13;\n   */\n  playDialtone = false;\n\n  /**\n   * By default the From value (Phone number) is used for participant name/identity (if not set) and added to attributes.\n   * If true, a random value for identity will be used and numbers will be omitted from attributes.\n   *\n   * @generated from field: bool hide_phone_number = 10;\n   */\n  hidePhoneNumber = false;\n\n  /**\n   * Max time for the callee to answer the call.\n   *\n   * @generated from field: google.protobuf.Duration ringing_timeout = 11;\n   */\n  ringingTimeout?: Duration;\n\n  /**\n   * Max call duration.\n   *\n   * @generated from field: google.protobuf.Duration max_call_duration = 12;\n   */\n  maxCallDuration?: Duration;\n\n  /**\n   * Enable voice isolation for the callee.\n   *\n   * NEXT ID: 16\n   *\n   * @generated from field: bool enable_krisp = 14;\n   */\n  enableKrisp = false;\n\n  constructor(data?: PartialMessage<CreateSIPParticipantRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.CreateSIPParticipantRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"sip_trunk_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"sip_call_to\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 15, name: \"sip_number\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"room_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"participant_identity\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 7, name: \"participant_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 8, name: \"participant_metadata\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 9, name: \"participant_attributes\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"scalar\", T: 9 /* ScalarType.STRING */} },\n    { no: 5, name: \"dtmf\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"play_ringtone\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 13, name: \"play_dialtone\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 10, name: \"hide_phone_number\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 11, name: \"ringing_timeout\", kind: \"message\", T: Duration },\n    { no: 12, name: \"max_call_duration\", kind: \"message\", T: Duration },\n    { no: 14, name: \"enable_krisp\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSIPParticipantRequest {\n    return new CreateSIPParticipantRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSIPParticipantRequest {\n    return new CreateSIPParticipantRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSIPParticipantRequest {\n    return new CreateSIPParticipantRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CreateSIPParticipantRequest | PlainMessage<CreateSIPParticipantRequest> | undefined, b: CreateSIPParticipantRequest | PlainMessage<CreateSIPParticipantRequest> | undefined): boolean {\n    return proto3.util.equals(CreateSIPParticipantRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SIPParticipantInfo\n */\nexport class SIPParticipantInfo extends Message<SIPParticipantInfo> {\n  /**\n   * @generated from field: string participant_id = 1;\n   */\n  participantId = \"\";\n\n  /**\n   * @generated from field: string participant_identity = 2;\n   */\n  participantIdentity = \"\";\n\n  /**\n   * @generated from field: string room_name = 3;\n   */\n  roomName = \"\";\n\n  /**\n   * @generated from field: string sip_call_id = 4;\n   */\n  sipCallId = \"\";\n\n  constructor(data?: PartialMessage<SIPParticipantInfo>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SIPParticipantInfo\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"participant_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"participant_identity\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"room_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"sip_call_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SIPParticipantInfo {\n    return new SIPParticipantInfo().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SIPParticipantInfo {\n    return new SIPParticipantInfo().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SIPParticipantInfo {\n    return new SIPParticipantInfo().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SIPParticipantInfo | PlainMessage<SIPParticipantInfo> | undefined, b: SIPParticipantInfo | PlainMessage<SIPParticipantInfo> | undefined): boolean {\n    return proto3.util.equals(SIPParticipantInfo, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.TransferSIPParticipantRequest\n */\nexport class TransferSIPParticipantRequest extends Message<TransferSIPParticipantRequest> {\n  /**\n   * @generated from field: string participant_identity = 1;\n   */\n  participantIdentity = \"\";\n\n  /**\n   * @generated from field: string room_name = 2;\n   */\n  roomName = \"\";\n\n  /**\n   * @generated from field: string transfer_to = 3;\n   */\n  transferTo = \"\";\n\n  /**\n   * Optionally play dialtone to the SIP participant as an audible indicator of being transferred\n   *\n   * @generated from field: bool play_dialtone = 4;\n   */\n  playDialtone = false;\n\n  constructor(data?: PartialMessage<TransferSIPParticipantRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.TransferSIPParticipantRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"participant_identity\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"room_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"transfer_to\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"play_dialtone\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferSIPParticipantRequest {\n    return new TransferSIPParticipantRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferSIPParticipantRequest {\n    return new TransferSIPParticipantRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferSIPParticipantRequest {\n    return new TransferSIPParticipantRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: TransferSIPParticipantRequest | PlainMessage<TransferSIPParticipantRequest> | undefined, b: TransferSIPParticipantRequest | PlainMessage<TransferSIPParticipantRequest> | undefined): boolean {\n    return proto3.util.equals(TransferSIPParticipantRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SIPCallInfo\n */\nexport class SIPCallInfo extends Message<SIPCallInfo> {\n  /**\n   * @generated from field: string call_id = 1;\n   */\n  callId = \"\";\n\n  /**\n   * @generated from field: string trunk_id = 2;\n   */\n  trunkId = \"\";\n\n  /**\n   * @generated from field: string room_name = 3;\n   */\n  roomName = \"\";\n\n  /**\n   * ID of the current/previous room published to\n   *\n   * @generated from field: string room_id = 4;\n   */\n  roomId = \"\";\n\n  /**\n   * @generated from field: string participant_identity = 5;\n   */\n  participantIdentity = \"\";\n\n  /**\n   * @generated from field: livekit.SIPUri from_uri = 6;\n   */\n  fromUri?: SIPUri;\n\n  /**\n   * @generated from field: livekit.SIPUri to_uri = 7;\n   */\n  toUri?: SIPUri;\n\n  /**\n   * @generated from field: repeated livekit.SIPFeature enabled_features = 14;\n   */\n  enabledFeatures: SIPFeature[] = [];\n\n  /**\n   * @generated from field: livekit.SIPCallStatus call_status = 8;\n   */\n  callStatus = SIPCallStatus.SCS_CALL_INCOMING;\n\n  /**\n   * @generated from field: int64 created_at = 9;\n   */\n  createdAt = protoInt64.zero;\n\n  /**\n   * @generated from field: int64 started_at = 10;\n   */\n  startedAt = protoInt64.zero;\n\n  /**\n   * @generated from field: int64 ended_at = 11;\n   */\n  endedAt = protoInt64.zero;\n\n  /**\n   * @generated from field: livekit.DisconnectReason disconnect_reason = 12;\n   */\n  disconnectReason = DisconnectReason.UNKNOWN_REASON;\n\n  /**\n   * @generated from field: string error = 13;\n   */\n  error = \"\";\n\n  constructor(data?: PartialMessage<SIPCallInfo>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SIPCallInfo\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"call_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"trunk_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"room_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"room_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"participant_identity\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"from_uri\", kind: \"message\", T: SIPUri },\n    { no: 7, name: \"to_uri\", kind: \"message\", T: SIPUri },\n    { no: 14, name: \"enabled_features\", kind: \"enum\", T: proto3.getEnumType(SIPFeature), repeated: true },\n    { no: 8, name: \"call_status\", kind: \"enum\", T: proto3.getEnumType(SIPCallStatus) },\n    { no: 9, name: \"created_at\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 10, name: \"started_at\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 11, name: \"ended_at\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 12, name: \"disconnect_reason\", kind: \"enum\", T: proto3.getEnumType(DisconnectReason) },\n    { no: 13, name: \"error\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SIPCallInfo {\n    return new SIPCallInfo().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SIPCallInfo {\n    return new SIPCallInfo().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SIPCallInfo {\n    return new SIPCallInfo().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SIPCallInfo | PlainMessage<SIPCallInfo> | undefined, b: SIPCallInfo | PlainMessage<SIPCallInfo> | undefined): boolean {\n    return proto3.util.equals(SIPCallInfo, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SIPUri\n */\nexport class SIPUri extends Message<SIPUri> {\n  /**\n   * @generated from field: string user = 1;\n   */\n  user = \"\";\n\n  /**\n   * @generated from field: string host = 2;\n   */\n  host = \"\";\n\n  /**\n   * @generated from field: string ip = 3;\n   */\n  ip = \"\";\n\n  /**\n   * @generated from field: uint32 port = 4;\n   */\n  port = 0;\n\n  /**\n   * @generated from field: livekit.SIPTransport transport = 5;\n   */\n  transport = SIPTransport.SIP_TRANSPORT_AUTO;\n\n  constructor(data?: PartialMessage<SIPUri>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SIPUri\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"user\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"host\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"ip\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"port\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 5, name: \"transport\", kind: \"enum\", T: proto3.getEnumType(SIPTransport) },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SIPUri {\n    return new SIPUri().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SIPUri {\n    return new SIPUri().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SIPUri {\n    return new SIPUri().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SIPUri | PlainMessage<SIPUri> | undefined, b: SIPUri | PlainMessage<SIPUri> | undefined): boolean {\n    return proto3.util.equals(SIPUri, a, b);\n  }\n}\n\n"],"mappings":"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","names":["SIPTransport","SIPCallStatus","SIPFeature","SIPTrunkInfo_TrunkKind"]}