{"version":3,"sources":["../../src/gen/livekit_rtc_pb.ts"],"sourcesContent":["// Copyright 2023 LiveKit, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @generated by protoc-gen-es v1.10.0 with parameter \"target=ts\"\n// @generated from file livekit_rtc.proto (package livekit, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from \"@bufbuild/protobuf\";\nimport { Message, proto3, protoInt64 } from \"@bufbuild/protobuf\";\nimport { AudioTrackFeature, ClientConfiguration, Codec, ConnectionQuality, DisconnectReason, Encryption_Type, ParticipantInfo, ParticipantTracks, Room, ServerInfo, SpeakerInfo, SubscriptionError, TrackInfo, TrackSource, TrackType, VideoLayer, VideoQuality } from \"./livekit_models_pb.js\";\n\n/**\n * @generated from enum livekit.SignalTarget\n */\nexport enum SignalTarget {\n  /**\n   * @generated from enum value: PUBLISHER = 0;\n   */\n  PUBLISHER = 0,\n\n  /**\n   * @generated from enum value: SUBSCRIBER = 1;\n   */\n  SUBSCRIBER = 1,\n}\n// Retrieve enum metadata with: proto3.getEnumType(SignalTarget)\nproto3.util.setEnumType(SignalTarget, \"livekit.SignalTarget\", [\n  { no: 0, name: \"PUBLISHER\" },\n  { no: 1, name: \"SUBSCRIBER\" },\n]);\n\n/**\n * @generated from enum livekit.StreamState\n */\nexport enum StreamState {\n  /**\n   * @generated from enum value: ACTIVE = 0;\n   */\n  ACTIVE = 0,\n\n  /**\n   * @generated from enum value: PAUSED = 1;\n   */\n  PAUSED = 1,\n}\n// Retrieve enum metadata with: proto3.getEnumType(StreamState)\nproto3.util.setEnumType(StreamState, \"livekit.StreamState\", [\n  { no: 0, name: \"ACTIVE\" },\n  { no: 1, name: \"PAUSED\" },\n]);\n\n/**\n * @generated from enum livekit.CandidateProtocol\n */\nexport enum CandidateProtocol {\n  /**\n   * @generated from enum value: UDP = 0;\n   */\n  UDP = 0,\n\n  /**\n   * @generated from enum value: TCP = 1;\n   */\n  TCP = 1,\n\n  /**\n   * @generated from enum value: TLS = 2;\n   */\n  TLS = 2,\n}\n// Retrieve enum metadata with: proto3.getEnumType(CandidateProtocol)\nproto3.util.setEnumType(CandidateProtocol, \"livekit.CandidateProtocol\", [\n  { no: 0, name: \"UDP\" },\n  { no: 1, name: \"TCP\" },\n  { no: 2, name: \"TLS\" },\n]);\n\n/**\n * @generated from message livekit.SignalRequest\n */\nexport class SignalRequest extends Message<SignalRequest> {\n  /**\n   * @generated from oneof livekit.SignalRequest.message\n   */\n  message: {\n    /**\n     * initial join exchange, for publisher\n     *\n     * @generated from field: livekit.SessionDescription offer = 1;\n     */\n    value: SessionDescription;\n    case: \"offer\";\n  } | {\n    /**\n     * participant answering publisher offer\n     *\n     * @generated from field: livekit.SessionDescription answer = 2;\n     */\n    value: SessionDescription;\n    case: \"answer\";\n  } | {\n    /**\n     * @generated from field: livekit.TrickleRequest trickle = 3;\n     */\n    value: TrickleRequest;\n    case: \"trickle\";\n  } | {\n    /**\n     * @generated from field: livekit.AddTrackRequest add_track = 4;\n     */\n    value: AddTrackRequest;\n    case: \"addTrack\";\n  } | {\n    /**\n     * mute the participant's published tracks\n     *\n     * @generated from field: livekit.MuteTrackRequest mute = 5;\n     */\n    value: MuteTrackRequest;\n    case: \"mute\";\n  } | {\n    /**\n     * Subscribe or unsubscribe from tracks\n     *\n     * @generated from field: livekit.UpdateSubscription subscription = 6;\n     */\n    value: UpdateSubscription;\n    case: \"subscription\";\n  } | {\n    /**\n     * Update settings of subscribed tracks\n     *\n     * @generated from field: livekit.UpdateTrackSettings track_setting = 7;\n     */\n    value: UpdateTrackSettings;\n    case: \"trackSetting\";\n  } | {\n    /**\n     * Immediately terminate session\n     *\n     * @generated from field: livekit.LeaveRequest leave = 8;\n     */\n    value: LeaveRequest;\n    case: \"leave\";\n  } | {\n    /**\n     * Update published video layers\n     *\n     * @generated from field: livekit.UpdateVideoLayers update_layers = 10 [deprecated = true];\n     * @deprecated\n     */\n    value: UpdateVideoLayers;\n    case: \"updateLayers\";\n  } | {\n    /**\n     * Update subscriber permissions\n     *\n     * @generated from field: livekit.SubscriptionPermission subscription_permission = 11;\n     */\n    value: SubscriptionPermission;\n    case: \"subscriptionPermission\";\n  } | {\n    /**\n     * sync client's subscribe state to server during reconnect\n     *\n     * @generated from field: livekit.SyncState sync_state = 12;\n     */\n    value: SyncState;\n    case: \"syncState\";\n  } | {\n    /**\n     * Simulate conditions, for client validations\n     *\n     * @generated from field: livekit.SimulateScenario simulate = 13;\n     */\n    value: SimulateScenario;\n    case: \"simulate\";\n  } | {\n    /**\n     * client triggered ping to server\n     *\n     * deprecated by ping_req (message Ping)\n     *\n     * @generated from field: int64 ping = 14;\n     */\n    value: bigint;\n    case: \"ping\";\n  } | {\n    /**\n     * update a participant's own metadata, name, or attributes\n     * requires canUpdateOwnParticipantMetadata permission\n     *\n     * @generated from field: livekit.UpdateParticipantMetadata update_metadata = 15;\n     */\n    value: UpdateParticipantMetadata;\n    case: \"updateMetadata\";\n  } | {\n    /**\n     * @generated from field: livekit.Ping ping_req = 16;\n     */\n    value: Ping;\n    case: \"pingReq\";\n  } | {\n    /**\n     * Update local audio track settings\n     *\n     * @generated from field: livekit.UpdateLocalAudioTrack update_audio_track = 17;\n     */\n    value: UpdateLocalAudioTrack;\n    case: \"updateAudioTrack\";\n  } | {\n    /**\n     * Update local video track settings\n     *\n     * @generated from field: livekit.UpdateLocalVideoTrack update_video_track = 18;\n     */\n    value: UpdateLocalVideoTrack;\n    case: \"updateVideoTrack\";\n  } | { case: undefined; value?: undefined } = { case: undefined };\n\n  constructor(data?: PartialMessage<SignalRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SignalRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"offer\", kind: \"message\", T: SessionDescription, oneof: \"message\" },\n    { no: 2, name: \"answer\", kind: \"message\", T: SessionDescription, oneof: \"message\" },\n    { no: 3, name: \"trickle\", kind: \"message\", T: TrickleRequest, oneof: \"message\" },\n    { no: 4, name: \"add_track\", kind: \"message\", T: AddTrackRequest, oneof: \"message\" },\n    { no: 5, name: \"mute\", kind: \"message\", T: MuteTrackRequest, oneof: \"message\" },\n    { no: 6, name: \"subscription\", kind: \"message\", T: UpdateSubscription, oneof: \"message\" },\n    { no: 7, name: \"track_setting\", kind: \"message\", T: UpdateTrackSettings, oneof: \"message\" },\n    { no: 8, name: \"leave\", kind: \"message\", T: LeaveRequest, oneof: \"message\" },\n    { no: 10, name: \"update_layers\", kind: \"message\", T: UpdateVideoLayers, oneof: \"message\" },\n    { no: 11, name: \"subscription_permission\", kind: \"message\", T: SubscriptionPermission, oneof: \"message\" },\n    { no: 12, name: \"sync_state\", kind: \"message\", T: SyncState, oneof: \"message\" },\n    { no: 13, name: \"simulate\", kind: \"message\", T: SimulateScenario, oneof: \"message\" },\n    { no: 14, name: \"ping\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */, oneof: \"message\" },\n    { no: 15, name: \"update_metadata\", kind: \"message\", T: UpdateParticipantMetadata, oneof: \"message\" },\n    { no: 16, name: \"ping_req\", kind: \"message\", T: Ping, oneof: \"message\" },\n    { no: 17, name: \"update_audio_track\", kind: \"message\", T: UpdateLocalAudioTrack, oneof: \"message\" },\n    { no: 18, name: \"update_video_track\", kind: \"message\", T: UpdateLocalVideoTrack, oneof: \"message\" },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignalRequest {\n    return new SignalRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignalRequest {\n    return new SignalRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignalRequest {\n    return new SignalRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SignalRequest | PlainMessage<SignalRequest> | undefined, b: SignalRequest | PlainMessage<SignalRequest> | undefined): boolean {\n    return proto3.util.equals(SignalRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SignalResponse\n */\nexport class SignalResponse extends Message<SignalResponse> {\n  /**\n   * @generated from oneof livekit.SignalResponse.message\n   */\n  message: {\n    /**\n     * sent when join is accepted\n     *\n     * @generated from field: livekit.JoinResponse join = 1;\n     */\n    value: JoinResponse;\n    case: \"join\";\n  } | {\n    /**\n     * sent when server answers publisher\n     *\n     * @generated from field: livekit.SessionDescription answer = 2;\n     */\n    value: SessionDescription;\n    case: \"answer\";\n  } | {\n    /**\n     * sent when server is sending subscriber an offer\n     *\n     * @generated from field: livekit.SessionDescription offer = 3;\n     */\n    value: SessionDescription;\n    case: \"offer\";\n  } | {\n    /**\n     * sent when an ICE candidate is available\n     *\n     * @generated from field: livekit.TrickleRequest trickle = 4;\n     */\n    value: TrickleRequest;\n    case: \"trickle\";\n  } | {\n    /**\n     * sent when participants in the room has changed\n     *\n     * @generated from field: livekit.ParticipantUpdate update = 5;\n     */\n    value: ParticipantUpdate;\n    case: \"update\";\n  } | {\n    /**\n     * sent to the participant when their track has been published\n     *\n     * @generated from field: livekit.TrackPublishedResponse track_published = 6;\n     */\n    value: TrackPublishedResponse;\n    case: \"trackPublished\";\n  } | {\n    /**\n     * Immediately terminate session\n     *\n     * @generated from field: livekit.LeaveRequest leave = 8;\n     */\n    value: LeaveRequest;\n    case: \"leave\";\n  } | {\n    /**\n     * server initiated mute\n     *\n     * @generated from field: livekit.MuteTrackRequest mute = 9;\n     */\n    value: MuteTrackRequest;\n    case: \"mute\";\n  } | {\n    /**\n     * indicates changes to speaker status, including when they've gone to not speaking\n     *\n     * @generated from field: livekit.SpeakersChanged speakers_changed = 10;\n     */\n    value: SpeakersChanged;\n    case: \"speakersChanged\";\n  } | {\n    /**\n     * sent when metadata of the room has changed\n     *\n     * @generated from field: livekit.RoomUpdate room_update = 11;\n     */\n    value: RoomUpdate;\n    case: \"roomUpdate\";\n  } | {\n    /**\n     * when connection quality changed\n     *\n     * @generated from field: livekit.ConnectionQualityUpdate connection_quality = 12;\n     */\n    value: ConnectionQualityUpdate;\n    case: \"connectionQuality\";\n  } | {\n    /**\n     * when streamed tracks state changed, used to notify when any of the streams were paused due to\n     * congestion\n     *\n     * @generated from field: livekit.StreamStateUpdate stream_state_update = 13;\n     */\n    value: StreamStateUpdate;\n    case: \"streamStateUpdate\";\n  } | {\n    /**\n     * when max subscribe quality changed, used by dynamic broadcasting to disable unused layers\n     *\n     * @generated from field: livekit.SubscribedQualityUpdate subscribed_quality_update = 14;\n     */\n    value: SubscribedQualityUpdate;\n    case: \"subscribedQualityUpdate\";\n  } | {\n    /**\n     * when subscription permission changed\n     *\n     * @generated from field: livekit.SubscriptionPermissionUpdate subscription_permission_update = 15;\n     */\n    value: SubscriptionPermissionUpdate;\n    case: \"subscriptionPermissionUpdate\";\n  } | {\n    /**\n     * update the token the client was using, to prevent an active client from using an expired token\n     *\n     * @generated from field: string refresh_token = 16;\n     */\n    value: string;\n    case: \"refreshToken\";\n  } | {\n    /**\n     * server initiated track unpublish\n     *\n     * @generated from field: livekit.TrackUnpublishedResponse track_unpublished = 17;\n     */\n    value: TrackUnpublishedResponse;\n    case: \"trackUnpublished\";\n  } | {\n    /**\n     * respond to ping\n     *\n     * deprecated by pong_resp (message Pong)\n     *\n     * @generated from field: int64 pong = 18;\n     */\n    value: bigint;\n    case: \"pong\";\n  } | {\n    /**\n     * sent when client reconnects\n     *\n     * @generated from field: livekit.ReconnectResponse reconnect = 19;\n     */\n    value: ReconnectResponse;\n    case: \"reconnect\";\n  } | {\n    /**\n     * respond to Ping\n     *\n     * @generated from field: livekit.Pong pong_resp = 20;\n     */\n    value: Pong;\n    case: \"pongResp\";\n  } | {\n    /**\n     * Subscription response, client should not expect any media from this subscription if it fails\n     *\n     * @generated from field: livekit.SubscriptionResponse subscription_response = 21;\n     */\n    value: SubscriptionResponse;\n    case: \"subscriptionResponse\";\n  } | {\n    /**\n     * Response relating to user inititated requests that carry a `request_id`\n     *\n     * @generated from field: livekit.RequestResponse request_response = 22;\n     */\n    value: RequestResponse;\n    case: \"requestResponse\";\n  } | {\n    /**\n     * notify to the publisher when a published track has been subscribed for the first time\n     *\n     * @generated from field: livekit.TrackSubscribed track_subscribed = 23;\n     */\n    value: TrackSubscribed;\n    case: \"trackSubscribed\";\n  } | { case: undefined; value?: undefined } = { case: undefined };\n\n  constructor(data?: PartialMessage<SignalResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SignalResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"join\", kind: \"message\", T: JoinResponse, oneof: \"message\" },\n    { no: 2, name: \"answer\", kind: \"message\", T: SessionDescription, oneof: \"message\" },\n    { no: 3, name: \"offer\", kind: \"message\", T: SessionDescription, oneof: \"message\" },\n    { no: 4, name: \"trickle\", kind: \"message\", T: TrickleRequest, oneof: \"message\" },\n    { no: 5, name: \"update\", kind: \"message\", T: ParticipantUpdate, oneof: \"message\" },\n    { no: 6, name: \"track_published\", kind: \"message\", T: TrackPublishedResponse, oneof: \"message\" },\n    { no: 8, name: \"leave\", kind: \"message\", T: LeaveRequest, oneof: \"message\" },\n    { no: 9, name: \"mute\", kind: \"message\", T: MuteTrackRequest, oneof: \"message\" },\n    { no: 10, name: \"speakers_changed\", kind: \"message\", T: SpeakersChanged, oneof: \"message\" },\n    { no: 11, name: \"room_update\", kind: \"message\", T: RoomUpdate, oneof: \"message\" },\n    { no: 12, name: \"connection_quality\", kind: \"message\", T: ConnectionQualityUpdate, oneof: \"message\" },\n    { no: 13, name: \"stream_state_update\", kind: \"message\", T: StreamStateUpdate, oneof: \"message\" },\n    { no: 14, name: \"subscribed_quality_update\", kind: \"message\", T: SubscribedQualityUpdate, oneof: \"message\" },\n    { no: 15, name: \"subscription_permission_update\", kind: \"message\", T: SubscriptionPermissionUpdate, oneof: \"message\" },\n    { no: 16, name: \"refresh_token\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, oneof: \"message\" },\n    { no: 17, name: \"track_unpublished\", kind: \"message\", T: TrackUnpublishedResponse, oneof: \"message\" },\n    { no: 18, name: \"pong\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */, oneof: \"message\" },\n    { no: 19, name: \"reconnect\", kind: \"message\", T: ReconnectResponse, oneof: \"message\" },\n    { no: 20, name: \"pong_resp\", kind: \"message\", T: Pong, oneof: \"message\" },\n    { no: 21, name: \"subscription_response\", kind: \"message\", T: SubscriptionResponse, oneof: \"message\" },\n    { no: 22, name: \"request_response\", kind: \"message\", T: RequestResponse, oneof: \"message\" },\n    { no: 23, name: \"track_subscribed\", kind: \"message\", T: TrackSubscribed, oneof: \"message\" },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignalResponse {\n    return new SignalResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignalResponse {\n    return new SignalResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignalResponse {\n    return new SignalResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SignalResponse | PlainMessage<SignalResponse> | undefined, b: SignalResponse | PlainMessage<SignalResponse> | undefined): boolean {\n    return proto3.util.equals(SignalResponse, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SimulcastCodec\n */\nexport class SimulcastCodec extends Message<SimulcastCodec> {\n  /**\n   * @generated from field: string codec = 1;\n   */\n  codec = \"\";\n\n  /**\n   * @generated from field: string cid = 2;\n   */\n  cid = \"\";\n\n  constructor(data?: PartialMessage<SimulcastCodec>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SimulcastCodec\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"codec\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"cid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimulcastCodec {\n    return new SimulcastCodec().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimulcastCodec {\n    return new SimulcastCodec().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimulcastCodec {\n    return new SimulcastCodec().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SimulcastCodec | PlainMessage<SimulcastCodec> | undefined, b: SimulcastCodec | PlainMessage<SimulcastCodec> | undefined): boolean {\n    return proto3.util.equals(SimulcastCodec, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.AddTrackRequest\n */\nexport class AddTrackRequest extends Message<AddTrackRequest> {\n  /**\n   * client ID of track, to match it when RTC track is received\n   *\n   * @generated from field: string cid = 1;\n   */\n  cid = \"\";\n\n  /**\n   * @generated from field: string name = 2;\n   */\n  name = \"\";\n\n  /**\n   * @generated from field: livekit.TrackType type = 3;\n   */\n  type = TrackType.AUDIO;\n\n  /**\n   * to be deprecated in favor of layers\n   *\n   * @generated from field: uint32 width = 4;\n   */\n  width = 0;\n\n  /**\n   * @generated from field: uint32 height = 5;\n   */\n  height = 0;\n\n  /**\n   * true to add track and initialize to muted\n   *\n   * @generated from field: bool muted = 6;\n   */\n  muted = false;\n\n  /**\n   * true if DTX (Discontinuous Transmission) is disabled for audio\n   *\n   * @generated from field: bool disable_dtx = 7;\n   */\n  disableDtx = false;\n\n  /**\n   * @generated from field: livekit.TrackSource source = 8;\n   */\n  source = TrackSource.UNKNOWN;\n\n  /**\n   * @generated from field: repeated livekit.VideoLayer layers = 9;\n   */\n  layers: VideoLayer[] = [];\n\n  /**\n   * @generated from field: repeated livekit.SimulcastCodec simulcast_codecs = 10;\n   */\n  simulcastCodecs: SimulcastCodec[] = [];\n\n  /**\n   * server ID of track, publish new codec to exist track\n   *\n   * @generated from field: string sid = 11;\n   */\n  sid = \"\";\n\n  /**\n   * @generated from field: bool stereo = 12;\n   */\n  stereo = false;\n\n  /**\n   * true if RED (Redundant Encoding) is disabled for audio\n   *\n   * @generated from field: bool disable_red = 13;\n   */\n  disableRed = false;\n\n  /**\n   * @generated from field: livekit.Encryption.Type encryption = 14;\n   */\n  encryption = Encryption_Type.NONE;\n\n  /**\n   * which stream the track belongs to, used to group tracks together.\n   * if not specified, server will infer it from track source to bundle camera/microphone, screenshare/audio together\n   *\n   * @generated from field: string stream = 15;\n   */\n  stream = \"\";\n\n  constructor(data?: PartialMessage<AddTrackRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.AddTrackRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"cid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"type\", kind: \"enum\", T: proto3.getEnumType(TrackType) },\n    { no: 4, name: \"width\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 5, name: \"height\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 6, name: \"muted\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 7, name: \"disable_dtx\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 8, name: \"source\", kind: \"enum\", T: proto3.getEnumType(TrackSource) },\n    { no: 9, name: \"layers\", kind: \"message\", T: VideoLayer, repeated: true },\n    { no: 10, name: \"simulcast_codecs\", kind: \"message\", T: SimulcastCodec, repeated: true },\n    { no: 11, name: \"sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 12, name: \"stereo\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 13, name: \"disable_red\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 14, name: \"encryption\", kind: \"enum\", T: proto3.getEnumType(Encryption_Type) },\n    { no: 15, name: \"stream\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddTrackRequest {\n    return new AddTrackRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddTrackRequest {\n    return new AddTrackRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddTrackRequest {\n    return new AddTrackRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: AddTrackRequest | PlainMessage<AddTrackRequest> | undefined, b: AddTrackRequest | PlainMessage<AddTrackRequest> | undefined): boolean {\n    return proto3.util.equals(AddTrackRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.TrickleRequest\n */\nexport class TrickleRequest extends Message<TrickleRequest> {\n  /**\n   * @generated from field: string candidateInit = 1;\n   */\n  candidateInit = \"\";\n\n  /**\n   * @generated from field: livekit.SignalTarget target = 2;\n   */\n  target = SignalTarget.PUBLISHER;\n\n  /**\n   * @generated from field: bool final = 3;\n   */\n  final = false;\n\n  constructor(data?: PartialMessage<TrickleRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.TrickleRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"candidateInit\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"target\", kind: \"enum\", T: proto3.getEnumType(SignalTarget) },\n    { no: 3, name: \"final\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrickleRequest {\n    return new TrickleRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrickleRequest {\n    return new TrickleRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrickleRequest {\n    return new TrickleRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: TrickleRequest | PlainMessage<TrickleRequest> | undefined, b: TrickleRequest | PlainMessage<TrickleRequest> | undefined): boolean {\n    return proto3.util.equals(TrickleRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.MuteTrackRequest\n */\nexport class MuteTrackRequest extends Message<MuteTrackRequest> {\n  /**\n   * @generated from field: string sid = 1;\n   */\n  sid = \"\";\n\n  /**\n   * @generated from field: bool muted = 2;\n   */\n  muted = false;\n\n  constructor(data?: PartialMessage<MuteTrackRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.MuteTrackRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"muted\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MuteTrackRequest {\n    return new MuteTrackRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MuteTrackRequest {\n    return new MuteTrackRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MuteTrackRequest {\n    return new MuteTrackRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: MuteTrackRequest | PlainMessage<MuteTrackRequest> | undefined, b: MuteTrackRequest | PlainMessage<MuteTrackRequest> | undefined): boolean {\n    return proto3.util.equals(MuteTrackRequest, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.JoinResponse\n */\nexport class JoinResponse extends Message<JoinResponse> {\n  /**\n   * @generated from field: livekit.Room room = 1;\n   */\n  room?: Room;\n\n  /**\n   * @generated from field: livekit.ParticipantInfo participant = 2;\n   */\n  participant?: ParticipantInfo;\n\n  /**\n   * @generated from field: repeated livekit.ParticipantInfo other_participants = 3;\n   */\n  otherParticipants: ParticipantInfo[] = [];\n\n  /**\n   * deprecated. use server_info.version instead.\n   *\n   * @generated from field: string server_version = 4;\n   */\n  serverVersion = \"\";\n\n  /**\n   * @generated from field: repeated livekit.ICEServer ice_servers = 5;\n   */\n  iceServers: ICEServer[] = [];\n\n  /**\n   * use subscriber as the primary PeerConnection\n   *\n   * @generated from field: bool subscriber_primary = 6;\n   */\n  subscriberPrimary = false;\n\n  /**\n   * when the current server isn't available, return alternate url to retry connection\n   * when this is set, the other fields will be largely empty\n   *\n   * @generated from field: string alternative_url = 7;\n   */\n  alternativeUrl = \"\";\n\n  /**\n   * @generated from field: livekit.ClientConfiguration client_configuration = 8;\n   */\n  clientConfiguration?: ClientConfiguration;\n\n  /**\n   * deprecated. use server_info.region instead.\n   *\n   * @generated from field: string server_region = 9;\n   */\n  serverRegion = \"\";\n\n  /**\n   * @generated from field: int32 ping_timeout = 10;\n   */\n  pingTimeout = 0;\n\n  /**\n   * @generated from field: int32 ping_interval = 11;\n   */\n  pingInterval = 0;\n\n  /**\n   * @generated from field: livekit.ServerInfo server_info = 12;\n   */\n  serverInfo?: ServerInfo;\n\n  /**\n   * Server-Injected-Frame byte trailer, used to identify unencrypted frames when e2ee is enabled\n   *\n   * @generated from field: bytes sif_trailer = 13;\n   */\n  sifTrailer = new Uint8Array(0);\n\n  /**\n   * @generated from field: repeated livekit.Codec enabled_publish_codecs = 14;\n   */\n  enabledPublishCodecs: Codec[] = [];\n\n  /**\n   * when set, client should attempt to establish publish peer connection when joining room to speed up publishing\n   *\n   * @generated from field: bool fast_publish = 15;\n   */\n  fastPublish = false;\n\n  constructor(data?: PartialMessage<JoinResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.JoinResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"room\", kind: \"message\", T: Room },\n    { no: 2, name: \"participant\", kind: \"message\", T: ParticipantInfo },\n    { no: 3, name: \"other_participants\", kind: \"message\", T: ParticipantInfo, repeated: true },\n    { no: 4, name: \"server_version\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"ice_servers\", kind: \"message\", T: ICEServer, repeated: true },\n    { no: 6, name: \"subscriber_primary\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 7, name: \"alternative_url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 8, name: \"client_configuration\", kind: \"message\", T: ClientConfiguration },\n    { no: 9, name: \"server_region\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 10, name: \"ping_timeout\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 11, name: \"ping_interval\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 12, name: \"server_info\", kind: \"message\", T: ServerInfo },\n    { no: 13, name: \"sif_trailer\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n    { no: 14, name: \"enabled_publish_codecs\", kind: \"message\", T: Codec, repeated: true },\n    { no: 15, name: \"fast_publish\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinResponse {\n    return new JoinResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinResponse {\n    return new JoinResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinResponse {\n    return new JoinResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: JoinResponse | PlainMessage<JoinResponse> | undefined, b: JoinResponse | PlainMessage<JoinResponse> | undefined): boolean {\n    return proto3.util.equals(JoinResponse, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.ReconnectResponse\n */\nexport class ReconnectResponse extends Message<ReconnectResponse> {\n  /**\n   * @generated from field: repeated livekit.ICEServer ice_servers = 1;\n   */\n  iceServers: ICEServer[] = [];\n\n  /**\n   * @generated from field: livekit.ClientConfiguration client_configuration = 2;\n   */\n  clientConfiguration?: ClientConfiguration;\n\n  constructor(data?: PartialMessage<ReconnectResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ReconnectResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"ice_servers\", kind: \"message\", T: ICEServer, repeated: true },\n    { no: 2, name: \"client_configuration\", kind: \"message\", T: ClientConfiguration },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReconnectResponse {\n    return new ReconnectResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReconnectResponse {\n    return new ReconnectResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReconnectResponse {\n    return new ReconnectResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ReconnectResponse | PlainMessage<ReconnectResponse> | undefined, b: ReconnectResponse | PlainMessage<ReconnectResponse> | undefined): boolean {\n    return proto3.util.equals(ReconnectResponse, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.TrackPublishedResponse\n */\nexport class TrackPublishedResponse extends Message<TrackPublishedResponse> {\n  /**\n   * @generated from field: string cid = 1;\n   */\n  cid = \"\";\n\n  /**\n   * @generated from field: livekit.TrackInfo track = 2;\n   */\n  track?: TrackInfo;\n\n  constructor(data?: PartialMessage<TrackPublishedResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.TrackPublishedResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"cid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"track\", kind: \"message\", T: TrackInfo },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackPublishedResponse {\n    return new TrackPublishedResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackPublishedResponse {\n    return new TrackPublishedResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackPublishedResponse {\n    return new TrackPublishedResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: TrackPublishedResponse | PlainMessage<TrackPublishedResponse> | undefined, b: TrackPublishedResponse | PlainMessage<TrackPublishedResponse> | undefined): boolean {\n    return proto3.util.equals(TrackPublishedResponse, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.TrackUnpublishedResponse\n */\nexport class TrackUnpublishedResponse extends Message<TrackUnpublishedResponse> {\n  /**\n   * @generated from field: string track_sid = 1;\n   */\n  trackSid = \"\";\n\n  constructor(data?: PartialMessage<TrackUnpublishedResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.TrackUnpublishedResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"track_sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackUnpublishedResponse {\n    return new TrackUnpublishedResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackUnpublishedResponse {\n    return new TrackUnpublishedResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackUnpublishedResponse {\n    return new TrackUnpublishedResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: TrackUnpublishedResponse | PlainMessage<TrackUnpublishedResponse> | undefined, b: TrackUnpublishedResponse | PlainMessage<TrackUnpublishedResponse> | undefined): boolean {\n    return proto3.util.equals(TrackUnpublishedResponse, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SessionDescription\n */\nexport class SessionDescription extends Message<SessionDescription> {\n  /**\n   * \"answer\" | \"offer\" | \"pranswer\" | \"rollback\"\n   *\n   * @generated from field: string type = 1;\n   */\n  type = \"\";\n\n  /**\n   * @generated from field: string sdp = 2;\n   */\n  sdp = \"\";\n\n  constructor(data?: PartialMessage<SessionDescription>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SessionDescription\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"type\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"sdp\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SessionDescription {\n    return new SessionDescription().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SessionDescription {\n    return new SessionDescription().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SessionDescription {\n    return new SessionDescription().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SessionDescription | PlainMessage<SessionDescription> | undefined, b: SessionDescription | PlainMessage<SessionDescription> | undefined): boolean {\n    return proto3.util.equals(SessionDescription, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.ParticipantUpdate\n */\nexport class ParticipantUpdate extends Message<ParticipantUpdate> {\n  /**\n   * @generated from field: repeated livekit.ParticipantInfo participants = 1;\n   */\n  participants: ParticipantInfo[] = [];\n\n  constructor(data?: PartialMessage<ParticipantUpdate>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ParticipantUpdate\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"participants\", kind: \"message\", T: ParticipantInfo, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantUpdate {\n    return new ParticipantUpdate().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantUpdate {\n    return new ParticipantUpdate().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantUpdate {\n    return new ParticipantUpdate().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ParticipantUpdate | PlainMessage<ParticipantUpdate> | undefined, b: ParticipantUpdate | PlainMessage<ParticipantUpdate> | undefined): boolean {\n    return proto3.util.equals(ParticipantUpdate, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.UpdateSubscription\n */\nexport class UpdateSubscription extends Message<UpdateSubscription> {\n  /**\n   * @generated from field: repeated string track_sids = 1;\n   */\n  trackSids: string[] = [];\n\n  /**\n   * @generated from field: bool subscribe = 2;\n   */\n  subscribe = false;\n\n  /**\n   * @generated from field: repeated livekit.ParticipantTracks participant_tracks = 3;\n   */\n  participantTracks: ParticipantTracks[] = [];\n\n  constructor(data?: PartialMessage<UpdateSubscription>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.UpdateSubscription\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"track_sids\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 2, name: \"subscribe\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 3, name: \"participant_tracks\", kind: \"message\", T: ParticipantTracks, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSubscription {\n    return new UpdateSubscription().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSubscription {\n    return new UpdateSubscription().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSubscription {\n    return new UpdateSubscription().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateSubscription | PlainMessage<UpdateSubscription> | undefined, b: UpdateSubscription | PlainMessage<UpdateSubscription> | undefined): boolean {\n    return proto3.util.equals(UpdateSubscription, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.UpdateTrackSettings\n */\nexport class UpdateTrackSettings extends Message<UpdateTrackSettings> {\n  /**\n   * @generated from field: repeated string track_sids = 1;\n   */\n  trackSids: string[] = [];\n\n  /**\n   * when true, the track is placed in a paused state, with no new data returned\n   *\n   * @generated from field: bool disabled = 3;\n   */\n  disabled = false;\n\n  /**\n   * deprecated in favor of width & height\n   *\n   * @generated from field: livekit.VideoQuality quality = 4;\n   */\n  quality = VideoQuality.LOW;\n\n  /**\n   * for video, width to receive\n   *\n   * @generated from field: uint32 width = 5;\n   */\n  width = 0;\n\n  /**\n   * for video, height to receive\n   *\n   * @generated from field: uint32 height = 6;\n   */\n  height = 0;\n\n  /**\n   * @generated from field: uint32 fps = 7;\n   */\n  fps = 0;\n\n  /**\n   * subscription priority. 1 being the highest (0 is unset)\n   * when unset, server sill assign priority based on the order of subscription\n   * server will use priority in the following ways:\n   * 1. when subscribed tracks exceed per-participant subscription limit, server will\n   *    pause the lowest priority tracks\n   * 2. when the network is congested, server will assign available bandwidth to\n   *    higher priority tracks first. lowest priority tracks can be paused\n   *\n   * @generated from field: uint32 priority = 8;\n   */\n  priority = 0;\n\n  constructor(data?: PartialMessage<UpdateTrackSettings>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.UpdateTrackSettings\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"track_sids\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 3, name: \"disabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 4, name: \"quality\", kind: \"enum\", T: proto3.getEnumType(VideoQuality) },\n    { no: 5, name: \"width\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 6, name: \"height\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 7, name: \"fps\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 8, name: \"priority\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTrackSettings {\n    return new UpdateTrackSettings().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTrackSettings {\n    return new UpdateTrackSettings().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTrackSettings {\n    return new UpdateTrackSettings().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateTrackSettings | PlainMessage<UpdateTrackSettings> | undefined, b: UpdateTrackSettings | PlainMessage<UpdateTrackSettings> | undefined): boolean {\n    return proto3.util.equals(UpdateTrackSettings, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.UpdateLocalAudioTrack\n */\nexport class UpdateLocalAudioTrack extends Message<UpdateLocalAudioTrack> {\n  /**\n   * @generated from field: string track_sid = 1;\n   */\n  trackSid = \"\";\n\n  /**\n   * @generated from field: repeated livekit.AudioTrackFeature features = 2;\n   */\n  features: AudioTrackFeature[] = [];\n\n  constructor(data?: PartialMessage<UpdateLocalAudioTrack>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.UpdateLocalAudioTrack\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"track_sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"features\", kind: \"enum\", T: proto3.getEnumType(AudioTrackFeature), repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateLocalAudioTrack {\n    return new UpdateLocalAudioTrack().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateLocalAudioTrack {\n    return new UpdateLocalAudioTrack().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateLocalAudioTrack {\n    return new UpdateLocalAudioTrack().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateLocalAudioTrack | PlainMessage<UpdateLocalAudioTrack> | undefined, b: UpdateLocalAudioTrack | PlainMessage<UpdateLocalAudioTrack> | undefined): boolean {\n    return proto3.util.equals(UpdateLocalAudioTrack, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.UpdateLocalVideoTrack\n */\nexport class UpdateLocalVideoTrack extends Message<UpdateLocalVideoTrack> {\n  /**\n   * @generated from field: string track_sid = 1;\n   */\n  trackSid = \"\";\n\n  /**\n   * @generated from field: uint32 width = 2;\n   */\n  width = 0;\n\n  /**\n   * @generated from field: uint32 height = 3;\n   */\n  height = 0;\n\n  constructor(data?: PartialMessage<UpdateLocalVideoTrack>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.UpdateLocalVideoTrack\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"track_sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"width\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"height\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateLocalVideoTrack {\n    return new UpdateLocalVideoTrack().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateLocalVideoTrack {\n    return new UpdateLocalVideoTrack().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateLocalVideoTrack {\n    return new UpdateLocalVideoTrack().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateLocalVideoTrack | PlainMessage<UpdateLocalVideoTrack> | undefined, b: UpdateLocalVideoTrack | PlainMessage<UpdateLocalVideoTrack> | undefined): boolean {\n    return proto3.util.equals(UpdateLocalVideoTrack, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.LeaveRequest\n */\nexport class LeaveRequest extends Message<LeaveRequest> {\n  /**\n   * sent when server initiates the disconnect due to server-restart\n   * indicates clients should attempt full-reconnect sequence\n   * NOTE: `can_reconnect` obsoleted by `action` starting in protocol version 13\n   *\n   * @generated from field: bool can_reconnect = 1;\n   */\n  canReconnect = false;\n\n  /**\n   * @generated from field: livekit.DisconnectReason reason = 2;\n   */\n  reason = DisconnectReason.UNKNOWN_REASON;\n\n  /**\n   * @generated from field: livekit.LeaveRequest.Action action = 3;\n   */\n  action = LeaveRequest_Action.DISCONNECT;\n\n  /**\n   * @generated from field: livekit.RegionSettings regions = 4;\n   */\n  regions?: RegionSettings;\n\n  constructor(data?: PartialMessage<LeaveRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.LeaveRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"can_reconnect\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"reason\", kind: \"enum\", T: proto3.getEnumType(DisconnectReason) },\n    { no: 3, name: \"action\", kind: \"enum\", T: proto3.getEnumType(LeaveRequest_Action) },\n    { no: 4, name: \"regions\", kind: \"message\", T: RegionSettings },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeaveRequest {\n    return new LeaveRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeaveRequest {\n    return new LeaveRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeaveRequest {\n    return new LeaveRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: LeaveRequest | PlainMessage<LeaveRequest> | undefined, b: LeaveRequest | PlainMessage<LeaveRequest> | undefined): boolean {\n    return proto3.util.equals(LeaveRequest, a, b);\n  }\n}\n\n/**\n * indicates action clients should take on receiving this message\n *\n * @generated from enum livekit.LeaveRequest.Action\n */\nexport enum LeaveRequest_Action {\n  /**\n   * should disconnect\n   *\n   * @generated from enum value: DISCONNECT = 0;\n   */\n  DISCONNECT = 0,\n\n  /**\n   * should attempt a resume with `reconnect=1` in join URL\n   *\n   * @generated from enum value: RESUME = 1;\n   */\n  RESUME = 1,\n\n  /**\n   * should attempt a reconnect, i. e. no `reconnect=1`\n   *\n   * @generated from enum value: RECONNECT = 2;\n   */\n  RECONNECT = 2,\n}\n// Retrieve enum metadata with: proto3.getEnumType(LeaveRequest_Action)\nproto3.util.setEnumType(LeaveRequest_Action, \"livekit.LeaveRequest.Action\", [\n  { no: 0, name: \"DISCONNECT\" },\n  { no: 1, name: \"RESUME\" },\n  { no: 2, name: \"RECONNECT\" },\n]);\n\n/**\n * message to indicate published video track dimensions are changing\n *\n * @generated from message livekit.UpdateVideoLayers\n * @deprecated\n */\nexport class UpdateVideoLayers extends Message<UpdateVideoLayers> {\n  /**\n   * @generated from field: string track_sid = 1;\n   */\n  trackSid = \"\";\n\n  /**\n   * @generated from field: repeated livekit.VideoLayer layers = 2;\n   */\n  layers: VideoLayer[] = [];\n\n  constructor(data?: PartialMessage<UpdateVideoLayers>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.UpdateVideoLayers\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"track_sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"layers\", kind: \"message\", T: VideoLayer, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateVideoLayers {\n    return new UpdateVideoLayers().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateVideoLayers {\n    return new UpdateVideoLayers().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateVideoLayers {\n    return new UpdateVideoLayers().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateVideoLayers | PlainMessage<UpdateVideoLayers> | undefined, b: UpdateVideoLayers | PlainMessage<UpdateVideoLayers> | undefined): boolean {\n    return proto3.util.equals(UpdateVideoLayers, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.UpdateParticipantMetadata\n */\nexport class UpdateParticipantMetadata extends Message<UpdateParticipantMetadata> {\n  /**\n   * @generated from field: string metadata = 1;\n   */\n  metadata = \"\";\n\n  /**\n   * @generated from field: string name = 2;\n   */\n  name = \"\";\n\n  /**\n   * attributes to update. it only updates attributes that have been set\n   * to delete attributes, set the value to an empty string\n   *\n   * @generated from field: map<string, string> attributes = 3;\n   */\n  attributes: { [key: string]: string } = {};\n\n  /**\n   * @generated from field: uint32 request_id = 4;\n   */\n  requestId = 0;\n\n  constructor(data?: PartialMessage<UpdateParticipantMetadata>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.UpdateParticipantMetadata\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"metadata\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"attributes\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: {kind: \"scalar\", T: 9 /* ScalarType.STRING */} },\n    { no: 4, name: \"request_id\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateParticipantMetadata {\n    return new UpdateParticipantMetadata().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateParticipantMetadata {\n    return new UpdateParticipantMetadata().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateParticipantMetadata {\n    return new UpdateParticipantMetadata().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: UpdateParticipantMetadata | PlainMessage<UpdateParticipantMetadata> | undefined, b: UpdateParticipantMetadata | PlainMessage<UpdateParticipantMetadata> | undefined): boolean {\n    return proto3.util.equals(UpdateParticipantMetadata, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.ICEServer\n */\nexport class ICEServer extends Message<ICEServer> {\n  /**\n   * @generated from field: repeated string urls = 1;\n   */\n  urls: string[] = [];\n\n  /**\n   * @generated from field: string username = 2;\n   */\n  username = \"\";\n\n  /**\n   * @generated from field: string credential = 3;\n   */\n  credential = \"\";\n\n  constructor(data?: PartialMessage<ICEServer>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ICEServer\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"urls\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 2, name: \"username\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"credential\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ICEServer {\n    return new ICEServer().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ICEServer {\n    return new ICEServer().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ICEServer {\n    return new ICEServer().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ICEServer | PlainMessage<ICEServer> | undefined, b: ICEServer | PlainMessage<ICEServer> | undefined): boolean {\n    return proto3.util.equals(ICEServer, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SpeakersChanged\n */\nexport class SpeakersChanged extends Message<SpeakersChanged> {\n  /**\n   * @generated from field: repeated livekit.SpeakerInfo speakers = 1;\n   */\n  speakers: SpeakerInfo[] = [];\n\n  constructor(data?: PartialMessage<SpeakersChanged>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SpeakersChanged\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"speakers\", kind: \"message\", T: SpeakerInfo, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpeakersChanged {\n    return new SpeakersChanged().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpeakersChanged {\n    return new SpeakersChanged().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpeakersChanged {\n    return new SpeakersChanged().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SpeakersChanged | PlainMessage<SpeakersChanged> | undefined, b: SpeakersChanged | PlainMessage<SpeakersChanged> | undefined): boolean {\n    return proto3.util.equals(SpeakersChanged, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.RoomUpdate\n */\nexport class RoomUpdate extends Message<RoomUpdate> {\n  /**\n   * @generated from field: livekit.Room room = 1;\n   */\n  room?: Room;\n\n  constructor(data?: PartialMessage<RoomUpdate>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.RoomUpdate\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"room\", kind: \"message\", T: Room },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoomUpdate {\n    return new RoomUpdate().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoomUpdate {\n    return new RoomUpdate().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoomUpdate {\n    return new RoomUpdate().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: RoomUpdate | PlainMessage<RoomUpdate> | undefined, b: RoomUpdate | PlainMessage<RoomUpdate> | undefined): boolean {\n    return proto3.util.equals(RoomUpdate, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.ConnectionQualityInfo\n */\nexport class ConnectionQualityInfo extends Message<ConnectionQualityInfo> {\n  /**\n   * @generated from field: string participant_sid = 1;\n   */\n  participantSid = \"\";\n\n  /**\n   * @generated from field: livekit.ConnectionQuality quality = 2;\n   */\n  quality = ConnectionQuality.POOR;\n\n  /**\n   * @generated from field: float score = 3;\n   */\n  score = 0;\n\n  constructor(data?: PartialMessage<ConnectionQualityInfo>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ConnectionQualityInfo\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"participant_sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"quality\", kind: \"enum\", T: proto3.getEnumType(ConnectionQuality) },\n    { no: 3, name: \"score\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectionQualityInfo {\n    return new ConnectionQualityInfo().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectionQualityInfo {\n    return new ConnectionQualityInfo().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectionQualityInfo {\n    return new ConnectionQualityInfo().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ConnectionQualityInfo | PlainMessage<ConnectionQualityInfo> | undefined, b: ConnectionQualityInfo | PlainMessage<ConnectionQualityInfo> | undefined): boolean {\n    return proto3.util.equals(ConnectionQualityInfo, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.ConnectionQualityUpdate\n */\nexport class ConnectionQualityUpdate extends Message<ConnectionQualityUpdate> {\n  /**\n   * @generated from field: repeated livekit.ConnectionQualityInfo updates = 1;\n   */\n  updates: ConnectionQualityInfo[] = [];\n\n  constructor(data?: PartialMessage<ConnectionQualityUpdate>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.ConnectionQualityUpdate\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"updates\", kind: \"message\", T: ConnectionQualityInfo, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectionQualityUpdate {\n    return new ConnectionQualityUpdate().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectionQualityUpdate {\n    return new ConnectionQualityUpdate().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectionQualityUpdate {\n    return new ConnectionQualityUpdate().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ConnectionQualityUpdate | PlainMessage<ConnectionQualityUpdate> | undefined, b: ConnectionQualityUpdate | PlainMessage<ConnectionQualityUpdate> | undefined): boolean {\n    return proto3.util.equals(ConnectionQualityUpdate, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.StreamStateInfo\n */\nexport class StreamStateInfo extends Message<StreamStateInfo> {\n  /**\n   * @generated from field: string participant_sid = 1;\n   */\n  participantSid = \"\";\n\n  /**\n   * @generated from field: string track_sid = 2;\n   */\n  trackSid = \"\";\n\n  /**\n   * @generated from field: livekit.StreamState state = 3;\n   */\n  state = StreamState.ACTIVE;\n\n  constructor(data?: PartialMessage<StreamStateInfo>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.StreamStateInfo\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"participant_sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"track_sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"state\", kind: \"enum\", T: proto3.getEnumType(StreamState) },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamStateInfo {\n    return new StreamStateInfo().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamStateInfo {\n    return new StreamStateInfo().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamStateInfo {\n    return new StreamStateInfo().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: StreamStateInfo | PlainMessage<StreamStateInfo> | undefined, b: StreamStateInfo | PlainMessage<StreamStateInfo> | undefined): boolean {\n    return proto3.util.equals(StreamStateInfo, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.StreamStateUpdate\n */\nexport class StreamStateUpdate extends Message<StreamStateUpdate> {\n  /**\n   * @generated from field: repeated livekit.StreamStateInfo stream_states = 1;\n   */\n  streamStates: StreamStateInfo[] = [];\n\n  constructor(data?: PartialMessage<StreamStateUpdate>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.StreamStateUpdate\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"stream_states\", kind: \"message\", T: StreamStateInfo, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamStateUpdate {\n    return new StreamStateUpdate().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamStateUpdate {\n    return new StreamStateUpdate().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamStateUpdate {\n    return new StreamStateUpdate().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: StreamStateUpdate | PlainMessage<StreamStateUpdate> | undefined, b: StreamStateUpdate | PlainMessage<StreamStateUpdate> | undefined): boolean {\n    return proto3.util.equals(StreamStateUpdate, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SubscribedQuality\n */\nexport class SubscribedQuality extends Message<SubscribedQuality> {\n  /**\n   * @generated from field: livekit.VideoQuality quality = 1;\n   */\n  quality = VideoQuality.LOW;\n\n  /**\n   * @generated from field: bool enabled = 2;\n   */\n  enabled = false;\n\n  constructor(data?: PartialMessage<SubscribedQuality>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SubscribedQuality\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"quality\", kind: \"enum\", T: proto3.getEnumType(VideoQuality) },\n    { no: 2, name: \"enabled\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribedQuality {\n    return new SubscribedQuality().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribedQuality {\n    return new SubscribedQuality().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribedQuality {\n    return new SubscribedQuality().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SubscribedQuality | PlainMessage<SubscribedQuality> | undefined, b: SubscribedQuality | PlainMessage<SubscribedQuality> | undefined): boolean {\n    return proto3.util.equals(SubscribedQuality, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SubscribedCodec\n */\nexport class SubscribedCodec extends Message<SubscribedCodec> {\n  /**\n   * @generated from field: string codec = 1;\n   */\n  codec = \"\";\n\n  /**\n   * @generated from field: repeated livekit.SubscribedQuality qualities = 2;\n   */\n  qualities: SubscribedQuality[] = [];\n\n  constructor(data?: PartialMessage<SubscribedCodec>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SubscribedCodec\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"codec\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"qualities\", kind: \"message\", T: SubscribedQuality, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribedCodec {\n    return new SubscribedCodec().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribedCodec {\n    return new SubscribedCodec().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribedCodec {\n    return new SubscribedCodec().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SubscribedCodec | PlainMessage<SubscribedCodec> | undefined, b: SubscribedCodec | PlainMessage<SubscribedCodec> | undefined): boolean {\n    return proto3.util.equals(SubscribedCodec, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SubscribedQualityUpdate\n */\nexport class SubscribedQualityUpdate extends Message<SubscribedQualityUpdate> {\n  /**\n   * @generated from field: string track_sid = 1;\n   */\n  trackSid = \"\";\n\n  /**\n   * @generated from field: repeated livekit.SubscribedQuality subscribed_qualities = 2;\n   */\n  subscribedQualities: SubscribedQuality[] = [];\n\n  /**\n   * @generated from field: repeated livekit.SubscribedCodec subscribed_codecs = 3;\n   */\n  subscribedCodecs: SubscribedCodec[] = [];\n\n  constructor(data?: PartialMessage<SubscribedQualityUpdate>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SubscribedQualityUpdate\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"track_sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"subscribed_qualities\", kind: \"message\", T: SubscribedQuality, repeated: true },\n    { no: 3, name: \"subscribed_codecs\", kind: \"message\", T: SubscribedCodec, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribedQualityUpdate {\n    return new SubscribedQualityUpdate().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribedQualityUpdate {\n    return new SubscribedQualityUpdate().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribedQualityUpdate {\n    return new SubscribedQualityUpdate().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SubscribedQualityUpdate | PlainMessage<SubscribedQualityUpdate> | undefined, b: SubscribedQualityUpdate | PlainMessage<SubscribedQualityUpdate> | undefined): boolean {\n    return proto3.util.equals(SubscribedQualityUpdate, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.TrackPermission\n */\nexport class TrackPermission extends Message<TrackPermission> {\n  /**\n   * permission could be granted either by participant sid or identity\n   *\n   * @generated from field: string participant_sid = 1;\n   */\n  participantSid = \"\";\n\n  /**\n   * @generated from field: bool all_tracks = 2;\n   */\n  allTracks = false;\n\n  /**\n   * @generated from field: repeated string track_sids = 3;\n   */\n  trackSids: string[] = [];\n\n  /**\n   * @generated from field: string participant_identity = 4;\n   */\n  participantIdentity = \"\";\n\n  constructor(data?: PartialMessage<TrackPermission>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.TrackPermission\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"participant_sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"all_tracks\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 3, name: \"track_sids\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 4, name: \"participant_identity\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackPermission {\n    return new TrackPermission().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackPermission {\n    return new TrackPermission().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackPermission {\n    return new TrackPermission().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: TrackPermission | PlainMessage<TrackPermission> | undefined, b: TrackPermission | PlainMessage<TrackPermission> | undefined): boolean {\n    return proto3.util.equals(TrackPermission, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SubscriptionPermission\n */\nexport class SubscriptionPermission extends Message<SubscriptionPermission> {\n  /**\n   * @generated from field: bool all_participants = 1;\n   */\n  allParticipants = false;\n\n  /**\n   * @generated from field: repeated livekit.TrackPermission track_permissions = 2;\n   */\n  trackPermissions: TrackPermission[] = [];\n\n  constructor(data?: PartialMessage<SubscriptionPermission>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SubscriptionPermission\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"all_participants\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 2, name: \"track_permissions\", kind: \"message\", T: TrackPermission, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscriptionPermission {\n    return new SubscriptionPermission().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscriptionPermission {\n    return new SubscriptionPermission().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscriptionPermission {\n    return new SubscriptionPermission().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SubscriptionPermission | PlainMessage<SubscriptionPermission> | undefined, b: SubscriptionPermission | PlainMessage<SubscriptionPermission> | undefined): boolean {\n    return proto3.util.equals(SubscriptionPermission, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SubscriptionPermissionUpdate\n */\nexport class SubscriptionPermissionUpdate extends Message<SubscriptionPermissionUpdate> {\n  /**\n   * @generated from field: string participant_sid = 1;\n   */\n  participantSid = \"\";\n\n  /**\n   * @generated from field: string track_sid = 2;\n   */\n  trackSid = \"\";\n\n  /**\n   * @generated from field: bool allowed = 3;\n   */\n  allowed = false;\n\n  constructor(data?: PartialMessage<SubscriptionPermissionUpdate>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SubscriptionPermissionUpdate\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"participant_sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"track_sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"allowed\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscriptionPermissionUpdate {\n    return new SubscriptionPermissionUpdate().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscriptionPermissionUpdate {\n    return new SubscriptionPermissionUpdate().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscriptionPermissionUpdate {\n    return new SubscriptionPermissionUpdate().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SubscriptionPermissionUpdate | PlainMessage<SubscriptionPermissionUpdate> | undefined, b: SubscriptionPermissionUpdate | PlainMessage<SubscriptionPermissionUpdate> | undefined): boolean {\n    return proto3.util.equals(SubscriptionPermissionUpdate, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SyncState\n */\nexport class SyncState extends Message<SyncState> {\n  /**\n   * last subscribe answer before reconnecting\n   *\n   * @generated from field: livekit.SessionDescription answer = 1;\n   */\n  answer?: SessionDescription;\n\n  /**\n   * @generated from field: livekit.UpdateSubscription subscription = 2;\n   */\n  subscription?: UpdateSubscription;\n\n  /**\n   * @generated from field: repeated livekit.TrackPublishedResponse publish_tracks = 3;\n   */\n  publishTracks: TrackPublishedResponse[] = [];\n\n  /**\n   * @generated from field: repeated livekit.DataChannelInfo data_channels = 4;\n   */\n  dataChannels: DataChannelInfo[] = [];\n\n  /**\n   * last received server side offer before reconnecting\n   *\n   * @generated from field: livekit.SessionDescription offer = 5;\n   */\n  offer?: SessionDescription;\n\n  /**\n   * @generated from field: repeated string track_sids_disabled = 6;\n   */\n  trackSidsDisabled: string[] = [];\n\n  constructor(data?: PartialMessage<SyncState>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SyncState\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"answer\", kind: \"message\", T: SessionDescription },\n    { no: 2, name: \"subscription\", kind: \"message\", T: UpdateSubscription },\n    { no: 3, name: \"publish_tracks\", kind: \"message\", T: TrackPublishedResponse, repeated: true },\n    { no: 4, name: \"data_channels\", kind: \"message\", T: DataChannelInfo, repeated: true },\n    { no: 5, name: \"offer\", kind: \"message\", T: SessionDescription },\n    { no: 6, name: \"track_sids_disabled\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncState {\n    return new SyncState().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncState {\n    return new SyncState().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncState {\n    return new SyncState().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SyncState | PlainMessage<SyncState> | undefined, b: SyncState | PlainMessage<SyncState> | undefined): boolean {\n    return proto3.util.equals(SyncState, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.DataChannelInfo\n */\nexport class DataChannelInfo extends Message<DataChannelInfo> {\n  /**\n   * @generated from field: string label = 1;\n   */\n  label = \"\";\n\n  /**\n   * @generated from field: uint32 id = 2;\n   */\n  id = 0;\n\n  /**\n   * @generated from field: livekit.SignalTarget target = 3;\n   */\n  target = SignalTarget.PUBLISHER;\n\n  constructor(data?: PartialMessage<DataChannelInfo>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.DataChannelInfo\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"label\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"id\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"target\", kind: \"enum\", T: proto3.getEnumType(SignalTarget) },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataChannelInfo {\n    return new DataChannelInfo().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataChannelInfo {\n    return new DataChannelInfo().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataChannelInfo {\n    return new DataChannelInfo().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: DataChannelInfo | PlainMessage<DataChannelInfo> | undefined, b: DataChannelInfo | PlainMessage<DataChannelInfo> | undefined): boolean {\n    return proto3.util.equals(DataChannelInfo, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SimulateScenario\n */\nexport class SimulateScenario extends Message<SimulateScenario> {\n  /**\n   * @generated from oneof livekit.SimulateScenario.scenario\n   */\n  scenario: {\n    /**\n     * simulate N seconds of speaker activity\n     *\n     * @generated from field: int32 speaker_update = 1;\n     */\n    value: number;\n    case: \"speakerUpdate\";\n  } | {\n    /**\n     * simulate local node failure\n     *\n     * @generated from field: bool node_failure = 2;\n     */\n    value: boolean;\n    case: \"nodeFailure\";\n  } | {\n    /**\n     * simulate migration\n     *\n     * @generated from field: bool migration = 3;\n     */\n    value: boolean;\n    case: \"migration\";\n  } | {\n    /**\n     * server to send leave\n     *\n     * @generated from field: bool server_leave = 4;\n     */\n    value: boolean;\n    case: \"serverLeave\";\n  } | {\n    /**\n     * switch candidate protocol to tcp\n     *\n     * @generated from field: livekit.CandidateProtocol switch_candidate_protocol = 5;\n     */\n    value: CandidateProtocol;\n    case: \"switchCandidateProtocol\";\n  } | {\n    /**\n     * maximum bandwidth for subscribers, in bps\n     * when zero, clears artificial bandwidth limit\n     *\n     * @generated from field: int64 subscriber_bandwidth = 6;\n     */\n    value: bigint;\n    case: \"subscriberBandwidth\";\n  } | {\n    /**\n     * disconnect signal on resume\n     *\n     * @generated from field: bool disconnect_signal_on_resume = 7;\n     */\n    value: boolean;\n    case: \"disconnectSignalOnResume\";\n  } | {\n    /**\n     * disconnect signal on resume before sending any messages from server\n     *\n     * @generated from field: bool disconnect_signal_on_resume_no_messages = 8;\n     */\n    value: boolean;\n    case: \"disconnectSignalOnResumeNoMessages\";\n  } | {\n    /**\n     * full reconnect leave request\n     *\n     * @generated from field: bool leave_request_full_reconnect = 9;\n     */\n    value: boolean;\n    case: \"leaveRequestFullReconnect\";\n  } | { case: undefined; value?: undefined } = { case: undefined };\n\n  constructor(data?: PartialMessage<SimulateScenario>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SimulateScenario\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"speaker_update\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, oneof: \"scenario\" },\n    { no: 2, name: \"node_failure\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"scenario\" },\n    { no: 3, name: \"migration\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"scenario\" },\n    { no: 4, name: \"server_leave\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"scenario\" },\n    { no: 5, name: \"switch_candidate_protocol\", kind: \"enum\", T: proto3.getEnumType(CandidateProtocol), oneof: \"scenario\" },\n    { no: 6, name: \"subscriber_bandwidth\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */, oneof: \"scenario\" },\n    { no: 7, name: \"disconnect_signal_on_resume\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"scenario\" },\n    { no: 8, name: \"disconnect_signal_on_resume_no_messages\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"scenario\" },\n    { no: 9, name: \"leave_request_full_reconnect\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"scenario\" },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimulateScenario {\n    return new SimulateScenario().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimulateScenario {\n    return new SimulateScenario().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimulateScenario {\n    return new SimulateScenario().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SimulateScenario | PlainMessage<SimulateScenario> | undefined, b: SimulateScenario | PlainMessage<SimulateScenario> | undefined): boolean {\n    return proto3.util.equals(SimulateScenario, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.Ping\n */\nexport class Ping extends Message<Ping> {\n  /**\n   * @generated from field: int64 timestamp = 1;\n   */\n  timestamp = protoInt64.zero;\n\n  /**\n   * rtt in milliseconds calculated by client\n   *\n   * @generated from field: int64 rtt = 2;\n   */\n  rtt = protoInt64.zero;\n\n  constructor(data?: PartialMessage<Ping>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.Ping\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"timestamp\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 2, name: \"rtt\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Ping {\n    return new Ping().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Ping {\n    return new Ping().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Ping {\n    return new Ping().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Ping | PlainMessage<Ping> | undefined, b: Ping | PlainMessage<Ping> | undefined): boolean {\n    return proto3.util.equals(Ping, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.Pong\n */\nexport class Pong extends Message<Pong> {\n  /**\n   * timestamp field of last received ping request\n   *\n   * @generated from field: int64 last_ping_timestamp = 1;\n   */\n  lastPingTimestamp = protoInt64.zero;\n\n  /**\n   * @generated from field: int64 timestamp = 2;\n   */\n  timestamp = protoInt64.zero;\n\n  constructor(data?: PartialMessage<Pong>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.Pong\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"last_ping_timestamp\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 2, name: \"timestamp\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pong {\n    return new Pong().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pong {\n    return new Pong().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pong {\n    return new Pong().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Pong | PlainMessage<Pong> | undefined, b: Pong | PlainMessage<Pong> | undefined): boolean {\n    return proto3.util.equals(Pong, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.RegionSettings\n */\nexport class RegionSettings extends Message<RegionSettings> {\n  /**\n   * @generated from field: repeated livekit.RegionInfo regions = 1;\n   */\n  regions: RegionInfo[] = [];\n\n  constructor(data?: PartialMessage<RegionSettings>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.RegionSettings\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"regions\", kind: \"message\", T: RegionInfo, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegionSettings {\n    return new RegionSettings().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegionSettings {\n    return new RegionSettings().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegionSettings {\n    return new RegionSettings().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: RegionSettings | PlainMessage<RegionSettings> | undefined, b: RegionSettings | PlainMessage<RegionSettings> | undefined): boolean {\n    return proto3.util.equals(RegionSettings, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.RegionInfo\n */\nexport class RegionInfo extends Message<RegionInfo> {\n  /**\n   * @generated from field: string region = 1;\n   */\n  region = \"\";\n\n  /**\n   * @generated from field: string url = 2;\n   */\n  url = \"\";\n\n  /**\n   * @generated from field: int64 distance = 3;\n   */\n  distance = protoInt64.zero;\n\n  constructor(data?: PartialMessage<RegionInfo>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.RegionInfo\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"region\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"distance\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegionInfo {\n    return new RegionInfo().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegionInfo {\n    return new RegionInfo().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegionInfo {\n    return new RegionInfo().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: RegionInfo | PlainMessage<RegionInfo> | undefined, b: RegionInfo | PlainMessage<RegionInfo> | undefined): boolean {\n    return proto3.util.equals(RegionInfo, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.SubscriptionResponse\n */\nexport class SubscriptionResponse extends Message<SubscriptionResponse> {\n  /**\n   * @generated from field: string track_sid = 1;\n   */\n  trackSid = \"\";\n\n  /**\n   * @generated from field: livekit.SubscriptionError err = 2;\n   */\n  err = SubscriptionError.SE_UNKNOWN;\n\n  constructor(data?: PartialMessage<SubscriptionResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.SubscriptionResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"track_sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"err\", kind: \"enum\", T: proto3.getEnumType(SubscriptionError) },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscriptionResponse {\n    return new SubscriptionResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscriptionResponse {\n    return new SubscriptionResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscriptionResponse {\n    return new SubscriptionResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: SubscriptionResponse | PlainMessage<SubscriptionResponse> | undefined, b: SubscriptionResponse | PlainMessage<SubscriptionResponse> | undefined): boolean {\n    return proto3.util.equals(SubscriptionResponse, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.RequestResponse\n */\nexport class RequestResponse extends Message<RequestResponse> {\n  /**\n   * @generated from field: uint32 request_id = 1;\n   */\n  requestId = 0;\n\n  /**\n   * @generated from field: livekit.RequestResponse.Reason reason = 2;\n   */\n  reason = RequestResponse_Reason.OK;\n\n  /**\n   * @generated from field: string message = 3;\n   */\n  message = \"\";\n\n  constructor(data?: PartialMessage<RequestResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.RequestResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"request_id\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"reason\", kind: \"enum\", T: proto3.getEnumType(RequestResponse_Reason) },\n    { no: 3, name: \"message\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestResponse {\n    return new RequestResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestResponse {\n    return new RequestResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestResponse {\n    return new RequestResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: RequestResponse | PlainMessage<RequestResponse> | undefined, b: RequestResponse | PlainMessage<RequestResponse> | undefined): boolean {\n    return proto3.util.equals(RequestResponse, a, b);\n  }\n}\n\n/**\n * @generated from enum livekit.RequestResponse.Reason\n */\nexport enum RequestResponse_Reason {\n  /**\n   * @generated from enum value: OK = 0;\n   */\n  OK = 0,\n\n  /**\n   * @generated from enum value: NOT_FOUND = 1;\n   */\n  NOT_FOUND = 1,\n\n  /**\n   * @generated from enum value: NOT_ALLOWED = 2;\n   */\n  NOT_ALLOWED = 2,\n\n  /**\n   * @generated from enum value: LIMIT_EXCEEDED = 3;\n   */\n  LIMIT_EXCEEDED = 3,\n}\n// Retrieve enum metadata with: proto3.getEnumType(RequestResponse_Reason)\nproto3.util.setEnumType(RequestResponse_Reason, \"livekit.RequestResponse.Reason\", [\n  { no: 0, name: \"OK\" },\n  { no: 1, name: \"NOT_FOUND\" },\n  { no: 2, name: \"NOT_ALLOWED\" },\n  { no: 3, name: \"LIMIT_EXCEEDED\" },\n]);\n\n/**\n * @generated from message livekit.TrackSubscribed\n */\nexport class TrackSubscribed extends Message<TrackSubscribed> {\n  /**\n   * @generated from field: string track_sid = 1;\n   */\n  trackSid = \"\";\n\n  constructor(data?: PartialMessage<TrackSubscribed>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.TrackSubscribed\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"track_sid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrackSubscribed {\n    return new TrackSubscribed().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrackSubscribed {\n    return new TrackSubscribed().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrackSubscribed {\n    return new TrackSubscribed().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: TrackSubscribed | PlainMessage<TrackSubscribed> | undefined, b: TrackSubscribed | PlainMessage<TrackSubscribed> | undefined): boolean {\n    return proto3.util.equals(TrackSubscribed, a, b);\n  }\n}\n\n"],"mappings":"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","names":["SignalTarget","StreamState","CandidateProtocol","LeaveRequest_Action","RequestResponse_Reason"]}