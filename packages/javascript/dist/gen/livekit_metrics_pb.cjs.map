{"version":3,"sources":["../../src/gen/livekit_metrics_pb.ts"],"sourcesContent":["// @generated by protoc-gen-es v1.10.0 with parameter \"target=ts\"\n// @generated from file livekit_metrics.proto (package livekit, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from \"@bufbuild/protobuf\";\nimport { Message, proto3, protoInt64, Timestamp } from \"@bufbuild/protobuf\";\n\n/**\n * index from [0: MAX_LABEL_PREDEFINED_MAX_VALUE) are for predefined labels (`MetricLabel`)\n *\n * @generated from enum livekit.MetricLabel\n */\nexport enum MetricLabel {\n  /**\n   * time to first token from LLM\n   *\n   * @generated from enum value: AGENTS_LLM_TTFT = 0;\n   */\n  AGENTS_LLM_TTFT = 0,\n\n  /**\n   * time to final transcription\n   *\n   * @generated from enum value: AGENTS_STT_TTFT = 1;\n   */\n  AGENTS_STT_TTFT = 1,\n\n  /**\n   * time to first byte\n   *\n   * @generated from enum value: AGENTS_TTS_TTFB = 2;\n   */\n  AGENTS_TTS_TTFB = 2,\n\n  /**\n   * Number of video freezes\n   *\n   * @generated from enum value: CLIENT_VIDEO_SUBSCRIBER_FREEZE_COUNT = 3;\n   */\n  CLIENT_VIDEO_SUBSCRIBER_FREEZE_COUNT = 3,\n\n  /**\n   * total duration of freezes\n   *\n   * @generated from enum value: CLIENT_VIDEO_SUBSCRIBER_TOTAL_FREEZE_DURATION = 4;\n   */\n  CLIENT_VIDEO_SUBSCRIBER_TOTAL_FREEZE_DURATION = 4,\n\n  /**\n   * number of video pauses\n   *\n   * @generated from enum value: CLIENT_VIDEO_SUBSCRIBER_PAUSE_COUNT = 5;\n   */\n  CLIENT_VIDEO_SUBSCRIBER_PAUSE_COUNT = 5,\n\n  /**\n   * total duration of pauses\n   *\n   * @generated from enum value: CLIENT_VIDEO_SUBSCRIBER_TOTAL_PAUSES_DURATION = 6;\n   */\n  CLIENT_VIDEO_SUBSCRIBER_TOTAL_PAUSES_DURATION = 6,\n\n  /**\n   * number of concealed (synthesized) audio samples\n   *\n   * @generated from enum value: CLIENT_AUDIO_SUBSCRIBER_CONCEALED_SAMPLES = 7;\n   */\n  CLIENT_AUDIO_SUBSCRIBER_CONCEALED_SAMPLES = 7,\n\n  /**\n   * number of silent concealed samples\n   *\n   * @generated from enum value: CLIENT_AUDIO_SUBSCRIBER_SILENT_CONCEALED_SAMPLES = 8;\n   */\n  CLIENT_AUDIO_SUBSCRIBER_SILENT_CONCEALED_SAMPLES = 8,\n\n  /**\n   * number of concealment events\n   *\n   * @generated from enum value: CLIENT_AUDIO_SUBSCRIBER_CONCEALMENT_EVENTS = 9;\n   */\n  CLIENT_AUDIO_SUBSCRIBER_CONCEALMENT_EVENTS = 9,\n\n  /**\n   * number of interruptions\n   *\n   * @generated from enum value: CLIENT_AUDIO_SUBSCRIBER_INTERRUPTION_COUNT = 10;\n   */\n  CLIENT_AUDIO_SUBSCRIBER_INTERRUPTION_COUNT = 10,\n\n  /**\n   * total duration of interruptions\n   *\n   * @generated from enum value: CLIENT_AUDIO_SUBSCRIBER_TOTAL_INTERRUPTION_DURATION = 11;\n   */\n  CLIENT_AUDIO_SUBSCRIBER_TOTAL_INTERRUPTION_DURATION = 11,\n\n  /**\n   * total time spent in jitter buffer\n   *\n   * @generated from enum value: CLIENT_SUBSCRIBER_JITTER_BUFFER_DELAY = 12;\n   */\n  CLIENT_SUBSCRIBER_JITTER_BUFFER_DELAY = 12,\n\n  /**\n   * total time spent in jitter buffer\n   *\n   * @generated from enum value: CLIENT_SUBSCRIBER_JITTER_BUFFER_EMITTED_COUNT = 13;\n   */\n  CLIENT_SUBSCRIBER_JITTER_BUFFER_EMITTED_COUNT = 13,\n\n  /**\n   * total duration spent in bandwidth quality limitation\n   *\n   * @generated from enum value: CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_BANDWIDTH = 14;\n   */\n  CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_BANDWIDTH = 14,\n\n  /**\n   * total duration spent in cpu quality limitation\n   *\n   * @generated from enum value: CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_CPU = 15;\n   */\n  CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_CPU = 15,\n\n  /**\n   * total duration spent in other quality limitation\n   *\n   * @generated from enum value: CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_OTHER = 16;\n   */\n  CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_OTHER = 16,\n\n  /**\n   * Publisher RTT (participant -> server)\n   *\n   * @generated from enum value: PUBLISHER_RTT = 17;\n   */\n  PUBLISHER_RTT = 17,\n\n  /**\n   * RTT between publisher node and subscriber node (could involve intermedia node(s))\n   *\n   * @generated from enum value: SERVER_MESH_RTT = 18;\n   */\n  SERVER_MESH_RTT = 18,\n\n  /**\n   * Subscribe RTT (server -> participant)\n   *\n   * @generated from enum value: SUBSCRIBER_RTT = 19;\n   */\n  SUBSCRIBER_RTT = 19,\n\n  /**\n   * @generated from enum value: METRIC_LABEL_PREDEFINED_MAX_VALUE = 4096;\n   */\n  METRIC_LABEL_PREDEFINED_MAX_VALUE = 4096,\n}\n// Retrieve enum metadata with: proto3.getEnumType(MetricLabel)\nproto3.util.setEnumType(MetricLabel, \"livekit.MetricLabel\", [\n  { no: 0, name: \"AGENTS_LLM_TTFT\" },\n  { no: 1, name: \"AGENTS_STT_TTFT\" },\n  { no: 2, name: \"AGENTS_TTS_TTFB\" },\n  { no: 3, name: \"CLIENT_VIDEO_SUBSCRIBER_FREEZE_COUNT\" },\n  { no: 4, name: \"CLIENT_VIDEO_SUBSCRIBER_TOTAL_FREEZE_DURATION\" },\n  { no: 5, name: \"CLIENT_VIDEO_SUBSCRIBER_PAUSE_COUNT\" },\n  { no: 6, name: \"CLIENT_VIDEO_SUBSCRIBER_TOTAL_PAUSES_DURATION\" },\n  { no: 7, name: \"CLIENT_AUDIO_SUBSCRIBER_CONCEALED_SAMPLES\" },\n  { no: 8, name: \"CLIENT_AUDIO_SUBSCRIBER_SILENT_CONCEALED_SAMPLES\" },\n  { no: 9, name: \"CLIENT_AUDIO_SUBSCRIBER_CONCEALMENT_EVENTS\" },\n  { no: 10, name: \"CLIENT_AUDIO_SUBSCRIBER_INTERRUPTION_COUNT\" },\n  { no: 11, name: \"CLIENT_AUDIO_SUBSCRIBER_TOTAL_INTERRUPTION_DURATION\" },\n  { no: 12, name: \"CLIENT_SUBSCRIBER_JITTER_BUFFER_DELAY\" },\n  { no: 13, name: \"CLIENT_SUBSCRIBER_JITTER_BUFFER_EMITTED_COUNT\" },\n  { no: 14, name: \"CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_BANDWIDTH\" },\n  { no: 15, name: \"CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_CPU\" },\n  { no: 16, name: \"CLIENT_VIDEO_PUBLISHER_QUALITY_LIMITATION_DURATION_OTHER\" },\n  { no: 17, name: \"PUBLISHER_RTT\" },\n  { no: 18, name: \"SERVER_MESH_RTT\" },\n  { no: 19, name: \"SUBSCRIBER_RTT\" },\n  { no: 4096, name: \"METRIC_LABEL_PREDEFINED_MAX_VALUE\" },\n]);\n\n/**\n * @generated from message livekit.MetricsBatch\n */\nexport class MetricsBatch extends Message<MetricsBatch> {\n  /**\n   * time at which this batch is sent based on a monotonic clock (millisecond resolution)\n   *\n   * @generated from field: int64 timestamp_ms = 1;\n   */\n  timestampMs = protoInt64.zero;\n\n  /**\n   * @generated from field: google.protobuf.Timestamp normalized_timestamp = 2;\n   */\n  normalizedTimestamp?: Timestamp;\n\n  /**\n   * To avoid repeating string values, we store them in a separate list and reference them by index\n   * This is useful for storing participant identities, track names, etc.\n   * There is also a predefined list of labels that can be used to reference common metrics.\n   * They have reserved indices from 0 to (METRIC_LABEL_PREDEFINED_MAX_VALUE - 1).\n   * Indexes pointing at str_data should start from METRIC_LABEL_PREDEFINED_MAX_VALUE, \n   * such that str_data[0] == index of METRIC_LABEL_PREDEFINED_MAX_VALUE.\n   *\n   * @generated from field: repeated string str_data = 3;\n   */\n  strData: string[] = [];\n\n  /**\n   * @generated from field: repeated livekit.TimeSeriesMetric time_series = 4;\n   */\n  timeSeries: TimeSeriesMetric[] = [];\n\n  /**\n   * @generated from field: repeated livekit.EventMetric events = 5;\n   */\n  events: EventMetric[] = [];\n\n  constructor(data?: PartialMessage<MetricsBatch>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.MetricsBatch\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"timestamp_ms\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 2, name: \"normalized_timestamp\", kind: \"message\", T: Timestamp },\n    { no: 3, name: \"str_data\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 4, name: \"time_series\", kind: \"message\", T: TimeSeriesMetric, repeated: true },\n    { no: 5, name: \"events\", kind: \"message\", T: EventMetric, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsBatch {\n    return new MetricsBatch().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsBatch {\n    return new MetricsBatch().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsBatch {\n    return new MetricsBatch().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: MetricsBatch | PlainMessage<MetricsBatch> | undefined, b: MetricsBatch | PlainMessage<MetricsBatch> | undefined): boolean {\n    return proto3.util.equals(MetricsBatch, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.TimeSeriesMetric\n */\nexport class TimeSeriesMetric extends Message<TimeSeriesMetric> {\n  /**\n   * Metric name e.g \"speech_probablity\". The string value is not directly stored in the message, but referenced by index\n   * in the `str_data` field of `MetricsBatch`\n   *\n   * @generated from field: uint32 label = 1;\n   */\n  label = 0;\n\n  /**\n   * index into `str_data`\n   *\n   * @generated from field: uint32 participant_identity = 2;\n   */\n  participantIdentity = 0;\n\n  /**\n   * index into `str_data`\n   *\n   * @generated from field: uint32 track_sid = 3;\n   */\n  trackSid = 0;\n\n  /**\n   * @generated from field: repeated livekit.MetricSample samples = 4;\n   */\n  samples: MetricSample[] = [];\n\n  /**\n   * index into 'str_data'\n   *\n   * @generated from field: uint32 rid = 5;\n   */\n  rid = 0;\n\n  constructor(data?: PartialMessage<TimeSeriesMetric>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.TimeSeriesMetric\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"label\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"participant_identity\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"track_sid\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"samples\", kind: \"message\", T: MetricSample, repeated: true },\n    { no: 5, name: \"rid\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeSeriesMetric {\n    return new TimeSeriesMetric().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeSeriesMetric {\n    return new TimeSeriesMetric().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeSeriesMetric {\n    return new TimeSeriesMetric().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: TimeSeriesMetric | PlainMessage<TimeSeriesMetric> | undefined, b: TimeSeriesMetric | PlainMessage<TimeSeriesMetric> | undefined): boolean {\n    return proto3.util.equals(TimeSeriesMetric, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.MetricSample\n */\nexport class MetricSample extends Message<MetricSample> {\n  /**\n   * time of metric based on a monotonic clock (in milliseconds)\n   *\n   * @generated from field: int64 timestamp_ms = 1;\n   */\n  timestampMs = protoInt64.zero;\n\n  /**\n   * @generated from field: google.protobuf.Timestamp normalized_timestamp = 2;\n   */\n  normalizedTimestamp?: Timestamp;\n\n  /**\n   * @generated from field: float value = 3;\n   */\n  value = 0;\n\n  constructor(data?: PartialMessage<MetricSample>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.MetricSample\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"timestamp_ms\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 2, name: \"normalized_timestamp\", kind: \"message\", T: Timestamp },\n    { no: 3, name: \"value\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricSample {\n    return new MetricSample().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricSample {\n    return new MetricSample().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricSample {\n    return new MetricSample().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: MetricSample | PlainMessage<MetricSample> | undefined, b: MetricSample | PlainMessage<MetricSample> | undefined): boolean {\n    return proto3.util.equals(MetricSample, a, b);\n  }\n}\n\n/**\n * @generated from message livekit.EventMetric\n */\nexport class EventMetric extends Message<EventMetric> {\n  /**\n   * @generated from field: uint32 label = 1;\n   */\n  label = 0;\n\n  /**\n   * index into `str_data`\n   *\n   * @generated from field: uint32 participant_identity = 2;\n   */\n  participantIdentity = 0;\n\n  /**\n   * index into `str_data`\n   *\n   * @generated from field: uint32 track_sid = 3;\n   */\n  trackSid = 0;\n\n  /**\n   * start time of event based on a monotonic clock (in milliseconds)\n   *\n   * @generated from field: int64 start_timestamp_ms = 4;\n   */\n  startTimestampMs = protoInt64.zero;\n\n  /**\n   * end time of event based on a monotonic clock (in milliseconds), if needed\n   *\n   * @generated from field: optional int64 end_timestamp_ms = 5;\n   */\n  endTimestampMs?: bigint;\n\n  /**\n   * @generated from field: google.protobuf.Timestamp normalized_start_timestamp = 6;\n   */\n  normalizedStartTimestamp?: Timestamp;\n\n  /**\n   * @generated from field: optional google.protobuf.Timestamp normalized_end_timestamp = 7;\n   */\n  normalizedEndTimestamp?: Timestamp;\n\n  /**\n   * @generated from field: string metadata = 8;\n   */\n  metadata = \"\";\n\n  /**\n   * index into 'str_data'\n   *\n   * @generated from field: uint32 rid = 9;\n   */\n  rid = 0;\n\n  constructor(data?: PartialMessage<EventMetric>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"livekit.EventMetric\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"label\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 2, name: \"participant_identity\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 3, name: \"track_sid\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n    { no: 4, name: \"start_timestamp_ms\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 5, name: \"end_timestamp_ms\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */, opt: true },\n    { no: 6, name: \"normalized_start_timestamp\", kind: \"message\", T: Timestamp },\n    { no: 7, name: \"normalized_end_timestamp\", kind: \"message\", T: Timestamp, opt: true },\n    { no: 8, name: \"metadata\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 9, name: \"rid\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventMetric {\n    return new EventMetric().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventMetric {\n    return new EventMetric().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventMetric {\n    return new EventMetric().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: EventMetric | PlainMessage<EventMetric> | undefined, b: EventMetric | PlainMessage<EventMetric> | undefined): boolean {\n    return proto3.util.equals(EventMetric, a, b);\n  }\n}\n\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,sBAAuD;AAOhD,IAAK,cAAL,kBAAKA,iBAAL;AAML,EAAAA,0BAAA,qBAAkB,KAAlB;AAOA,EAAAA,0BAAA,qBAAkB,KAAlB;AAOA,EAAAA,0BAAA,qBAAkB,KAAlB;AAOA,EAAAA,0BAAA,0CAAuC,KAAvC;AAOA,EAAAA,0BAAA,mDAAgD,KAAhD;AAOA,EAAAA,0BAAA,yCAAsC,KAAtC;AAOA,EAAAA,0BAAA,mDAAgD,KAAhD;AAOA,EAAAA,0BAAA,+CAA4C,KAA5C;AAOA,EAAAA,0BAAA,sDAAmD,KAAnD;AAOA,EAAAA,0BAAA,gDAA6C,KAA7C;AAOA,EAAAA,0BAAA,gDAA6C,MAA7C;AAOA,EAAAA,0BAAA,yDAAsD,MAAtD;AAOA,EAAAA,0BAAA,2CAAwC,MAAxC;AAOA,EAAAA,0BAAA,mDAAgD,MAAhD;AAOA,EAAAA,0BAAA,kEAA+D,MAA/D;AAOA,EAAAA,0BAAA,4DAAyD,MAAzD;AAOA,EAAAA,0BAAA,8DAA2D,MAA3D;AAOA,EAAAA,0BAAA,mBAAgB,MAAhB;AAOA,EAAAA,0BAAA,qBAAkB,MAAlB;AAOA,EAAAA,0BAAA,oBAAiB,MAAjB;AAKA,EAAAA,0BAAA,uCAAoC,QAApC;AAhJU,SAAAA;AAAA,GAAA;AAmJZ,uBAAO,KAAK,YAAY,aAAa,uBAAuB;AAAA,EAC1D,EAAE,IAAI,GAAG,MAAM,kBAAkB;AAAA,EACjC,EAAE,IAAI,GAAG,MAAM,kBAAkB;AAAA,EACjC,EAAE,IAAI,GAAG,MAAM,kBAAkB;AAAA,EACjC,EAAE,IAAI,GAAG,MAAM,uCAAuC;AAAA,EACtD,EAAE,IAAI,GAAG,MAAM,gDAAgD;AAAA,EAC/D,EAAE,IAAI,GAAG,MAAM,sCAAsC;AAAA,EACrD,EAAE,IAAI,GAAG,MAAM,gDAAgD;AAAA,EAC/D,EAAE,IAAI,GAAG,MAAM,4CAA4C;AAAA,EAC3D,EAAE,IAAI,GAAG,MAAM,mDAAmD;AAAA,EAClE,EAAE,IAAI,GAAG,MAAM,6CAA6C;AAAA,EAC5D,EAAE,IAAI,IAAI,MAAM,6CAA6C;AAAA,EAC7D,EAAE,IAAI,IAAI,MAAM,sDAAsD;AAAA,EACtE,EAAE,IAAI,IAAI,MAAM,wCAAwC;AAAA,EACxD,EAAE,IAAI,IAAI,MAAM,gDAAgD;AAAA,EAChE,EAAE,IAAI,IAAI,MAAM,+DAA+D;AAAA,EAC/E,EAAE,IAAI,IAAI,MAAM,yDAAyD;AAAA,EACzE,EAAE,IAAI,IAAI,MAAM,2DAA2D;AAAA,EAC3E,EAAE,IAAI,IAAI,MAAM,gBAAgB;AAAA,EAChC,EAAE,IAAI,IAAI,MAAM,kBAAkB;AAAA,EAClC,EAAE,IAAI,IAAI,MAAM,iBAAiB;AAAA,EACjC,EAAE,IAAI,MAAM,MAAM,oCAAoC;AACxD,CAAC;AAKM,MAAM,gBAAN,MAAM,sBAAqB,wBAAsB;AAAA,EAmCtD,YAAY,MAAqC;AAC/C,UAAM;AA9BR;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAc,2BAAW;AAiBzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAoB,CAAC;AAKrB;AAAA;AAAA;AAAA,sBAAiC,CAAC;AAKlC;AAAA;AAAA;AAAA,kBAAwB,CAAC;AAIvB,2BAAO,KAAK,YAAY,MAAM,IAAI;AAAA,EACpC;AAAA,EAYA,OAAO,WAAW,OAAmB,SAAoD;AACvF,WAAO,IAAI,cAAa,EAAE,WAAW,OAAO,OAAO;AAAA,EACrD;AAAA,EAEA,OAAO,SAAS,WAAsB,SAAkD;AACtF,WAAO,IAAI,cAAa,EAAE,SAAS,WAAW,OAAO;AAAA,EACvD;AAAA,EAEA,OAAO,eAAe,YAAoB,SAAkD;AAC1F,WAAO,IAAI,cAAa,EAAE,eAAe,YAAY,OAAO;AAAA,EAC9D;AAAA,EAEA,OAAO,OAAO,GAA0D,GAAmE;AACzI,WAAO,uBAAO,KAAK,OAAO,eAAc,GAAG,CAAC;AAAA,EAC9C;AACF;AAjEa,cAwCK,UAAyB;AAxC9B,cAyCK,WAAW;AAzChB,cA0CK,SAAoB,uBAAO,KAAK,aAAa,MAAM;AAAA,EACjE;AAAA,IAAE,IAAI;AAAA,IAAG,MAAM;AAAA,IAAgB,MAAM;AAAA,IAAU,GAAG;AAAA;AAAA,EAAyB;AAAA,EAC3E,EAAE,IAAI,GAAG,MAAM,wBAAwB,MAAM,WAAW,GAAG,0BAAU;AAAA,EACrE,EAAE,IAAI,GAAG,MAAM,YAAY,MAAM,UAAU,GAAG,GAA2B,UAAU,KAAK;AAAA,EACxF,EAAE,IAAI,GAAG,MAAM,eAAe,MAAM,WAAW,GAAG,kBAAkB,UAAU,KAAK;AAAA,EACnF,EAAE,IAAI,GAAG,MAAM,UAAU,MAAM,WAAW,GAAG,aAAa,UAAU,KAAK;AAC3E,CAAC;AAhDI,IAAM,eAAN;AAsEA,MAAM,oBAAN,MAAM,0BAAyB,wBAA0B;AAAA,EAmC9D,YAAY,MAAyC;AACnD,UAAM;AA7BR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAQ;AAOR;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAsB;AAOtB;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAW;AAKX;AAAA;AAAA;AAAA,mBAA0B,CAAC;AAO3B;AAAA;AAAA;AAAA;AAAA;AAAA,eAAM;AAIJ,2BAAO,KAAK,YAAY,MAAM,IAAI;AAAA,EACpC;AAAA,EAYA,OAAO,WAAW,OAAmB,SAAwD;AAC3F,WAAO,IAAI,kBAAiB,EAAE,WAAW,OAAO,OAAO;AAAA,EACzD;AAAA,EAEA,OAAO,SAAS,WAAsB,SAAsD;AAC1F,WAAO,IAAI,kBAAiB,EAAE,SAAS,WAAW,OAAO;AAAA,EAC3D;AAAA,EAEA,OAAO,eAAe,YAAoB,SAAsD;AAC9F,WAAO,IAAI,kBAAiB,EAAE,eAAe,YAAY,OAAO;AAAA,EAClE;AAAA,EAEA,OAAO,OAAO,GAAkE,GAA2E;AACzJ,WAAO,uBAAO,KAAK,OAAO,mBAAkB,GAAG,CAAC;AAAA,EAClD;AACF;AAjEa,kBAwCK,UAAyB;AAxC9B,kBAyCK,WAAW;AAzChB,kBA0CK,SAAoB,uBAAO,KAAK,aAAa,MAAM;AAAA,EACjE;AAAA,IAAE,IAAI;AAAA,IAAG,MAAM;AAAA,IAAS,MAAM;AAAA,IAAU,GAAG;AAAA;AAAA,EAA2B;AAAA,EACtE;AAAA,IAAE,IAAI;AAAA,IAAG,MAAM;AAAA,IAAwB,MAAM;AAAA,IAAU,GAAG;AAAA;AAAA,EAA2B;AAAA,EACrF;AAAA,IAAE,IAAI;AAAA,IAAG,MAAM;AAAA,IAAa,MAAM;AAAA,IAAU,GAAG;AAAA;AAAA,EAA2B;AAAA,EAC1E,EAAE,IAAI,GAAG,MAAM,WAAW,MAAM,WAAW,GAAG,cAAc,UAAU,KAAK;AAAA,EAC3E;AAAA,IAAE,IAAI;AAAA,IAAG,MAAM;AAAA,IAAO,MAAM;AAAA,IAAU,GAAG;AAAA;AAAA,EAA2B;AACtE,CAAC;AAhDI,IAAM,mBAAN;AAsEA,MAAM,gBAAN,MAAM,sBAAqB,wBAAsB;AAAA,EAkBtD,YAAY,MAAqC;AAC/C,UAAM;AAbR;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAc,2BAAW;AAUzB;AAAA;AAAA;AAAA,iBAAQ;AAIN,2BAAO,KAAK,YAAY,MAAM,IAAI;AAAA,EACpC;AAAA,EAUA,OAAO,WAAW,OAAmB,SAAoD;AACvF,WAAO,IAAI,cAAa,EAAE,WAAW,OAAO,OAAO;AAAA,EACrD;AAAA,EAEA,OAAO,SAAS,WAAsB,SAAkD;AACtF,WAAO,IAAI,cAAa,EAAE,SAAS,WAAW,OAAO;AAAA,EACvD;AAAA,EAEA,OAAO,eAAe,YAAoB,SAAkD;AAC1F,WAAO,IAAI,cAAa,EAAE,eAAe,YAAY,OAAO;AAAA,EAC9D;AAAA,EAEA,OAAO,OAAO,GAA0D,GAAmE;AACzI,WAAO,uBAAO,KAAK,OAAO,eAAc,GAAG,CAAC;AAAA,EAC9C;AACF;AA9Ca,cAuBK,UAAyB;AAvB9B,cAwBK,WAAW;AAxBhB,cAyBK,SAAoB,uBAAO,KAAK,aAAa,MAAM;AAAA,EACjE;AAAA,IAAE,IAAI;AAAA,IAAG,MAAM;AAAA,IAAgB,MAAM;AAAA,IAAU,GAAG;AAAA;AAAA,EAAyB;AAAA,EAC3E,EAAE,IAAI,GAAG,MAAM,wBAAwB,MAAM,WAAW,GAAG,0BAAU;AAAA,EACrE;AAAA,IAAE,IAAI;AAAA,IAAG,MAAM;AAAA,IAAS,MAAM;AAAA,IAAU,GAAG;AAAA;AAAA,EAAyB;AACtE,CAAC;AA7BI,IAAM,eAAN;AAmDA,MAAM,eAAN,MAAM,qBAAoB,wBAAqB;AAAA,EAwDpD,YAAY,MAAoC;AAC9C,UAAM;AArDR;AAAA;AAAA;AAAA,iBAAQ;AAOR;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAsB;AAOtB;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAW;AAOX;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAmB,2BAAW;AAsB9B;AAAA;AAAA;AAAA,oBAAW;AAOX;AAAA;AAAA;AAAA;AAAA;AAAA,eAAM;AAIJ,2BAAO,KAAK,YAAY,MAAM,IAAI;AAAA,EACpC;AAAA,EAgBA,OAAO,WAAW,OAAmB,SAAmD;AACtF,WAAO,IAAI,aAAY,EAAE,WAAW,OAAO,OAAO;AAAA,EACpD;AAAA,EAEA,OAAO,SAAS,WAAsB,SAAiD;AACrF,WAAO,IAAI,aAAY,EAAE,SAAS,WAAW,OAAO;AAAA,EACtD;AAAA,EAEA,OAAO,eAAe,YAAoB,SAAiD;AACzF,WAAO,IAAI,aAAY,EAAE,eAAe,YAAY,OAAO;AAAA,EAC7D;AAAA,EAEA,OAAO,OAAO,GAAwD,GAAiE;AACrI,WAAO,uBAAO,KAAK,OAAO,cAAa,GAAG,CAAC;AAAA,EAC7C;AACF;AA1Fa,aA6DK,UAAyB;AA7D9B,aA8DK,WAAW;AA9DhB,aA+DK,SAAoB,uBAAO,KAAK,aAAa,MAAM;AAAA,EACjE;AAAA,IAAE,IAAI;AAAA,IAAG,MAAM;AAAA,IAAS,MAAM;AAAA,IAAU,GAAG;AAAA;AAAA,EAA2B;AAAA,EACtE;AAAA,IAAE,IAAI;AAAA,IAAG,MAAM;AAAA,IAAwB,MAAM;AAAA,IAAU,GAAG;AAAA;AAAA,EAA2B;AAAA,EACrF;AAAA,IAAE,IAAI;AAAA,IAAG,MAAM;AAAA,IAAa,MAAM;AAAA,IAAU,GAAG;AAAA;AAAA,EAA2B;AAAA,EAC1E;AAAA,IAAE,IAAI;AAAA,IAAG,MAAM;AAAA,IAAsB,MAAM;AAAA,IAAU,GAAG;AAAA;AAAA,EAAyB;AAAA,EACjF,EAAE,IAAI,GAAG,MAAM,oBAAoB,MAAM,UAAU,GAAG,GAA0B,KAAK,KAAK;AAAA,EAC1F,EAAE,IAAI,GAAG,MAAM,8BAA8B,MAAM,WAAW,GAAG,0BAAU;AAAA,EAC3E,EAAE,IAAI,GAAG,MAAM,4BAA4B,MAAM,WAAW,GAAG,2BAAW,KAAK,KAAK;AAAA,EACpF;AAAA,IAAE,IAAI;AAAA,IAAG,MAAM;AAAA,IAAY,MAAM;AAAA,IAAU,GAAG;AAAA;AAAA,EAA0B;AAAA,EACxE;AAAA,IAAE,IAAI;AAAA,IAAG,MAAM;AAAA,IAAO,MAAM;AAAA,IAAU,GAAG;AAAA;AAAA,EAA2B;AACtE,CAAC;AAzEI,IAAM,cAAN;","names":["MetricLabel"]}