// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file livekit_analytics.proto (package livekit, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { ClientInfo, ParticipantInfo, ParticipantInfo_State, ReconnectReason, Room, RTPStats, TrackInfo, VideoQuality } from "./livekit_models_pb.js";
import { EgressInfo } from "./livekit_egress_pb.js";
import { IngressInfo } from "./livekit_ingress_pb.js";
import { SIPCallInfo, SIPDispatchRuleInfo, SIPInboundTrunkInfo, SIPOutboundTrunkInfo } from "./livekit_sip_pb.js";

/**
 * @generated from enum livekit.StreamType
 */
export enum StreamType {
  /**
   * @generated from enum value: UPSTREAM = 0;
   */
  UPSTREAM = 0,

  /**
   * @generated from enum value: DOWNSTREAM = 1;
   */
  DOWNSTREAM = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(StreamType)
proto3.util.setEnumType(StreamType, "livekit.StreamType", [
  { no: 0, name: "UPSTREAM" },
  { no: 1, name: "DOWNSTREAM" },
]);

/**
 * @generated from enum livekit.AnalyticsEventType
 */
export enum AnalyticsEventType {
  /**
   * @generated from enum value: ROOM_CREATED = 0;
   */
  ROOM_CREATED = 0,

  /**
   * @generated from enum value: ROOM_ENDED = 1;
   */
  ROOM_ENDED = 1,

  /**
   * @generated from enum value: PARTICIPANT_JOINED = 2;
   */
  PARTICIPANT_JOINED = 2,

  /**
   * @generated from enum value: PARTICIPANT_LEFT = 3;
   */
  PARTICIPANT_LEFT = 3,

  /**
   * @generated from enum value: TRACK_PUBLISHED = 4;
   */
  TRACK_PUBLISHED = 4,

  /**
   * @generated from enum value: TRACK_PUBLISH_REQUESTED = 20;
   */
  TRACK_PUBLISH_REQUESTED = 20,

  /**
   * @generated from enum value: TRACK_UNPUBLISHED = 5;
   */
  TRACK_UNPUBLISHED = 5,

  /**
   * @generated from enum value: TRACK_SUBSCRIBED = 6;
   */
  TRACK_SUBSCRIBED = 6,

  /**
   * @generated from enum value: TRACK_SUBSCRIBE_REQUESTED = 21;
   */
  TRACK_SUBSCRIBE_REQUESTED = 21,

  /**
   * @generated from enum value: TRACK_SUBSCRIBE_FAILED = 25;
   */
  TRACK_SUBSCRIBE_FAILED = 25,

  /**
   * @generated from enum value: TRACK_UNSUBSCRIBED = 7;
   */
  TRACK_UNSUBSCRIBED = 7,

  /**
   * @generated from enum value: TRACK_PUBLISHED_UPDATE = 10;
   */
  TRACK_PUBLISHED_UPDATE = 10,

  /**
   * @generated from enum value: TRACK_MUTED = 23;
   */
  TRACK_MUTED = 23,

  /**
   * @generated from enum value: TRACK_UNMUTED = 24;
   */
  TRACK_UNMUTED = 24,

  /**
   * @generated from enum value: TRACK_PUBLISH_STATS = 26;
   */
  TRACK_PUBLISH_STATS = 26,

  /**
   * @generated from enum value: TRACK_SUBSCRIBE_STATS = 27;
   */
  TRACK_SUBSCRIBE_STATS = 27,

  /**
   * @generated from enum value: PARTICIPANT_ACTIVE = 11;
   */
  PARTICIPANT_ACTIVE = 11,

  /**
   * @generated from enum value: PARTICIPANT_RESUMED = 22;
   */
  PARTICIPANT_RESUMED = 22,

  /**
   * @generated from enum value: EGRESS_STARTED = 12;
   */
  EGRESS_STARTED = 12,

  /**
   * @generated from enum value: EGRESS_ENDED = 13;
   */
  EGRESS_ENDED = 13,

  /**
   * @generated from enum value: EGRESS_UPDATED = 28;
   */
  EGRESS_UPDATED = 28,

  /**
   * @generated from enum value: TRACK_MAX_SUBSCRIBED_VIDEO_QUALITY = 14;
   */
  TRACK_MAX_SUBSCRIBED_VIDEO_QUALITY = 14,

  /**
   * @generated from enum value: RECONNECTED = 15;
   */
  RECONNECTED = 15,

  /**
   * @generated from enum value: INGRESS_CREATED = 18;
   */
  INGRESS_CREATED = 18,

  /**
   * @generated from enum value: INGRESS_DELETED = 19;
   */
  INGRESS_DELETED = 19,

  /**
   * @generated from enum value: INGRESS_STARTED = 16;
   */
  INGRESS_STARTED = 16,

  /**
   * @generated from enum value: INGRESS_ENDED = 17;
   */
  INGRESS_ENDED = 17,

  /**
   * @generated from enum value: INGRESS_UPDATED = 29;
   */
  INGRESS_UPDATED = 29,

  /**
   * @generated from enum value: SIP_INBOUND_TRUNK_CREATED = 30;
   */
  SIP_INBOUND_TRUNK_CREATED = 30,

  /**
   * @generated from enum value: SIP_INBOUND_TRUNK_DELETED = 31;
   */
  SIP_INBOUND_TRUNK_DELETED = 31,

  /**
   * @generated from enum value: SIP_OUTBOUND_TRUNK_CREATED = 32;
   */
  SIP_OUTBOUND_TRUNK_CREATED = 32,

  /**
   * @generated from enum value: SIP_OUTBOUND_TRUNK_DELETED = 33;
   */
  SIP_OUTBOUND_TRUNK_DELETED = 33,

  /**
   * @generated from enum value: SIP_DISPATCH_RULE_CREATED = 34;
   */
  SIP_DISPATCH_RULE_CREATED = 34,

  /**
   * @generated from enum value: SIP_DISPATCH_RULE_DELETED = 35;
   */
  SIP_DISPATCH_RULE_DELETED = 35,

  /**
   * @generated from enum value: SIP_PARTICIPANT_CREATED = 36;
   */
  SIP_PARTICIPANT_CREATED = 36,

  /**
   * @generated from enum value: SIP_CALL_INCOMING = 37;
   */
  SIP_CALL_INCOMING = 37,

  /**
   * @generated from enum value: SIP_CALL_STARTED = 38;
   */
  SIP_CALL_STARTED = 38,

  /**
   * @generated from enum value: SIP_CALL_ENDED = 39;
   */
  SIP_CALL_ENDED = 39,
}
// Retrieve enum metadata with: proto3.getEnumType(AnalyticsEventType)
proto3.util.setEnumType(AnalyticsEventType, "livekit.AnalyticsEventType", [
  { no: 0, name: "ROOM_CREATED" },
  { no: 1, name: "ROOM_ENDED" },
  { no: 2, name: "PARTICIPANT_JOINED" },
  { no: 3, name: "PARTICIPANT_LEFT" },
  { no: 4, name: "TRACK_PUBLISHED" },
  { no: 20, name: "TRACK_PUBLISH_REQUESTED" },
  { no: 5, name: "TRACK_UNPUBLISHED" },
  { no: 6, name: "TRACK_SUBSCRIBED" },
  { no: 21, name: "TRACK_SUBSCRIBE_REQUESTED" },
  { no: 25, name: "TRACK_SUBSCRIBE_FAILED" },
  { no: 7, name: "TRACK_UNSUBSCRIBED" },
  { no: 10, name: "TRACK_PUBLISHED_UPDATE" },
  { no: 23, name: "TRACK_MUTED" },
  { no: 24, name: "TRACK_UNMUTED" },
  { no: 26, name: "TRACK_PUBLISH_STATS" },
  { no: 27, name: "TRACK_SUBSCRIBE_STATS" },
  { no: 11, name: "PARTICIPANT_ACTIVE" },
  { no: 22, name: "PARTICIPANT_RESUMED" },
  { no: 12, name: "EGRESS_STARTED" },
  { no: 13, name: "EGRESS_ENDED" },
  { no: 28, name: "EGRESS_UPDATED" },
  { no: 14, name: "TRACK_MAX_SUBSCRIBED_VIDEO_QUALITY" },
  { no: 15, name: "RECONNECTED" },
  { no: 18, name: "INGRESS_CREATED" },
  { no: 19, name: "INGRESS_DELETED" },
  { no: 16, name: "INGRESS_STARTED" },
  { no: 17, name: "INGRESS_ENDED" },
  { no: 29, name: "INGRESS_UPDATED" },
  { no: 30, name: "SIP_INBOUND_TRUNK_CREATED" },
  { no: 31, name: "SIP_INBOUND_TRUNK_DELETED" },
  { no: 32, name: "SIP_OUTBOUND_TRUNK_CREATED" },
  { no: 33, name: "SIP_OUTBOUND_TRUNK_DELETED" },
  { no: 34, name: "SIP_DISPATCH_RULE_CREATED" },
  { no: 35, name: "SIP_DISPATCH_RULE_DELETED" },
  { no: 36, name: "SIP_PARTICIPANT_CREATED" },
  { no: 37, name: "SIP_CALL_INCOMING" },
  { no: 38, name: "SIP_CALL_STARTED" },
  { no: 39, name: "SIP_CALL_ENDED" },
]);

/**
 * @generated from message livekit.AnalyticsVideoLayer
 */
export class AnalyticsVideoLayer extends Message<AnalyticsVideoLayer> {
  /**
   * @generated from field: int32 layer = 1;
   */
  layer = 0;

  /**
   * @generated from field: uint32 packets = 2;
   */
  packets = 0;

  /**
   * @generated from field: uint64 bytes = 3;
   */
  bytes = protoInt64.zero;

  /**
   * @generated from field: uint32 frames = 4;
   */
  frames = 0;

  constructor(data?: PartialMessage<AnalyticsVideoLayer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.AnalyticsVideoLayer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "layer", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "packets", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "frames", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyticsVideoLayer {
    return new AnalyticsVideoLayer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyticsVideoLayer {
    return new AnalyticsVideoLayer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyticsVideoLayer {
    return new AnalyticsVideoLayer().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyticsVideoLayer | PlainMessage<AnalyticsVideoLayer> | undefined, b: AnalyticsVideoLayer | PlainMessage<AnalyticsVideoLayer> | undefined): boolean {
    return proto3.util.equals(AnalyticsVideoLayer, a, b);
  }
}

/**
 * @generated from message livekit.AnalyticsStream
 */
export class AnalyticsStream extends Message<AnalyticsStream> {
  /**
   * @generated from field: uint32 ssrc = 1;
   */
  ssrc = 0;

  /**
   * @generated from field: uint32 primary_packets = 2;
   */
  primaryPackets = 0;

  /**
   * @generated from field: uint64 primary_bytes = 3;
   */
  primaryBytes = protoInt64.zero;

  /**
   * @generated from field: uint32 retransmit_packets = 4;
   */
  retransmitPackets = 0;

  /**
   * @generated from field: uint64 retransmit_bytes = 5;
   */
  retransmitBytes = protoInt64.zero;

  /**
   * @generated from field: uint32 padding_packets = 6;
   */
  paddingPackets = 0;

  /**
   * @generated from field: uint64 padding_bytes = 7;
   */
  paddingBytes = protoInt64.zero;

  /**
   * @generated from field: uint32 packets_lost = 8;
   */
  packetsLost = 0;

  /**
   * @generated from field: uint32 frames = 9;
   */
  frames = 0;

  /**
   * @generated from field: uint32 rtt = 10;
   */
  rtt = 0;

  /**
   * @generated from field: uint32 jitter = 11;
   */
  jitter = 0;

  /**
   * @generated from field: uint32 nacks = 12;
   */
  nacks = 0;

  /**
   * @generated from field: uint32 plis = 13;
   */
  plis = 0;

  /**
   * @generated from field: uint32 firs = 14;
   */
  firs = 0;

  /**
   * @generated from field: repeated livekit.AnalyticsVideoLayer video_layers = 15;
   */
  videoLayers: AnalyticsVideoLayer[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp start_time = 17;
   */
  startTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end_time = 18;
   */
  endTime?: Timestamp;

  /**
   * @generated from field: uint32 packets_out_of_order = 19;
   */
  packetsOutOfOrder = 0;

  constructor(data?: PartialMessage<AnalyticsStream>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.AnalyticsStream";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ssrc", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "primary_packets", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "primary_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "retransmit_packets", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "retransmit_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "padding_packets", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "padding_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "packets_lost", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 9, name: "frames", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 10, name: "rtt", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 11, name: "jitter", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "nacks", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 13, name: "plis", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 14, name: "firs", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 15, name: "video_layers", kind: "message", T: AnalyticsVideoLayer, repeated: true },
    { no: 17, name: "start_time", kind: "message", T: Timestamp },
    { no: 18, name: "end_time", kind: "message", T: Timestamp },
    { no: 19, name: "packets_out_of_order", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyticsStream {
    return new AnalyticsStream().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyticsStream {
    return new AnalyticsStream().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyticsStream {
    return new AnalyticsStream().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyticsStream | PlainMessage<AnalyticsStream> | undefined, b: AnalyticsStream | PlainMessage<AnalyticsStream> | undefined): boolean {
    return proto3.util.equals(AnalyticsStream, a, b);
  }
}

/**
 * @generated from message livekit.AnalyticsStat
 */
export class AnalyticsStat extends Message<AnalyticsStat> {
  /**
   * unique id for this stat
   *
   * @generated from field: string id = 14;
   */
  id = "";

  /**
   * @generated from field: string analytics_key = 1;
   */
  analyticsKey = "";

  /**
   * @generated from field: livekit.StreamType kind = 2;
   */
  kind = StreamType.UPSTREAM;

  /**
   * @generated from field: google.protobuf.Timestamp time_stamp = 3;
   */
  timeStamp?: Timestamp;

  /**
   * @generated from field: string node = 4;
   */
  node = "";

  /**
   * @generated from field: string room_id = 5;
   */
  roomId = "";

  /**
   * @generated from field: string room_name = 6;
   */
  roomName = "";

  /**
   * @generated from field: string participant_id = 7;
   */
  participantId = "";

  /**
   * @generated from field: string track_id = 8;
   */
  trackId = "";

  /**
   * average score
   *
   * @generated from field: float score = 9;
   */
  score = 0;

  /**
   * @generated from field: repeated livekit.AnalyticsStream streams = 10;
   */
  streams: AnalyticsStream[] = [];

  /**
   * @generated from field: string mime = 11;
   */
  mime = "";

  /**
   * @generated from field: float min_score = 12;
   */
  minScore = 0;

  /**
   * @generated from field: float median_score = 13;
   */
  medianScore = 0;

  constructor(data?: PartialMessage<AnalyticsStat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.AnalyticsStat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 14, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "analytics_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "enum", T: proto3.getEnumType(StreamType) },
    { no: 3, name: "time_stamp", kind: "message", T: Timestamp },
    { no: 4, name: "node", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "room_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "participant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "track_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 10, name: "streams", kind: "message", T: AnalyticsStream, repeated: true },
    { no: 11, name: "mime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "min_score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 13, name: "median_score", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyticsStat {
    return new AnalyticsStat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyticsStat {
    return new AnalyticsStat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyticsStat {
    return new AnalyticsStat().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyticsStat | PlainMessage<AnalyticsStat> | undefined, b: AnalyticsStat | PlainMessage<AnalyticsStat> | undefined): boolean {
    return proto3.util.equals(AnalyticsStat, a, b);
  }
}

/**
 * @generated from message livekit.AnalyticsStats
 */
export class AnalyticsStats extends Message<AnalyticsStats> {
  /**
   * @generated from field: repeated livekit.AnalyticsStat stats = 1;
   */
  stats: AnalyticsStat[] = [];

  constructor(data?: PartialMessage<AnalyticsStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.AnalyticsStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stats", kind: "message", T: AnalyticsStat, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyticsStats {
    return new AnalyticsStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyticsStats {
    return new AnalyticsStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyticsStats {
    return new AnalyticsStats().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyticsStats | PlainMessage<AnalyticsStats> | undefined, b: AnalyticsStats | PlainMessage<AnalyticsStats> | undefined): boolean {
    return proto3.util.equals(AnalyticsStats, a, b);
  }
}

/**
 * @generated from message livekit.AnalyticsClientMeta
 */
export class AnalyticsClientMeta extends Message<AnalyticsClientMeta> {
  /**
   * @generated from field: string region = 1;
   */
  region = "";

  /**
   * @generated from field: string node = 2;
   */
  node = "";

  /**
   * @generated from field: string client_addr = 3;
   */
  clientAddr = "";

  /**
   * @generated from field: uint32 client_connect_time = 4;
   */
  clientConnectTime = 0;

  /**
   * udp, tcp, turn
   *
   * @generated from field: string connection_type = 5;
   */
  connectionType = "";

  /**
   * @generated from field: livekit.ReconnectReason reconnect_reason = 6;
   */
  reconnectReason = ReconnectReason.RR_UNKNOWN;

  /**
   * @generated from field: optional string geo_hash = 7;
   */
  geoHash?: string;

  /**
   * @generated from field: optional string country = 8;
   */
  country?: string;

  /**
   * @generated from field: optional uint32 isp_asn = 9;
   */
  ispAsn?: number;

  constructor(data?: PartialMessage<AnalyticsClientMeta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.AnalyticsClientMeta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "node", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "client_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "client_connect_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "connection_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "reconnect_reason", kind: "enum", T: proto3.getEnumType(ReconnectReason) },
    { no: 7, name: "geo_hash", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "isp_asn", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyticsClientMeta {
    return new AnalyticsClientMeta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyticsClientMeta {
    return new AnalyticsClientMeta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyticsClientMeta {
    return new AnalyticsClientMeta().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyticsClientMeta | PlainMessage<AnalyticsClientMeta> | undefined, b: AnalyticsClientMeta | PlainMessage<AnalyticsClientMeta> | undefined): boolean {
    return proto3.util.equals(AnalyticsClientMeta, a, b);
  }
}

/**
 * @generated from message livekit.AnalyticsEvent
 */
export class AnalyticsEvent extends Message<AnalyticsEvent> {
  /**
   * unique id for this event
   *
   * @generated from field: string id = 25;
   */
  id = "";

  /**
   * @generated from field: livekit.AnalyticsEventType type = 1;
   */
  type = AnalyticsEventType.ROOM_CREATED;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: string room_id = 3;
   */
  roomId = "";

  /**
   * @generated from field: livekit.Room room = 4;
   */
  room?: Room;

  /**
   * @generated from field: string participant_id = 5;
   */
  participantId = "";

  /**
   * @generated from field: livekit.ParticipantInfo participant = 6;
   */
  participant?: ParticipantInfo;

  /**
   * @generated from field: string track_id = 7;
   */
  trackId = "";

  /**
   * @generated from field: livekit.TrackInfo track = 8;
   */
  track?: TrackInfo;

  /**
   * @generated from field: string analytics_key = 10;
   */
  analyticsKey = "";

  /**
   * @generated from field: livekit.ClientInfo client_info = 11;
   */
  clientInfo?: ClientInfo;

  /**
   * @generated from field: livekit.AnalyticsClientMeta client_meta = 12;
   */
  clientMeta?: AnalyticsClientMeta;

  /**
   * @generated from field: string egress_id = 13;
   */
  egressId = "";

  /**
   * @generated from field: string ingress_id = 19;
   */
  ingressId = "";

  /**
   * @generated from field: livekit.VideoQuality max_subscribed_video_quality = 14;
   */
  maxSubscribedVideoQuality = VideoQuality.LOW;

  /**
   * @generated from field: livekit.ParticipantInfo publisher = 15;
   */
  publisher?: ParticipantInfo;

  /**
   * @generated from field: string mime = 16;
   */
  mime = "";

  /**
   * @generated from field: livekit.EgressInfo egress = 17;
   */
  egress?: EgressInfo;

  /**
   * @generated from field: livekit.IngressInfo ingress = 18;
   */
  ingress?: IngressInfo;

  /**
   * @generated from field: string error = 20;
   */
  error = "";

  /**
   * @generated from field: livekit.RTPStats rtp_stats = 21;
   */
  rtpStats?: RTPStats;

  /**
   * @generated from field: int32 video_layer = 22;
   */
  videoLayer = 0;

  /**
   * @generated from field: string node_id = 24;
   */
  nodeId = "";

  /**
   * @generated from field: string sip_call_id = 26;
   */
  sipCallId = "";

  /**
   * @generated from field: livekit.SIPCallInfo sip_call = 27;
   */
  sipCall?: SIPCallInfo;

  /**
   * @generated from field: string sip_trunk_id = 28;
   */
  sipTrunkId = "";

  /**
   * @generated from field: livekit.SIPInboundTrunkInfo sip_inbound_trunk = 29;
   */
  sipInboundTrunk?: SIPInboundTrunkInfo;

  /**
   * @generated from field: livekit.SIPOutboundTrunkInfo sip_outbound_trunk = 30;
   */
  sipOutboundTrunk?: SIPOutboundTrunkInfo;

  /**
   * @generated from field: string sip_dispatch_rule_id = 31;
   */
  sipDispatchRuleId = "";

  /**
   * @generated from field: livekit.SIPDispatchRuleInfo sip_dispatch_rule = 32;
   */
  sipDispatchRule?: SIPDispatchRuleInfo;

  constructor(data?: PartialMessage<AnalyticsEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.AnalyticsEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 25, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(AnalyticsEventType) },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
    { no: 3, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "room", kind: "message", T: Room },
    { no: 5, name: "participant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "participant", kind: "message", T: ParticipantInfo },
    { no: 7, name: "track_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "track", kind: "message", T: TrackInfo },
    { no: 10, name: "analytics_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "client_info", kind: "message", T: ClientInfo },
    { no: 12, name: "client_meta", kind: "message", T: AnalyticsClientMeta },
    { no: 13, name: "egress_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "ingress_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "max_subscribed_video_quality", kind: "enum", T: proto3.getEnumType(VideoQuality) },
    { no: 15, name: "publisher", kind: "message", T: ParticipantInfo },
    { no: 16, name: "mime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "egress", kind: "message", T: EgressInfo },
    { no: 18, name: "ingress", kind: "message", T: IngressInfo },
    { no: 20, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "rtp_stats", kind: "message", T: RTPStats },
    { no: 22, name: "video_layer", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 24, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 26, name: "sip_call_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 27, name: "sip_call", kind: "message", T: SIPCallInfo },
    { no: 28, name: "sip_trunk_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 29, name: "sip_inbound_trunk", kind: "message", T: SIPInboundTrunkInfo },
    { no: 30, name: "sip_outbound_trunk", kind: "message", T: SIPOutboundTrunkInfo },
    { no: 31, name: "sip_dispatch_rule_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 32, name: "sip_dispatch_rule", kind: "message", T: SIPDispatchRuleInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyticsEvent {
    return new AnalyticsEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyticsEvent {
    return new AnalyticsEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyticsEvent {
    return new AnalyticsEvent().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyticsEvent | PlainMessage<AnalyticsEvent> | undefined, b: AnalyticsEvent | PlainMessage<AnalyticsEvent> | undefined): boolean {
    return proto3.util.equals(AnalyticsEvent, a, b);
  }
}

/**
 * @generated from message livekit.AnalyticsEvents
 */
export class AnalyticsEvents extends Message<AnalyticsEvents> {
  /**
   * @generated from field: repeated livekit.AnalyticsEvent events = 1;
   */
  events: AnalyticsEvent[] = [];

  constructor(data?: PartialMessage<AnalyticsEvents>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.AnalyticsEvents";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: AnalyticsEvent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyticsEvents {
    return new AnalyticsEvents().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyticsEvents {
    return new AnalyticsEvents().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyticsEvents {
    return new AnalyticsEvents().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyticsEvents | PlainMessage<AnalyticsEvents> | undefined, b: AnalyticsEvents | PlainMessage<AnalyticsEvents> | undefined): boolean {
    return proto3.util.equals(AnalyticsEvents, a, b);
  }
}

/**
 * @generated from message livekit.AnalyticsRoomParticipant
 */
export class AnalyticsRoomParticipant extends Message<AnalyticsRoomParticipant> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string identity = 2;
   */
  identity = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: livekit.ParticipantInfo.State state = 4;
   */
  state = ParticipantInfo_State.JOINING;

  /**
   * @generated from field: google.protobuf.Timestamp joined_at = 5;
   */
  joinedAt?: Timestamp;

  constructor(data?: PartialMessage<AnalyticsRoomParticipant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.AnalyticsRoomParticipant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "state", kind: "enum", T: proto3.getEnumType(ParticipantInfo_State) },
    { no: 5, name: "joined_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyticsRoomParticipant {
    return new AnalyticsRoomParticipant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyticsRoomParticipant {
    return new AnalyticsRoomParticipant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyticsRoomParticipant {
    return new AnalyticsRoomParticipant().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyticsRoomParticipant | PlainMessage<AnalyticsRoomParticipant> | undefined, b: AnalyticsRoomParticipant | PlainMessage<AnalyticsRoomParticipant> | undefined): boolean {
    return proto3.util.equals(AnalyticsRoomParticipant, a, b);
  }
}

/**
 * @generated from message livekit.AnalyticsRoom
 */
export class AnalyticsRoom extends Message<AnalyticsRoom> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string project_id = 5;
   */
  projectId = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: repeated livekit.AnalyticsRoomParticipant participants = 4;
   */
  participants: AnalyticsRoomParticipant[] = [];

  constructor(data?: PartialMessage<AnalyticsRoom>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.AnalyticsRoom";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created_at", kind: "message", T: Timestamp },
    { no: 4, name: "participants", kind: "message", T: AnalyticsRoomParticipant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyticsRoom {
    return new AnalyticsRoom().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyticsRoom {
    return new AnalyticsRoom().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyticsRoom {
    return new AnalyticsRoom().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyticsRoom | PlainMessage<AnalyticsRoom> | undefined, b: AnalyticsRoom | PlainMessage<AnalyticsRoom> | undefined): boolean {
    return proto3.util.equals(AnalyticsRoom, a, b);
  }
}

/**
 * @generated from message livekit.AnalyticsNodeRooms
 */
export class AnalyticsNodeRooms extends Message<AnalyticsNodeRooms> {
  /**
   * @generated from field: string node_id = 1;
   */
  nodeId = "";

  /**
   * @generated from field: uint64 sequence_number = 2;
   */
  sequenceNumber = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: repeated livekit.AnalyticsRoom rooms = 4;
   */
  rooms: AnalyticsRoom[] = [];

  constructor(data?: PartialMessage<AnalyticsNodeRooms>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.AnalyticsNodeRooms";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sequence_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "timestamp", kind: "message", T: Timestamp },
    { no: 4, name: "rooms", kind: "message", T: AnalyticsRoom, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalyticsNodeRooms {
    return new AnalyticsNodeRooms().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyticsNodeRooms {
    return new AnalyticsNodeRooms().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalyticsNodeRooms {
    return new AnalyticsNodeRooms().fromJsonString(jsonString, options);
  }

  static equals(a: AnalyticsNodeRooms | PlainMessage<AnalyticsNodeRooms> | undefined, b: AnalyticsNodeRooms | PlainMessage<AnalyticsNodeRooms> | undefined): boolean {
    return proto3.util.equals(AnalyticsNodeRooms, a, b);
  }
}

