// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file livekit_internal.proto (package livekit, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ClientInfo, PlayoutDelay, ReconnectReason } from "./livekit_models_pb.js";
import { CreateRoomRequest } from "./livekit_room_pb.js";
import { AutoParticipantEgress, AutoTrackEgress } from "./livekit_egress_pb.js";
import { RoomAgentDispatch } from "./livekit_agent_dispatch_pb.js";

/**
 * @generated from enum livekit.NodeType
 */
export enum NodeType {
  /**
   * @generated from enum value: SERVER = 0;
   */
  SERVER = 0,

  /**
   * @generated from enum value: CONTROLLER = 1;
   */
  CONTROLLER = 1,

  /**
   * @generated from enum value: MEDIA = 2;
   */
  MEDIA = 2,

  /**
   * @generated from enum value: TURN = 4;
   */
  TURN = 4,

  /**
   * @generated from enum value: SWEEPER = 5;
   */
  SWEEPER = 5,

  /**
   * @generated from enum value: DIRECTOR = 6;
   */
  DIRECTOR = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(NodeType)
proto3.util.setEnumType(NodeType, "livekit.NodeType", [
  { no: 0, name: "SERVER" },
  { no: 1, name: "CONTROLLER" },
  { no: 2, name: "MEDIA" },
  { no: 4, name: "TURN" },
  { no: 5, name: "SWEEPER" },
  { no: 6, name: "DIRECTOR" },
]);

/**
 * @generated from enum livekit.NodeState
 */
export enum NodeState {
  /**
   * @generated from enum value: STARTING_UP = 0;
   */
  STARTING_UP = 0,

  /**
   * @generated from enum value: SERVING = 1;
   */
  SERVING = 1,

  /**
   * @generated from enum value: SHUTTING_DOWN = 2;
   */
  SHUTTING_DOWN = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(NodeState)
proto3.util.setEnumType(NodeState, "livekit.NodeState", [
  { no: 0, name: "STARTING_UP" },
  { no: 1, name: "SERVING" },
  { no: 2, name: "SHUTTING_DOWN" },
]);

/**
 * @generated from enum livekit.ICECandidateType
 */
export enum ICECandidateType {
  /**
   * @generated from enum value: ICT_NONE = 0;
   */
  ICT_NONE = 0,

  /**
   * @generated from enum value: ICT_TCP = 1;
   */
  ICT_TCP = 1,

  /**
   * @generated from enum value: ICT_TLS = 2;
   */
  ICT_TLS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ICECandidateType)
proto3.util.setEnumType(ICECandidateType, "livekit.ICECandidateType", [
  { no: 0, name: "ICT_NONE" },
  { no: 1, name: "ICT_TCP" },
  { no: 2, name: "ICT_TLS" },
]);

/**
 * @generated from message livekit.Node
 */
export class Node extends Message<Node> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string ip = 2;
   */
  ip = "";

  /**
   * @generated from field: uint32 num_cpus = 3;
   */
  numCpus = 0;

  /**
   * @generated from field: livekit.NodeStats stats = 4;
   */
  stats?: NodeStats;

  /**
   * @generated from field: livekit.NodeType type = 5;
   */
  type = NodeType.SERVER;

  /**
   * @generated from field: livekit.NodeState state = 6;
   */
  state = NodeState.STARTING_UP;

  /**
   * @generated from field: string region = 7;
   */
  region = "";

  constructor(data?: PartialMessage<Node>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.Node";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "num_cpus", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "stats", kind: "message", T: NodeStats },
    { no: 5, name: "type", kind: "enum", T: proto3.getEnumType(NodeType) },
    { no: 6, name: "state", kind: "enum", T: proto3.getEnumType(NodeState) },
    { no: 7, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Node {
    return new Node().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJsonString(jsonString, options);
  }

  static equals(a: Node | PlainMessage<Node> | undefined, b: Node | PlainMessage<Node> | undefined): boolean {
    return proto3.util.equals(Node, a, b);
  }
}

/**
 * @generated from message livekit.NodeStats
 */
export class NodeStats extends Message<NodeStats> {
  /**
   * when server was started
   *
   * @generated from field: int64 started_at = 1;
   */
  startedAt = protoInt64.zero;

  /**
   * when server last reported its status
   *
   * @generated from field: int64 updated_at = 2;
   */
  updatedAt = protoInt64.zero;

  /**
   * room
   *
   * @generated from field: int32 num_rooms = 3;
   */
  numRooms = 0;

  /**
   * @generated from field: int32 num_clients = 4;
   */
  numClients = 0;

  /**
   * @generated from field: int32 num_tracks_in = 5;
   */
  numTracksIn = 0;

  /**
   * @generated from field: int32 num_tracks_out = 6;
   */
  numTracksOut = 0;

  /**
   * @generated from field: int32 num_track_publish_attempts = 36;
   */
  numTrackPublishAttempts = 0;

  /**
   * @generated from field: float track_publish_attempts_per_sec = 37;
   */
  trackPublishAttemptsPerSec = 0;

  /**
   * @generated from field: int32 num_track_publish_success = 38;
   */
  numTrackPublishSuccess = 0;

  /**
   * @generated from field: float track_publish_success_per_sec = 39;
   */
  trackPublishSuccessPerSec = 0;

  /**
   * @generated from field: int32 num_track_subscribe_attempts = 40;
   */
  numTrackSubscribeAttempts = 0;

  /**
   * @generated from field: float track_subscribe_attempts_per_sec = 41;
   */
  trackSubscribeAttemptsPerSec = 0;

  /**
   * @generated from field: int32 num_track_subscribe_success = 42;
   */
  numTrackSubscribeSuccess = 0;

  /**
   * @generated from field: float track_subscribe_success_per_sec = 43;
   */
  trackSubscribeSuccessPerSec = 0;

  /**
   * packet
   *
   * @generated from field: uint64 bytes_in = 7;
   */
  bytesIn = protoInt64.zero;

  /**
   * @generated from field: uint64 bytes_out = 8;
   */
  bytesOut = protoInt64.zero;

  /**
   * @generated from field: uint64 packets_in = 9;
   */
  packetsIn = protoInt64.zero;

  /**
   * @generated from field: uint64 packets_out = 10;
   */
  packetsOut = protoInt64.zero;

  /**
   * @generated from field: uint64 nack_total = 11;
   */
  nackTotal = protoInt64.zero;

  /**
   * @generated from field: float bytes_in_per_sec = 12;
   */
  bytesInPerSec = 0;

  /**
   * @generated from field: float bytes_out_per_sec = 13;
   */
  bytesOutPerSec = 0;

  /**
   * @generated from field: float packets_in_per_sec = 14;
   */
  packetsInPerSec = 0;

  /**
   * @generated from field: float packets_out_per_sec = 15;
   */
  packetsOutPerSec = 0;

  /**
   * @generated from field: float nack_per_sec = 16;
   */
  nackPerSec = 0;

  /**
   * system
   *
   * @generated from field: uint32 num_cpus = 17;
   */
  numCpus = 0;

  /**
   * @generated from field: float load_avg_last1min = 18;
   */
  loadAvgLast1min = 0;

  /**
   * @generated from field: float load_avg_last5min = 19;
   */
  loadAvgLast5min = 0;

  /**
   * @generated from field: float load_avg_last15min = 20;
   */
  loadAvgLast15min = 0;

  /**
   * @generated from field: float cpu_load = 21;
   */
  cpuLoad = 0;

  /**
   * deprecated
   *
   * @generated from field: float memory_load = 33;
   */
  memoryLoad = 0;

  /**
   * @generated from field: uint64 memory_total = 34;
   */
  memoryTotal = protoInt64.zero;

  /**
   * @generated from field: uint64 memory_used = 35;
   */
  memoryUsed = protoInt64.zero;

  /**
   * @generated from field: uint32 sys_packets_out = 28;
   */
  sysPacketsOut = 0;

  /**
   * @generated from field: uint32 sys_packets_dropped = 29;
   */
  sysPacketsDropped = 0;

  /**
   * @generated from field: float sys_packets_out_per_sec = 30;
   */
  sysPacketsOutPerSec = 0;

  /**
   * @generated from field: float sys_packets_dropped_per_sec = 31;
   */
  sysPacketsDroppedPerSec = 0;

  /**
   * @generated from field: float sys_packets_dropped_pct_per_sec = 32;
   */
  sysPacketsDroppedPctPerSec = 0;

  /**
   * retransmissions
   *
   * @generated from field: uint64 retransmit_bytes_out = 22;
   */
  retransmitBytesOut = protoInt64.zero;

  /**
   * @generated from field: uint64 retransmit_packets_out = 23;
   */
  retransmitPacketsOut = protoInt64.zero;

  /**
   * @generated from field: float retransmit_bytes_out_per_sec = 24;
   */
  retransmitBytesOutPerSec = 0;

  /**
   * @generated from field: float retransmit_packets_out_per_sec = 25;
   */
  retransmitPacketsOutPerSec = 0;

  /**
   * participant joins
   *
   * @generated from field: uint64 participant_signal_connected = 26;
   */
  participantSignalConnected = protoInt64.zero;

  /**
   * @generated from field: float participant_signal_connected_per_sec = 27;
   */
  participantSignalConnectedPerSec = 0;

  /**
   * @generated from field: uint64 participant_rtc_connected = 44;
   */
  participantRtcConnected = protoInt64.zero;

  /**
   * @generated from field: float participant_rtc_connected_per_sec = 45;
   */
  participantRtcConnectedPerSec = 0;

  /**
   * @generated from field: uint64 participant_rtc_init = 46;
   */
  participantRtcInit = protoInt64.zero;

  /**
   * @generated from field: float participant_rtc_init_per_sec = 47;
   */
  participantRtcInitPerSec = 0;

  /**
   * forward metrics
   *
   * @generated from field: uint32 forward_latency = 48;
   */
  forwardLatency = 0;

  /**
   * @generated from field: uint32 forward_jitter = 49;
   */
  forwardJitter = 0;

  constructor(data?: PartialMessage<NodeStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.NodeStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "started_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "updated_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "num_rooms", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "num_clients", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "num_tracks_in", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "num_tracks_out", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 36, name: "num_track_publish_attempts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 37, name: "track_publish_attempts_per_sec", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 38, name: "num_track_publish_success", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 39, name: "track_publish_success_per_sec", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 40, name: "num_track_subscribe_attempts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 41, name: "track_subscribe_attempts_per_sec", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 42, name: "num_track_subscribe_success", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 43, name: "track_subscribe_success_per_sec", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 7, name: "bytes_in", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "bytes_out", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "packets_in", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "packets_out", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "nack_total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "bytes_in_per_sec", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 13, name: "bytes_out_per_sec", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 14, name: "packets_in_per_sec", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 15, name: "packets_out_per_sec", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 16, name: "nack_per_sec", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 17, name: "num_cpus", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 18, name: "load_avg_last1min", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 19, name: "load_avg_last5min", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 20, name: "load_avg_last15min", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 21, name: "cpu_load", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 33, name: "memory_load", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 34, name: "memory_total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 35, name: "memory_used", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 28, name: "sys_packets_out", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 29, name: "sys_packets_dropped", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 30, name: "sys_packets_out_per_sec", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 31, name: "sys_packets_dropped_per_sec", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 32, name: "sys_packets_dropped_pct_per_sec", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 22, name: "retransmit_bytes_out", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 23, name: "retransmit_packets_out", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 24, name: "retransmit_bytes_out_per_sec", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 25, name: "retransmit_packets_out_per_sec", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 26, name: "participant_signal_connected", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 27, name: "participant_signal_connected_per_sec", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 44, name: "participant_rtc_connected", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 45, name: "participant_rtc_connected_per_sec", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 46, name: "participant_rtc_init", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 47, name: "participant_rtc_init_per_sec", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 48, name: "forward_latency", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 49, name: "forward_jitter", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeStats {
    return new NodeStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeStats {
    return new NodeStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeStats {
    return new NodeStats().fromJsonString(jsonString, options);
  }

  static equals(a: NodeStats | PlainMessage<NodeStats> | undefined, b: NodeStats | PlainMessage<NodeStats> | undefined): boolean {
    return proto3.util.equals(NodeStats, a, b);
  }
}

/**
 * @generated from message livekit.StartSession
 */
export class StartSession extends Message<StartSession> {
  /**
   * @generated from field: string room_name = 1;
   */
  roomName = "";

  /**
   * @generated from field: string identity = 2;
   */
  identity = "";

  /**
   * @generated from field: string connection_id = 3;
   */
  connectionId = "";

  /**
   * if a client is reconnecting (i.e. resume instead of restart)
   *
   * @generated from field: bool reconnect = 4;
   */
  reconnect = false;

  /**
   * @generated from field: bool auto_subscribe = 9;
   */
  autoSubscribe = false;

  /**
   * @generated from field: bool hidden = 10;
   */
  hidden = false;

  /**
   * @generated from field: livekit.ClientInfo client = 11;
   */
  client?: ClientInfo;

  /**
   * @generated from field: bool recorder = 12;
   */
  recorder = false;

  /**
   * @generated from field: string name = 13;
   */
  name = "";

  /**
   * A user's ClaimGrants serialized in JSON
   *
   * @generated from field: string grants_json = 14;
   */
  grantsJson = "";

  /**
   * @generated from field: bool adaptive_stream = 15;
   */
  adaptiveStream = false;

  /**
   * if reconnect, client will set current sid
   *
   * @generated from field: string participant_id = 16;
   */
  participantId = "";

  /**
   * @generated from field: livekit.ReconnectReason reconnect_reason = 17;
   */
  reconnectReason = ReconnectReason.RR_UNKNOWN;

  /**
   * @generated from field: optional bool subscriber_allow_pause = 18;
   */
  subscriberAllowPause?: boolean;

  /**
   * @generated from field: bool disable_ice_lite = 19;
   */
  disableIceLite = false;

  /**
   * @generated from field: livekit.CreateRoomRequest create_room = 20;
   */
  createRoom?: CreateRoomRequest;

  constructor(data?: PartialMessage<StartSession>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.StartSession";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reconnect", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "auto_subscribe", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "client", kind: "message", T: ClientInfo },
    { no: 12, name: "recorder", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "grants_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "adaptive_stream", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 16, name: "participant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "reconnect_reason", kind: "enum", T: proto3.getEnumType(ReconnectReason) },
    { no: 18, name: "subscriber_allow_pause", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 19, name: "disable_ice_lite", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 20, name: "create_room", kind: "message", T: CreateRoomRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartSession {
    return new StartSession().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartSession {
    return new StartSession().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartSession {
    return new StartSession().fromJsonString(jsonString, options);
  }

  static equals(a: StartSession | PlainMessage<StartSession> | undefined, b: StartSession | PlainMessage<StartSession> | undefined): boolean {
    return proto3.util.equals(StartSession, a, b);
  }
}

/**
 * room info that should not be returned to clients
 *
 * @generated from message livekit.RoomInternal
 */
export class RoomInternal extends Message<RoomInternal> {
  /**
   * @generated from field: livekit.AutoTrackEgress track_egress = 1;
   */
  trackEgress?: AutoTrackEgress;

  /**
   * @generated from field: livekit.AutoParticipantEgress participant_egress = 2;
   */
  participantEgress?: AutoParticipantEgress;

  /**
   * @generated from field: livekit.PlayoutDelay playout_delay = 3;
   */
  playoutDelay?: PlayoutDelay;

  /**
   * @generated from field: repeated livekit.RoomAgentDispatch agent_dispatches = 5;
   */
  agentDispatches: RoomAgentDispatch[] = [];

  /**
   * @generated from field: bool sync_streams = 4;
   */
  syncStreams = false;

  /**
   * @generated from field: bool replay_enabled = 6;
   */
  replayEnabled = false;

  constructor(data?: PartialMessage<RoomInternal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.RoomInternal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "track_egress", kind: "message", T: AutoTrackEgress },
    { no: 2, name: "participant_egress", kind: "message", T: AutoParticipantEgress },
    { no: 3, name: "playout_delay", kind: "message", T: PlayoutDelay },
    { no: 5, name: "agent_dispatches", kind: "message", T: RoomAgentDispatch, repeated: true },
    { no: 4, name: "sync_streams", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "replay_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoomInternal {
    return new RoomInternal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoomInternal {
    return new RoomInternal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoomInternal {
    return new RoomInternal().fromJsonString(jsonString, options);
  }

  static equals(a: RoomInternal | PlainMessage<RoomInternal> | undefined, b: RoomInternal | PlainMessage<RoomInternal> | undefined): boolean {
    return proto3.util.equals(RoomInternal, a, b);
  }
}

/**
 * @generated from message livekit.ICEConfig
 */
export class ICEConfig extends Message<ICEConfig> {
  /**
   * @generated from field: livekit.ICECandidateType preference_subscriber = 1;
   */
  preferenceSubscriber = ICECandidateType.ICT_NONE;

  /**
   * @generated from field: livekit.ICECandidateType preference_publisher = 2;
   */
  preferencePublisher = ICECandidateType.ICT_NONE;

  constructor(data?: PartialMessage<ICEConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "livekit.ICEConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "preference_subscriber", kind: "enum", T: proto3.getEnumType(ICECandidateType) },
    { no: 2, name: "preference_publisher", kind: "enum", T: proto3.getEnumType(ICECandidateType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ICEConfig {
    return new ICEConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ICEConfig {
    return new ICEConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ICEConfig {
    return new ICEConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ICEConfig | PlainMessage<ICEConfig> | undefined, b: ICEConfig | PlainMessage<ICEConfig> | undefined): boolean {
    return proto3.util.equals(ICEConfig, a, b);
  }
}

