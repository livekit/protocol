// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package livekit;
option go_package = "github.com/livekit/protocol/livekit";
option csharp_namespace = "LiveKit.Proto";
option ruby_package = "LiveKit::Proto";

import "livekit_rtc.proto";
import "livekit_models.proto";

message Signalv2ClientMessage {
  // monotonically increasing number (by 1) starting at some non-zero number (should not rollover)
  uint32 message_id = 1;

  // last remote message processed
  uint32 last_processed_remote_message_id = 2;

  oneof message {
    ConnectRequest connect_request = 3;
    ReconnectRequest reconnect_request = 4;
    AudioTrack audio_track = 5;
    VideoTrack video_track = 6;
    SessionDescription publisher_sdp = 7;
    SessionDescription subscriber_sdp = 8;
    TrickleRequest ice_candidate = 9;
    MuteTrackRequest mute_track_request = 10;
    UpdateSubscription update_subscription = 11;
    UpdateTrackSettings update_track_settings = 12;
    LeaveRequest leave_request = 13;
    SubscriptionPermission update_subscription_permission = 14;
    SimulateScenario simulate_scenario = 15;
    UpdateParticipantMetadata update_participant_metadata = 16;
    Ping ping = 17;
    UpdateLocalAudioTrack update_local_audio_track = 18;
    UpdateLocalVideoTrack update_local_video_track = 19;
    bool acknowledgement = 20;
  }
}

message Signalv2ClientEnvelope {
  // collection of client -> server messages
  repeated Signalv2ClientMessage client_messages = 1;
}

message Signalv2ServerMessage {
  // monotonically increasing number (by 1) starting at some non-zero number (should not rollover)
  uint32 message_id = 1;

  // last remote message processed
  uint32 last_processed_remote_message_id = 2;

  repeated ErrorResponse errors = 3;

  oneof message {
    ConnectResponse connect_response = 4;
    ReconnectResponse reconnect_response = 5;
    Room room_update = 6;
    ParticipantUpdate participant_update = 7;
    SessionDescription publisher_sdp = 8;
    SessionDescription subscriber_sdp = 9;
    LeaveRequest leave_request = 10;
    MuteTrackRequest mute_track_request = 11;
    SpeakersChanged speakers_changed = 12;
    ConnectionQualityUpdate connection_quality_update = 13;
    StreamStateUpdate stream_state_update = 14;
    SubscribedQualityUpdate subscribed_quality_update = 15;
    string refresh_token = 16;
    TrackUnpublishedResponse track_unpublished = 17;
    Pong pong = 18;
    SubscriptionResponse subscription_response = 19;
    RequestResponse request_response = 20;
    TrackSubscribed track_subscribed = 21;
    RoomMovedResponse room_moved_response = 22;
    bool acknowledgement = 23;
  }
}

message Signalv2ServerEnvelope {
  // collection of server -> client messages
  repeated Signalv2ServerMessage server_messages = 1;
}

message ConnectionSettings {
  bool auto_subscribe = 1;
  bool adaptive_stream = 2;
  optional bool subscriber_allow_pause = 3;
  bool disable_ice_lite = 4;;
}

message TrackSettings {
  string cid = 1;
  string name = 2;
  TrackSource source = 3;
  bool muted = 4;
  Encryption.Type encryption = 5;
  optional string sid = 6;
}

message AudioTrack {
  TrackSettings track_settings = 1;
  repeated AudioTrackFeature audio_features = 5;
  bool disable_red = 6;
}

message VideoTrack {
  TrackSettings track_settings = 1;
  repeated SimulcastCodec simulcast_codecs = 2;
  BackupCodecPolicy backup_codec_policy = 3;
}

message ConnectRequest {
  ClientInfo client_info = 1;
  SessionDescription publisher_sdp = 2;
  ConnectionSettings connection_settings = 3;
  repeated AudioTrack audio_tracks = 4;
  repeated VideoTrack video_tracks = 5;
  map<string, string> participant_attributes = 6;
}

message ReconnectRequest {
  string participant_sid = 1;
  ReconnectReason reconnect_reason = 2;
  SyncState sync_state = 3;
}

message ConnectResponse {
  Room room = 1;
  ParticipantInfo participant = 2;
  repeated ParticipantInfo other_participants = 3;
  repeated ICEServer ice_servers = 4;
  ClientConfiguration client_configuration = 5;
  int32 ping_timeout = 6;
  int32 ping_interval = 7;
  ServerInfo server_info = 8;
  // Server-Injected-Frame byte trailer, used to identify unencrypted frames when e2ee is enabled
  bytes sif_trailer = 9;
  repeated Codec enabled_publish_codecs = 10;
  SessionDescription publisher_sdp = 11;
  SessionDescription subscriber_sdp = 12;
}

message ErrorResponse {
  uint32 message_id = 1;
  string error = 2;
}
