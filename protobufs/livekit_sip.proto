// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package livekit;

option go_package = "github.com/livekit/protocol/livekit";
option csharp_namespace = "LiveKit.Proto";
option ruby_package = "LiveKit::Proto";

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "livekit_models.proto";

/*
   LiveKit's SIP API is built with 3 high level primitives
   - SIP Trunk
   - SIP Dispatch Rule
   - SIP Participant


   The `SIP Trunk` is used to accept and make calls. A `SIP Trunk` is configured with
   the IPs/Ports and Authentication details of your SIP Provider. When a call is accepted from
   the `SIP Trunk` it is then handled by the `SIP Dispatch Rules`. When a `SIP Participant` is created
   for a outbound call a `SIP Trunk` is chosen to make the call with.


   The `SIP Dispatch Rule` is a list of rules that dictate how a incoming SIP call should be handled.
   LiveKit currently supports 2 types, but may support more in the future.

   - `Direct Dispatch` puts a caller into a existing room, possibly choosing between multiple rooms with a pin
   - `Individual Dispatch` puts a caller into a new room created for the call


   The `SIP Participant` represents an active SIP Session. These SIP Sessions are always associated with
   a Participant on LiveKit side. Inbound calls create Participants directly (with a `SIP` kind), while outbound
   calls must be initiated with `CreateSIPParticipant`.
*/


service SIP {
  // rpc CreateSIPTrunk(CreateSIPTrunkRequest) returns (SIPTrunkInfo) { option deprecated = true; }; DELETED
  rpc ListSIPTrunk(ListSIPTrunkRequest) returns (ListSIPTrunkResponse) { option deprecated = true; };

  rpc CreateSIPInboundTrunk(CreateSIPInboundTrunkRequest) returns (SIPInboundTrunkInfo);
  rpc CreateSIPOutboundTrunk(CreateSIPOutboundTrunkRequest) returns (SIPOutboundTrunkInfo);
  rpc GetSIPInboundTrunk(GetSIPInboundTrunkRequest) returns (GetSIPInboundTrunkResponse);
  rpc GetSIPOutboundTrunk(GetSIPOutboundTrunkRequest) returns (GetSIPOutboundTrunkResponse);
  rpc ListSIPInboundTrunk(ListSIPInboundTrunkRequest) returns (ListSIPInboundTrunkResponse);
  rpc ListSIPOutboundTrunk(ListSIPOutboundTrunkRequest) returns (ListSIPOutboundTrunkResponse);
  rpc DeleteSIPTrunk(DeleteSIPTrunkRequest) returns (SIPTrunkInfo);

  rpc CreateSIPDispatchRule(CreateSIPDispatchRuleRequest) returns (SIPDispatchRuleInfo);
  rpc ListSIPDispatchRule(ListSIPDispatchRuleRequest) returns (ListSIPDispatchRuleResponse);
  rpc DeleteSIPDispatchRule(DeleteSIPDispatchRuleRequest) returns (SIPDispatchRuleInfo);

  rpc CreateSIPParticipant(CreateSIPParticipantRequest) returns (SIPParticipantInfo);
  rpc TransferSIPParticipant(TransferSIPParticipantRequest) returns (google.protobuf.Empty);
}


message CreateSIPTrunkRequest {
  option deprecated = true;
  // CIDR or IPs that traffic is accepted from
  // An empty list means all inbound traffic is accepted.
  repeated string inbound_addresses = 1;

  // IP that SIP INVITE is sent too
  string outbound_address = 2;

  // Number used to make outbound calls
  string outbound_number = 3;

  repeated string inbound_numbers_regex = 4 [deprecated=true];

  // Accepted `To` values. This Trunk will only accept a call made to
  // these numbers. This allows you to have distinct Trunks for different phone
  // numbers at the same provider.
  repeated string inbound_numbers = 9;

  // Username and password used to authenticate inbound and outbound SIP invites
  // May be empty to have no Authentication
  string inbound_username = 5;
  string inbound_password = 6;
  string outbound_username = 7;
  string outbound_password = 8;

  // Optional human-readable name for the Trunk.
  string name = 10;
  // Optional user-defined metadata for the Trunk.
  string metadata = 11;
}

enum SIPTransport {
  SIP_TRANSPORT_AUTO = 0;
  SIP_TRANSPORT_UDP = 1;
  SIP_TRANSPORT_TCP = 2;
  SIP_TRANSPORT_TLS = 3;
}

message SIPTrunkInfo {
  option deprecated = true;

  enum TrunkKind {
    TRUNK_LEGACY = 0;
    TRUNK_INBOUND = 1;
    TRUNK_OUTBOUND = 2;
  }

  string sip_trunk_id = 1;
  TrunkKind kind = 14;

  // CIDR or IPs that traffic is accepted from
  // An empty list means all inbound traffic is accepted.
  repeated string inbound_addresses = 2;

  // IP that SIP INVITE is sent too
  string outbound_address = 3;

  // Number used to make outbound calls
  string outbound_number = 4;

  // Transport used for inbound and outbound calls.
  SIPTransport transport = 13;

  repeated string inbound_numbers_regex = 5 [deprecated=true];

  // Accepted `To` values. This Trunk will only accept a call made to
  // these numbers. This allows you to have distinct Trunks for different phone
  // numbers at the same provider.
  repeated string inbound_numbers = 10;

  // Username and password used to authenticate inbound and outbound SIP invites
  // May be empty to have no Authentication
  string inbound_username = 6;
  string inbound_password = 7;
  string outbound_username = 8;
  string outbound_password = 9;

  // Human-readable name for the Trunk.
  string name = 11;
  // User-defined metadata for the Trunk.
  string metadata = 12;

  // NEXT ID: 15
}

message CreateSIPInboundTrunkRequest {
  SIPInboundTrunkInfo trunk = 1; // Trunk ID is ignored
}

message SIPInboundTrunkInfo {
  string sip_trunk_id = 1;

  // Human-readable name for the Trunk.
  string name = 2;
  // User-defined metadata for the Trunk.
  string metadata = 3;

  // Numbers associated with LiveKit SIP. The Trunk will only accept calls made to these numbers.
  // Creating multiple Trunks with different phone numbers allows having different rules for a single provider.
  repeated string numbers = 4;

  // CIDR or IPs that traffic is accepted from.
  // An empty list means all inbound traffic is accepted.
  repeated string allowed_addresses = 5;

  // Numbers that are allowed to make calls to this Trunk.
  // An empty list means calls from any phone number is accepted.
  repeated string allowed_numbers = 6;

  // Username and password used to authenticate inbound SIP invites.
  // May be empty to have no authentication.
  string auth_username = 7;
  string auth_password = 8;

  // Include these SIP X-* headers in 200 OK responses.
  map<string, string> headers = 9;
  // Map SIP X-* headers from INVITE to SIP participant attributes.
  map<string, string> headers_to_attributes = 10;

  // Max time for the caller to wait for track subscription.
  google.protobuf.Duration ringing_timeout = 11;
  // Max call duration.
  google.protobuf.Duration max_call_duration = 12;
}

message CreateSIPOutboundTrunkRequest {
  SIPOutboundTrunkInfo trunk = 1; // Trunk ID is ignored
}

message SIPOutboundTrunkInfo {
  string sip_trunk_id = 1;

  // Human-readable name for the Trunk.
  string name = 2;
  // User-defined metadata for the Trunk.
  string metadata = 3;

  // Hostname or IP that SIP INVITE is sent too.
  // Note that this is not a SIP URI and should not contain the 'sip:' protocol prefix.
  string address = 4;

  // SIP Transport used for outbound call.
  SIPTransport transport = 5;

  // Numbers used to make the calls. Random one from this list will be selected.
  repeated string numbers = 6;

  // Username and password used to authenticate with SIP server.
  // May be empty to have no authentication.
  string auth_username = 7;
  string auth_password = 8;

  // Include these SIP X-* headers in INVITE request.
  // These headers are sent as-is and may help identify this call as coming from LiveKit for the other SIP endpoint.
  map<string, string> headers = 9;
  // Map SIP X-* headers from 200 OK to SIP participant attributes.
  // Keys are the names of X-* headers and values are the names of attributes they will be mapped to.
  map<string, string> headers_to_attributes = 10;
}

message GetSIPInboundTrunkRequest {
  string sip_trunk_id = 1;
}

message GetSIPInboundTrunkResponse {
  SIPInboundTrunkInfo trunk = 1;
}

message GetSIPOutboundTrunkRequest {
  string sip_trunk_id = 1;
}

message GetSIPOutboundTrunkResponse {
  SIPOutboundTrunkInfo trunk = 1;
}

message ListSIPTrunkRequest {
  option deprecated = true;
}

message ListSIPTrunkResponse {
  option deprecated = true;
  repeated SIPTrunkInfo items = 1;
}

message ListSIPInboundTrunkRequest {
}

message ListSIPInboundTrunkResponse {
  repeated SIPInboundTrunkInfo items = 1;
}

message ListSIPOutboundTrunkRequest {
}

message ListSIPOutboundTrunkResponse {
  repeated SIPOutboundTrunkInfo items = 1;
}

message DeleteSIPTrunkRequest {
  string sip_trunk_id = 1;
}

message SIPDispatchRuleDirect {
  // What room should call be directed into
  string room_name = 1;

  // Optional pin required to enter room
  string pin = 2;
}

message SIPDispatchRuleIndividual {
  // Prefix used on new room name
  string room_prefix = 1;

  // Optional pin required to enter room
  string pin = 2;
}

message SIPDispatchRuleCallee {
  // Prefix used on new room name
  string room_prefix = 1;

  // Optional pin required to enter room
  string pin = 2;

  // Optionally append random suffix
  bool randomize = 3;
}

message SIPDispatchRule {
  oneof rule {
    // SIPDispatchRuleDirect is a `SIP Dispatch Rule` that puts a user directly into a room
    // This places users into an existing room. Optionally you can require a pin before a user can
    // enter the room
    SIPDispatchRuleDirect dispatch_rule_direct = 1;

    // SIPDispatchRuleIndividual is a `SIP Dispatch Rule` that creates a new room for each caller.
    SIPDispatchRuleIndividual dispatch_rule_individual = 2;

    // SIPDispatchRuleCallee is a `SIP Dispatch Rule` that creates a new room for each callee.
    SIPDispatchRuleCallee dispatch_rule_callee = 3;
  }
}

message CreateSIPDispatchRuleRequest {
  SIPDispatchRule rule = 1;

  // What trunks are accepted for this dispatch rule
  // If empty all trunks will match this dispatch rule
  repeated string trunk_ids = 2;

  // By default the From value (Phone number) is used for participant name/identity and added to attributes.
  // If true, a random value for identity will be used and numbers will be omitted from attributes.
  bool hide_phone_number = 3;

  // Dispatch Rule will only accept a call made to these numbers (if set).
  repeated string inbound_numbers = 6;

  // Optional human-readable name for the Dispatch Rule.
  string name = 4;
  // User-defined metadata for the Dispatch Rule.
  // Participants created by this rule will inherit this metadata.
  string metadata = 5;
  // User-defined attributes for the Dispatch Rule.
  // Participants created by this rule will inherit these attributes.
  map<string, string> attributes = 7;

  // NEXT ID: 8
}

message SIPDispatchRuleInfo {
  string sip_dispatch_rule_id = 1;
  SIPDispatchRule rule = 2;
  repeated string trunk_ids = 3;
  bool hide_phone_number = 4;
  // Dispatch Rule will only accept a call made to these numbers (if set).
  repeated string inbound_numbers = 7;

  // Human-readable name for the Dispatch Rule.
  string name = 5;
  // User-defined metadata for the Dispatch Rule.
  // Participants created by this rule will inherit this metadata.
  string metadata = 6;
  // User-defined attributes for the Dispatch Rule.
  // Participants created by this rule will inherit these attributes.
  map<string, string> attributes = 8;

  // NEXT ID: 9
}

message ListSIPDispatchRuleRequest {
}

message ListSIPDispatchRuleResponse {
  repeated SIPDispatchRuleInfo items = 1;
}

message DeleteSIPDispatchRuleRequest {
  string sip_dispatch_rule_id = 1;
}

// A SIP Participant is a singular SIP session connected to a LiveKit room via
// a SIP Trunk into a SIP DispatchRule
message CreateSIPParticipantRequest {
  // What SIP Trunk should be used to dial the user
  string sip_trunk_id = 1;

  // What number should be dialed via SIP
  string sip_call_to = 2;

  // What LiveKit room should this participant be connected too
  string room_name = 3;

  // Optional identity of the participant in LiveKit room
  string participant_identity = 4;

  // Optional name of the participant in LiveKit room
  string participant_name = 7;

  // Optional user-defined metadata. Will be attached to a created Participant in the room.
  string participant_metadata = 8;
  // Optional user-defined attributes. Will be attached to a created Participant in the room.
  map<string, string> participant_attributes = 9;

  // Optionally send following DTMF digits (extension codes) when making a call.
  // Character 'w' can be used to add a 0.5 sec delay.
  string dtmf = 5;

  // Optionally play ringtone in the room as an audible indicator for existing participants
  bool play_ringtone = 6;

  // By default the From value (Phone number) is used for participant name/identity (if not set) and added to attributes.
  // If true, a random value for identity will be used and numbers will be omitted from attributes.
  bool hide_phone_number = 10;

  // Max time for the callee to answer the call.
  google.protobuf.Duration ringing_timeout = 11;
  // Max call duration.
  google.protobuf.Duration max_call_duration = 12;

  // NEXT ID: 13
}

message SIPParticipantInfo {
  string participant_id = 1;
  string participant_identity = 2;
  string room_name = 3;
  string sip_call_id = 4;
}

message TransferSIPParticipantRequest {
  string participant_identity = 1;
  string room_name = 2;
  string transfer_to = 3;
}

message SIPCallInfo {
  string call_id = 1;
  string trunk_id = 2;
  string room_name = 3;
  string room_id = 4; // ID of the current/previous room published to
  string participant_identity = 5;
  SIPUri from_uri = 6;
  SIPUri to_uri = 7;
  SIPCallStatus call_status = 8;
  int64 started_at = 9;
  int64 ended_at = 10;
  DisconnectReason disconnect_reason = 11;
}

message SIPUri {
  string user = 1;
  string host = 2;
  string ip = 3;
  string port = 4;
  SIPTransport transport = 5;
}

enum SIPCallStatus { 
  SCS_CALL_INCOMING = 0; // Incoming call is being handled by the SIP service. The SIP participant hasn't joined a LiveKit room yet
  SCS_PARTICIPANT_JOINED = 1; // SIP participant for outgoing call has been created. The SIP outgoing call is being established
  SCS_ACTIVE = 2; // Call is ongoing. SIP participant is active in the LiveKit room
  SCS_DISCONNECTED = 3; // Call has ended
}
