// Code generated by protoc-gen-psrpc v0.2.9, DO NOT EDIT.
// source: rpc/room.proto

package rpc

import context "context"
import psrpc "github.com/livekit/psrpc"
import version "github.com/livekit/psrpc/version"
import livekit "github.com/livekit/protocol/livekit"
import livekit4 "github.com/livekit/protocol/livekit"

var _ = version.PsrpcVersion_0_2_9

// =====================
// Room Client Interface
// =====================

type RoomClient[ParticipantTopicType, RoomTopicType ~string] interface {
	RemoveParticipant(ctx context.Context, participant ParticipantTopicType, req *livekit4.RoomParticipantIdentity, opts ...psrpc.RequestOption) (*livekit4.RemoveParticipantResponse, error)

	MutePublishedTrack(ctx context.Context, participant ParticipantTopicType, req *livekit4.MuteRoomTrackRequest, opts ...psrpc.RequestOption) (*livekit4.MuteRoomTrackResponse, error)

	UpdateParticipant(ctx context.Context, participant ParticipantTopicType, req *livekit4.UpdateParticipantRequest, opts ...psrpc.RequestOption) (*livekit.ParticipantInfo, error)

	UpdateSubscriptions(ctx context.Context, participant ParticipantTopicType, req *livekit4.UpdateSubscriptionsRequest, opts ...psrpc.RequestOption) (*livekit4.UpdateSubscriptionsResponse, error)

	DeleteRoom(ctx context.Context, room RoomTopicType, req *livekit4.DeleteRoomRequest, opts ...psrpc.RequestOption) (*livekit4.DeleteRoomResponse, error)

	SendData(ctx context.Context, room RoomTopicType, req *livekit4.SendDataRequest, opts ...psrpc.RequestOption) (*livekit4.SendDataResponse, error)

	UpdateRoomMetadata(ctx context.Context, room RoomTopicType, req *livekit4.UpdateRoomMetadataRequest, opts ...psrpc.RequestOption) (*livekit.Room, error)
}

// =========================
// Room ServerImpl Interface
// =========================

type RoomServerImpl interface {
	RemoveParticipant(context.Context, *livekit4.RoomParticipantIdentity) (*livekit4.RemoveParticipantResponse, error)

	MutePublishedTrack(context.Context, *livekit4.MuteRoomTrackRequest) (*livekit4.MuteRoomTrackResponse, error)

	UpdateParticipant(context.Context, *livekit4.UpdateParticipantRequest) (*livekit.ParticipantInfo, error)

	UpdateSubscriptions(context.Context, *livekit4.UpdateSubscriptionsRequest) (*livekit4.UpdateSubscriptionsResponse, error)

	DeleteRoom(context.Context, *livekit4.DeleteRoomRequest) (*livekit4.DeleteRoomResponse, error)

	SendData(context.Context, *livekit4.SendDataRequest) (*livekit4.SendDataResponse, error)

	UpdateRoomMetadata(context.Context, *livekit4.UpdateRoomMetadataRequest) (*livekit.Room, error)
}

// =====================
// Room Server Interface
// =====================

type RoomServer[ParticipantTopicType, RoomTopicType ~string] interface {
	RegisterRemoveParticipantTopic(participant ParticipantTopicType) error
	DeregisterRemoveParticipantTopic(participant ParticipantTopicType)
	RegisterMutePublishedTrackTopic(participant ParticipantTopicType) error
	DeregisterMutePublishedTrackTopic(participant ParticipantTopicType)
	RegisterUpdateParticipantTopic(participant ParticipantTopicType) error
	DeregisterUpdateParticipantTopic(participant ParticipantTopicType)
	RegisterUpdateSubscriptionsTopic(participant ParticipantTopicType) error
	DeregisterUpdateSubscriptionsTopic(participant ParticipantTopicType)
	RegisterDeleteRoomTopic(room RoomTopicType) error
	DeregisterDeleteRoomTopic(room RoomTopicType)
	RegisterSendDataTopic(room RoomTopicType) error
	DeregisterSendDataTopic(room RoomTopicType)
	RegisterUpdateRoomMetadataTopic(room RoomTopicType) error
	DeregisterUpdateRoomMetadataTopic(room RoomTopicType)
	RegisterAllParticipantTopics(participant ParticipantTopicType) error
	DeregisterAllParticipantTopics(participant ParticipantTopicType)
	RegisterAllRoomTopics(room RoomTopicType) error
	DeregisterAllRoomTopics(room RoomTopicType)

	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// ===========
// Room Client
// ===========

type roomClient[ParticipantTopicType, RoomTopicType ~string] struct {
	client *psrpc.RPCClient
}

// NewRoomClient creates a psrpc client that implements the RoomClient interface.
func NewRoomClient[ParticipantTopicType, RoomTopicType ~string](clientID string, bus psrpc.MessageBus, opts ...psrpc.ClientOption) (RoomClient[ParticipantTopicType, RoomTopicType], error) {
	rpcClient, err := psrpc.NewRPCClient("Room", clientID, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &roomClient[ParticipantTopicType, RoomTopicType]{
		client: rpcClient,
	}, nil
}

func (c *roomClient[ParticipantTopicType, RoomTopicType]) RemoveParticipant(ctx context.Context, participant ParticipantTopicType, req *livekit4.RoomParticipantIdentity, opts ...psrpc.RequestOption) (*livekit4.RemoveParticipantResponse, error) {
	return psrpc.RequestSingle[*livekit4.RemoveParticipantResponse](ctx, c.client, "RemoveParticipant", []string{string(participant)}, true, req, opts...)
}

func (c *roomClient[ParticipantTopicType, RoomTopicType]) MutePublishedTrack(ctx context.Context, participant ParticipantTopicType, req *livekit4.MuteRoomTrackRequest, opts ...psrpc.RequestOption) (*livekit4.MuteRoomTrackResponse, error) {
	return psrpc.RequestSingle[*livekit4.MuteRoomTrackResponse](ctx, c.client, "MutePublishedTrack", []string{string(participant)}, true, req, opts...)
}

func (c *roomClient[ParticipantTopicType, RoomTopicType]) UpdateParticipant(ctx context.Context, participant ParticipantTopicType, req *livekit4.UpdateParticipantRequest, opts ...psrpc.RequestOption) (*livekit.ParticipantInfo, error) {
	return psrpc.RequestSingle[*livekit.ParticipantInfo](ctx, c.client, "UpdateParticipant", []string{string(participant)}, true, req, opts...)
}

func (c *roomClient[ParticipantTopicType, RoomTopicType]) UpdateSubscriptions(ctx context.Context, participant ParticipantTopicType, req *livekit4.UpdateSubscriptionsRequest, opts ...psrpc.RequestOption) (*livekit4.UpdateSubscriptionsResponse, error) {
	return psrpc.RequestSingle[*livekit4.UpdateSubscriptionsResponse](ctx, c.client, "UpdateSubscriptions", []string{string(participant)}, true, req, opts...)
}

func (c *roomClient[ParticipantTopicType, RoomTopicType]) DeleteRoom(ctx context.Context, room RoomTopicType, req *livekit4.DeleteRoomRequest, opts ...psrpc.RequestOption) (*livekit4.DeleteRoomResponse, error) {
	return psrpc.RequestSingle[*livekit4.DeleteRoomResponse](ctx, c.client, "DeleteRoom", []string{string(room)}, true, req, opts...)
}

func (c *roomClient[ParticipantTopicType, RoomTopicType]) SendData(ctx context.Context, room RoomTopicType, req *livekit4.SendDataRequest, opts ...psrpc.RequestOption) (*livekit4.SendDataResponse, error) {
	return psrpc.RequestSingle[*livekit4.SendDataResponse](ctx, c.client, "SendData", []string{string(room)}, true, req, opts...)
}

func (c *roomClient[ParticipantTopicType, RoomTopicType]) UpdateRoomMetadata(ctx context.Context, room RoomTopicType, req *livekit4.UpdateRoomMetadataRequest, opts ...psrpc.RequestOption) (*livekit.Room, error) {
	return psrpc.RequestSingle[*livekit.Room](ctx, c.client, "UpdateRoomMetadata", []string{string(room)}, true, req, opts...)
}

// ===========
// Room Server
// ===========

type roomServer[ParticipantTopicType, RoomTopicType ~string] struct {
	svc RoomServerImpl
	rpc *psrpc.RPCServer
}

// NewRoomServer builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewRoomServer[ParticipantTopicType, RoomTopicType ~string](serverID string, svc RoomServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (RoomServer[ParticipantTopicType, RoomTopicType], error) {
	s := psrpc.NewRPCServer("Room", serverID, bus, opts...)

	return &roomServer[ParticipantTopicType, RoomTopicType]{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) RegisterRemoveParticipantTopic(participant ParticipantTopicType) error {
	return psrpc.RegisterHandler(s.rpc, "RemoveParticipant", []string{string(participant)}, s.svc.RemoveParticipant, nil, true)
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) DeregisterRemoveParticipantTopic(participant ParticipantTopicType) {
	s.rpc.DeregisterHandler("RemoveParticipant", []string{string(participant)})
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) RegisterMutePublishedTrackTopic(participant ParticipantTopicType) error {
	return psrpc.RegisterHandler(s.rpc, "MutePublishedTrack", []string{string(participant)}, s.svc.MutePublishedTrack, nil, true)
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) DeregisterMutePublishedTrackTopic(participant ParticipantTopicType) {
	s.rpc.DeregisterHandler("MutePublishedTrack", []string{string(participant)})
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) RegisterUpdateParticipantTopic(participant ParticipantTopicType) error {
	return psrpc.RegisterHandler(s.rpc, "UpdateParticipant", []string{string(participant)}, s.svc.UpdateParticipant, nil, true)
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) DeregisterUpdateParticipantTopic(participant ParticipantTopicType) {
	s.rpc.DeregisterHandler("UpdateParticipant", []string{string(participant)})
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) RegisterUpdateSubscriptionsTopic(participant ParticipantTopicType) error {
	return psrpc.RegisterHandler(s.rpc, "UpdateSubscriptions", []string{string(participant)}, s.svc.UpdateSubscriptions, nil, true)
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) DeregisterUpdateSubscriptionsTopic(participant ParticipantTopicType) {
	s.rpc.DeregisterHandler("UpdateSubscriptions", []string{string(participant)})
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) RegisterDeleteRoomTopic(room RoomTopicType) error {
	return psrpc.RegisterHandler(s.rpc, "DeleteRoom", []string{string(room)}, s.svc.DeleteRoom, nil, true)
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) DeregisterDeleteRoomTopic(room RoomTopicType) {
	s.rpc.DeregisterHandler("DeleteRoom", []string{string(room)})
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) RegisterSendDataTopic(room RoomTopicType) error {
	return psrpc.RegisterHandler(s.rpc, "SendData", []string{string(room)}, s.svc.SendData, nil, true)
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) DeregisterSendDataTopic(room RoomTopicType) {
	s.rpc.DeregisterHandler("SendData", []string{string(room)})
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) RegisterUpdateRoomMetadataTopic(room RoomTopicType) error {
	return psrpc.RegisterHandler(s.rpc, "UpdateRoomMetadata", []string{string(room)}, s.svc.UpdateRoomMetadata, nil, true)
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) DeregisterUpdateRoomMetadataTopic(room RoomTopicType) {
	s.rpc.DeregisterHandler("UpdateRoomMetadata", []string{string(room)})
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) allParticipantTopicRegisterers() psrpc.RegistererSlice {
	return psrpc.RegistererSlice{
		psrpc.NewRegisterer(s.RegisterRemoveParticipantTopic, s.DeregisterRemoveParticipantTopic),
		psrpc.NewRegisterer(s.RegisterMutePublishedTrackTopic, s.DeregisterMutePublishedTrackTopic),
		psrpc.NewRegisterer(s.RegisterUpdateParticipantTopic, s.DeregisterUpdateParticipantTopic),
		psrpc.NewRegisterer(s.RegisterUpdateSubscriptionsTopic, s.DeregisterUpdateSubscriptionsTopic),
	}
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) RegisterAllParticipantTopics(participant ParticipantTopicType) error {
	return s.allParticipantTopicRegisterers().Register(participant)
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) DeregisterAllParticipantTopics(participant ParticipantTopicType) {
	s.allParticipantTopicRegisterers().Deregister(participant)
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) allRoomTopicRegisterers() psrpc.RegistererSlice {
	return psrpc.RegistererSlice{
		psrpc.NewRegisterer(s.RegisterDeleteRoomTopic, s.DeregisterDeleteRoomTopic),
		psrpc.NewRegisterer(s.RegisterSendDataTopic, s.DeregisterSendDataTopic),
		psrpc.NewRegisterer(s.RegisterUpdateRoomMetadataTopic, s.DeregisterUpdateRoomMetadataTopic),
	}
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) RegisterAllRoomTopics(room RoomTopicType) error {
	return s.allRoomTopicRegisterers().Register(room)
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) DeregisterAllRoomTopics(room RoomTopicType) {
	s.allRoomTopicRegisterers().Deregister(room)
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) Shutdown() {
	s.rpc.Close(false)
}

func (s *roomServer[ParticipantTopicType, RoomTopicType]) Kill() {
	s.rpc.Close(true)
}

var psrpcFileDescriptor4 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0x29, 0x8e, 0x21, 0x91, 0x0d, 0x16, 0x45, 0x6a, 0xfd, 0xc3, 0xac, 0xbb, 0x12, 0x69,
	0x41, 0xdf, 0x40, 0x76, 0xe3, 0xc5, 0x60, 0x74, 0x8a, 0x20, 0xc8, 0x68, 0xd3, 0xe3, 0x16, 0xd6,
	0x36, 0x31, 0x4d, 0x0b, 0xbb, 0xf2, 0x4e, 0xd8, 0x3b, 0xf8, 0x14, 0x7b, 0x42, 0xe9, 0xba, 0xb4,
	0xdd, 0xdc, 0xd4, 0xdd, 0xb4, 0xf4, 0xfb, 0xce, 0xf9, 0x7e, 0xc9, 0x69, 0x82, 0x9a, 0x82, 0x13,
	0x5b, 0x30, 0x16, 0x5a, 0x5c, 0x30, 0xc9, 0xf0, 0x9e, 0xe0, 0xc4, 0x68, 0x30, 0x2e, 0x29, 0x8b,
	0xe2, 0x5c, 0x33, 0x8e, 0x02, 0x9a, 0xc2, 0x84, 0xca, 0x61, 0xc8, 0x7c, 0x08, 0x94, 0x8a, 0x95,
	0x5a, 0x76, 0xdf, 0x7e, 0xd5, 0x51, 0xcd, 0x61, 0x2c, 0xc4, 0x1f, 0xa8, 0xe5, 0x40, 0xc8, 0x52,
	0xe8, 0xbb, 0x42, 0x52, 0x42, 0xb9, 0x1b, 0x49, 0xdc, 0xb6, 0x96, 0x2d, 0x56, 0x56, 0x53, 0x71,
	0x1e, 0x7c, 0x88, 0x24, 0x95, 0x53, 0xc3, 0x2c, 0x2b, 0xd6, 0xbb, 0x1d, 0x88, 0x39, 0x8b, 0x62,
	0x30, 0x3b, 0xf3, 0x99, 0xd6, 0xd6, 0x35, 0xf3, 0x0c, 0x1d, 0xf0, 0x4a, 0x78, 0xf5, 0x43, 0xd7,
	0xf0, 0x14, 0xe1, 0x5e, 0x22, 0xa1, 0x9f, 0x78, 0x01, 0x8d, 0xc7, 0xe0, 0x3f, 0x0a, 0x97, 0x4c,
	0xf0, 0x79, 0x91, 0x9f, 0x99, 0xd9, 0x2a, 0x16, 0xba, 0x03, 0xef, 0x09, 0xc4, 0xd2, 0xb8, 0xd8,
	0x66, 0xef, 0x84, 0x4e, 0x51, 0xeb, 0x89, 0xfb, 0xae, 0x5c, 0xd9, 0xfb, 0x65, 0x11, 0xfd, 0xc3,
	0x53, 0x74, 0xbd, 0x28, 0xa9, 0x8e, 0x26, 0x7a, 0x63, 0xff, 0xe4, 0x7e, 0x6a, 0xe8, 0x30, 0x0f,
	0x1f, 0x24, 0x5e, 0x4c, 0x04, 0xcd, 0x7f, 0x22, 0xbe, 0x5a, 0x43, 0xaf, 0xb8, 0x0a, 0xde, 0xf9,
	0xbd, 0x68, 0xa7, 0x01, 0xbc, 0x22, 0xd4, 0x85, 0x00, 0xf2, 0x09, 0x62, 0xa3, 0x48, 0x2e, 0x45,
	0x45, 0x3d, 0xdd, 0xe8, 0x2d, 0x61, 0xc7, 0xf3, 0x99, 0x86, 0x75, 0xcd, 0x6c, 0xa2, 0x5a, 0x76,
	0xc4, 0xf0, 0xe2, 0xa9, 0x6b, 0xf8, 0x19, 0xed, 0x0f, 0x20, 0xf2, 0xbb, 0xae, 0x74, 0x71, 0x39,
	0x33, 0x25, 0xa9, 0xe8, 0x93, 0x0d, 0xce, 0x1f, 0xc1, 0x43, 0x84, 0xf3, 0xcd, 0x67, 0xcb, 0xe8,
	0x81, 0x74, 0xfd, 0x0c, 0x61, 0xae, 0x4d, 0xa6, 0x6a, 0x2a, 0x58, 0x63, 0xe5, 0x64, 0x6f, 0x03,
	0xdc, 0xdf, 0xbc, 0x5c, 0x8f, 0xa8, 0x1c, 0x27, 0x9e, 0x45, 0x58, 0x68, 0x2f, 0x5b, 0x8a, 0x37,
	0x9f, 0x8c, 0xec, 0x18, 0x44, 0x4a, 0x09, 0xd8, 0x82, 0x13, 0xaf, 0xbe, 0xb8, 0x53, 0x77, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x17, 0x30, 0x2d, 0x29, 0xa3, 0x03, 0x00, 0x00,
}
