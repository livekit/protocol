// Code generated by protoc-gen-psrpc v0.6.0, DO NOT EDIT.
// source: rpc/signalv2.proto

package rpc

import (
	"context"

	"github.com/livekit/psrpc"
	"github.com/livekit/psrpc/pkg/client"
	"github.com/livekit/psrpc/pkg/info"
	"github.com/livekit/psrpc/pkg/rand"
	"github.com/livekit/psrpc/pkg/server"
	"github.com/livekit/psrpc/version"
)
import google_protobuf "google.golang.org/protobuf/types/known/emptypb"

var _ = version.PsrpcVersion_0_6

// =========================
// Signalv2 Client Interface
// =========================

type Signalv2Client[NodeIdTopicType ~string] interface {
	RelaySignalv2Connect(ctx context.Context, nodeId NodeIdTopicType, req *RelaySignalv2ConnectRequest, opts ...psrpc.RequestOption) (*RelaySignalv2ConnectResponse, error)

	// Close immediately, without waiting for pending RPCs
	Close()
}

// =============================
// Signalv2 ServerImpl Interface
// =============================

type Signalv2ServerImpl interface {
	RelaySignalv2Connect(context.Context, *RelaySignalv2ConnectRequest) (*RelaySignalv2ConnectResponse, error)
}

// =========================
// Signalv2 Server Interface
// =========================

type Signalv2Server[NodeIdTopicType ~string] interface {
	RegisterRelaySignalv2ConnectTopic(nodeId NodeIdTopicType) error
	DeregisterRelaySignalv2ConnectTopic(nodeId NodeIdTopicType)
	RegisterAllNodeTopics(nodeId NodeIdTopicType) error
	DeregisterAllNodeTopics(nodeId NodeIdTopicType)

	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// ===============
// Signalv2 Client
// ===============

type signalv2Client[NodeIdTopicType ~string] struct {
	client *client.RPCClient
}

// NewSignalv2Client creates a psrpc client that implements the Signalv2Client interface.
func NewSignalv2Client[NodeIdTopicType ~string](bus psrpc.MessageBus, opts ...psrpc.ClientOption) (Signalv2Client[NodeIdTopicType], error) {
	sd := &info.ServiceDefinition{
		Name: "Signalv2",
		ID:   rand.NewClientID(),
	}

	sd.RegisterMethod("RelaySignalv2Connect", false, false, false, true)

	rpcClient, err := client.NewRPCClient(sd, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &signalv2Client[NodeIdTopicType]{
		client: rpcClient,
	}, nil
}

func (c *signalv2Client[NodeIdTopicType]) RelaySignalv2Connect(ctx context.Context, nodeId NodeIdTopicType, req *RelaySignalv2ConnectRequest, opts ...psrpc.RequestOption) (*RelaySignalv2ConnectResponse, error) {
	return client.RequestSingle[*RelaySignalv2ConnectResponse](ctx, c.client, "RelaySignalv2Connect", []string{string(nodeId)}, req, opts...)
}

func (s *signalv2Client[NodeIdTopicType]) Close() {
	s.client.Close()
}

// ===============
// Signalv2 Server
// ===============

type signalv2Server[NodeIdTopicType ~string] struct {
	svc Signalv2ServerImpl
	rpc *server.RPCServer
}

// NewSignalv2Server builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewSignalv2Server[NodeIdTopicType ~string](svc Signalv2ServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (Signalv2Server[NodeIdTopicType], error) {
	sd := &info.ServiceDefinition{
		Name: "Signalv2",
		ID:   rand.NewServerID(),
	}

	s := server.NewRPCServer(sd, bus, opts...)

	sd.RegisterMethod("RelaySignalv2Connect", false, false, false, true)
	return &signalv2Server[NodeIdTopicType]{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *signalv2Server[NodeIdTopicType]) RegisterRelaySignalv2ConnectTopic(nodeId NodeIdTopicType) error {
	return server.RegisterHandler(s.rpc, "RelaySignalv2Connect", []string{string(nodeId)}, s.svc.RelaySignalv2Connect, nil)
}

func (s *signalv2Server[NodeIdTopicType]) DeregisterRelaySignalv2ConnectTopic(nodeId NodeIdTopicType) {
	s.rpc.DeregisterHandler("RelaySignalv2Connect", []string{string(nodeId)})
}

func (s *signalv2Server[NodeIdTopicType]) allNodeTopicRegisterers() server.RegistererSlice {
	return server.RegistererSlice{
		server.NewRegisterer(s.RegisterRelaySignalv2ConnectTopic, s.DeregisterRelaySignalv2ConnectTopic),
	}
}

func (s *signalv2Server[NodeIdTopicType]) RegisterAllNodeTopics(nodeId NodeIdTopicType) error {
	return s.allNodeTopicRegisterers().Register(nodeId)
}

func (s *signalv2Server[NodeIdTopicType]) DeregisterAllNodeTopics(nodeId NodeIdTopicType) {
	s.allNodeTopicRegisterers().Deregister(nodeId)
}

func (s *signalv2Server[NodeIdTopicType]) Shutdown() {
	s.rpc.Close(false)
}

func (s *signalv2Server[NodeIdTopicType]) Kill() {
	s.rpc.Close(true)
}

// ====================================
// Signalv2Participant Client Interface
// ====================================

type Signalv2ParticipantClient[TopicTopicType ~string] interface {
	RelaySignalv2Participant(ctx context.Context, topic TopicTopicType, req *RelaySignalv2ParticipantRequest, opts ...psrpc.RequestOption) (*RelaySignalv2ParticipantResponse, error)

	RelaySignalv2ParticipantDeleteSession(ctx context.Context, topic TopicTopicType, req *RelaySignalv2ParticipantDeleteSessionRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error)

	// Close immediately, without waiting for pending RPCs
	Close()
}

// ========================================
// Signalv2Participant ServerImpl Interface
// ========================================

type Signalv2ParticipantServerImpl interface {
	RelaySignalv2Participant(context.Context, *RelaySignalv2ParticipantRequest) (*RelaySignalv2ParticipantResponse, error)

	RelaySignalv2ParticipantDeleteSession(context.Context, *RelaySignalv2ParticipantDeleteSessionRequest) (*google_protobuf.Empty, error)
}

// ====================================
// Signalv2Participant Server Interface
// ====================================

type Signalv2ParticipantServer[TopicTopicType ~string] interface {
	RegisterRelaySignalv2ParticipantTopic(topic TopicTopicType) error
	DeregisterRelaySignalv2ParticipantTopic(topic TopicTopicType)
	RegisterRelaySignalv2ParticipantDeleteSessionTopic(topic TopicTopicType) error
	DeregisterRelaySignalv2ParticipantDeleteSessionTopic(topic TopicTopicType)
	RegisterAllCommonTopics(topic TopicTopicType) error
	DeregisterAllCommonTopics(topic TopicTopicType)

	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// ==========================
// Signalv2Participant Client
// ==========================

type signalv2ParticipantClient[TopicTopicType ~string] struct {
	client *client.RPCClient
}

// NewSignalv2ParticipantClient creates a psrpc client that implements the Signalv2ParticipantClient interface.
func NewSignalv2ParticipantClient[TopicTopicType ~string](bus psrpc.MessageBus, opts ...psrpc.ClientOption) (Signalv2ParticipantClient[TopicTopicType], error) {
	sd := &info.ServiceDefinition{
		Name: "Signalv2Participant",
		ID:   rand.NewClientID(),
	}

	sd.RegisterMethod("RelaySignalv2Participant", false, false, true, true)
	sd.RegisterMethod("RelaySignalv2ParticipantDeleteSession", false, false, true, true)

	rpcClient, err := client.NewRPCClient(sd, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &signalv2ParticipantClient[TopicTopicType]{
		client: rpcClient,
	}, nil
}

func (c *signalv2ParticipantClient[TopicTopicType]) RelaySignalv2Participant(ctx context.Context, topic TopicTopicType, req *RelaySignalv2ParticipantRequest, opts ...psrpc.RequestOption) (*RelaySignalv2ParticipantResponse, error) {
	return client.RequestSingle[*RelaySignalv2ParticipantResponse](ctx, c.client, "RelaySignalv2Participant", []string{string(topic)}, req, opts...)
}

func (c *signalv2ParticipantClient[TopicTopicType]) RelaySignalv2ParticipantDeleteSession(ctx context.Context, topic TopicTopicType, req *RelaySignalv2ParticipantDeleteSessionRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error) {
	return client.RequestSingle[*google_protobuf.Empty](ctx, c.client, "RelaySignalv2ParticipantDeleteSession", []string{string(topic)}, req, opts...)
}

func (s *signalv2ParticipantClient[TopicTopicType]) Close() {
	s.client.Close()
}

// ==========================
// Signalv2Participant Server
// ==========================

type signalv2ParticipantServer[TopicTopicType ~string] struct {
	svc Signalv2ParticipantServerImpl
	rpc *server.RPCServer
}

// NewSignalv2ParticipantServer builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewSignalv2ParticipantServer[TopicTopicType ~string](svc Signalv2ParticipantServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (Signalv2ParticipantServer[TopicTopicType], error) {
	sd := &info.ServiceDefinition{
		Name: "Signalv2Participant",
		ID:   rand.NewServerID(),
	}

	s := server.NewRPCServer(sd, bus, opts...)

	sd.RegisterMethod("RelaySignalv2Participant", false, false, true, true)
	sd.RegisterMethod("RelaySignalv2ParticipantDeleteSession", false, false, true, true)
	return &signalv2ParticipantServer[TopicTopicType]{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *signalv2ParticipantServer[TopicTopicType]) RegisterRelaySignalv2ParticipantTopic(topic TopicTopicType) error {
	return server.RegisterHandler(s.rpc, "RelaySignalv2Participant", []string{string(topic)}, s.svc.RelaySignalv2Participant, nil)
}

func (s *signalv2ParticipantServer[TopicTopicType]) DeregisterRelaySignalv2ParticipantTopic(topic TopicTopicType) {
	s.rpc.DeregisterHandler("RelaySignalv2Participant", []string{string(topic)})
}

func (s *signalv2ParticipantServer[TopicTopicType]) RegisterRelaySignalv2ParticipantDeleteSessionTopic(topic TopicTopicType) error {
	return server.RegisterHandler(s.rpc, "RelaySignalv2ParticipantDeleteSession", []string{string(topic)}, s.svc.RelaySignalv2ParticipantDeleteSession, nil)
}

func (s *signalv2ParticipantServer[TopicTopicType]) DeregisterRelaySignalv2ParticipantDeleteSessionTopic(topic TopicTopicType) {
	s.rpc.DeregisterHandler("RelaySignalv2ParticipantDeleteSession", []string{string(topic)})
}

func (s *signalv2ParticipantServer[TopicTopicType]) allCommonTopicRegisterers() server.RegistererSlice {
	return server.RegistererSlice{
		server.NewRegisterer(s.RegisterRelaySignalv2ParticipantTopic, s.DeregisterRelaySignalv2ParticipantTopic),
		server.NewRegisterer(s.RegisterRelaySignalv2ParticipantDeleteSessionTopic, s.DeregisterRelaySignalv2ParticipantDeleteSessionTopic),
	}
}

func (s *signalv2ParticipantServer[TopicTopicType]) RegisterAllCommonTopics(topic TopicTopicType) error {
	return s.allCommonTopicRegisterers().Register(topic)
}

func (s *signalv2ParticipantServer[TopicTopicType]) DeregisterAllCommonTopics(topic TopicTopicType) {
	s.allCommonTopicRegisterers().Deregister(topic)
}

func (s *signalv2ParticipantServer[TopicTopicType]) Shutdown() {
	s.rpc.Close(false)
}

func (s *signalv2ParticipantServer[TopicTopicType]) Kill() {
	s.rpc.Close(true)
}

var psrpcFileDescriptor10 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4d, 0x4f, 0x02, 0x31,
	0x10, 0x86, 0x53, 0x3f, 0xd0, 0x34, 0x31, 0xc1, 0xe2, 0xc7, 0xba, 0x1c, 0x04, 0x23, 0xd7, 0x6e,
	0xc4, 0x7f, 0xe0, 0xc7, 0xdd, 0xc0, 0xcd, 0x0b, 0x59, 0xca, 0xb8, 0x36, 0x76, 0x3b, 0xb5, 0x1d,
	0x88, 0x5c, 0x8d, 0x17, 0x0e, 0xfe, 0x11, 0x8f, 0xfc, 0x42, 0x03, 0xec, 0x26, 0x10, 0x75, 0xbd,
	0x34, 0x99, 0x79, 0xde, 0x99, 0x79, 0x93, 0xb7, 0x5c, 0x78, 0xa7, 0x92, 0xa0, 0x33, 0x9b, 0x9a,
	0x49, 0x57, 0x3a, 0x8f, 0x84, 0x62, 0xdb, 0x3b, 0x15, 0x37, 0x33, 0xc4, 0xcc, 0x40, 0xb2, 0x6c,
	0x0d, 0xc7, 0x4f, 0x09, 0xe4, 0x8e, 0xa6, 0x2b, 0x45, 0x7c, 0x80, 0x8e, 0x34, 0xda, 0x50, 0x94,
	0xd1, 0xfa, 0x92, 0x01, 0x4d, 0x1d, 0x14, 0xa4, 0xfb, 0xc1, 0xf8, 0x7e, 0xbf, 0x00, 0xe2, 0x8d,
	0x1f, 0xf5, 0xc0, 0xa4, 0xd3, 0xb2, 0x71, 0x8b, 0xd6, 0x82, 0x22, 0xd1, 0x92, 0xde, 0x29, 0xf9,
	0x1b, 0xea, 0xc1, 0xeb, 0x18, 0x02, 0xc5, 0xed, 0x0a, 0x45, 0x70, 0x68, 0x03, 0x5c, 0x34, 0xe7,
	0x33, 0x76, 0x5a, 0x67, 0x71, 0x83, 0xef, 0x58, 0x1c, 0x81, 0xd8, 0x5b, 0xbc, 0x03, 0x3d, 0x8a,
	0x58, 0x8b, 0x75, 0xbf, 0xb6, 0x78, 0xa3, 0x1c, 0x7c, 0x48, 0x3d, 0x69, 0xa5, 0x5d, 0x6a, 0x49,
	0xbc, 0x33, 0x1e, 0x6d, 0x6c, 0x5d, 0x87, 0x97, 0x3f, 0x8f, 0xae, 0xe1, 0xd2, 0x5a, 0xe7, 0x1f,
	0x55, 0x61, 0xef, 0x6c, 0x3e, 0x63, 0xc7, 0x75, 0x16, 0x1f, 0xf2, 0x9a, 0xc2, 0x3c, 0x47, 0x2b,
	0x76, 0x09, 0x9d, 0x56, 0x11, 0x13, 0x9f, 0x8c, 0x77, 0xfe, 0x9a, 0xbf, 0x03, 0x03, 0x04, 0x7d,
	0x08, 0x41, 0xa3, 0x15, 0x57, 0x95, 0xb7, 0x36, 0xb4, 0xa5, 0xbd, 0x13, 0xb9, 0xca, 0x51, 0x96,
	0x39, 0xca, 0xfb, 0x45, 0x8e, 0x15, 0x7e, 0x6e, 0xda, 0x8f, 0xe7, 0x99, 0xa6, 0xe7, 0xf1, 0x50,
	0x2a, 0xcc, 0x13, 0xa3, 0x27, 0xf0, 0xa2, 0x69, 0xf5, 0x0f, 0x14, 0x9a, 0xc4, 0x3b, 0x35, 0xac,
	0x2d, 0xab, 0xeb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd6, 0xcc, 0xbb, 0x34, 0x3e, 0x02, 0x00,
	0x00,
}
