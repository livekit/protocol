// Code generated by protoc-gen-psrpc v0.5.1, DO NOT EDIT.
// source: rpc/io.proto

package rpc

import (
	"context"

	"github.com/livekit/psrpc"
	"github.com/livekit/psrpc/pkg/client"
	"github.com/livekit/psrpc/pkg/info"
	"github.com/livekit/psrpc/pkg/rand"
	"github.com/livekit/psrpc/pkg/server"
	"github.com/livekit/psrpc/version"
)
import google_protobuf "google.golang.org/protobuf/types/known/emptypb"
import livekit2 "github.com/livekit/protocol/livekit"

var _ = version.PsrpcVersion_0_5

// =======================
// IOInfo Client Interface
// =======================

type IOInfoClient interface {
	// egress
	CreateEgress(ctx context.Context, req *livekit2.EgressInfo, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error)

	UpdateEgress(ctx context.Context, req *livekit2.EgressInfo, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error)

	GetEgress(ctx context.Context, req *GetEgressRequest, opts ...psrpc.RequestOption) (*livekit2.EgressInfo, error)

	ListEgress(ctx context.Context, req *livekit2.ListEgressRequest, opts ...psrpc.RequestOption) (*livekit2.ListEgressResponse, error)

	// ingress
	GetIngressInfo(ctx context.Context, req *GetIngressInfoRequest, opts ...psrpc.RequestOption) (*GetIngressInfoResponse, error)

	UpdateIngressState(ctx context.Context, req *UpdateIngressStateRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error)

	// sip
	GetSIPTrunkAuthentication(ctx context.Context, req *GetSIPTrunkAuthenticationRequest, opts ...psrpc.RequestOption) (*GetSIPTrunkAuthenticationResponse, error)

	EvaluateSIPDispatchRules(ctx context.Context, req *EvaluateSIPDispatchRulesRequest, opts ...psrpc.RequestOption) (*EvaluateSIPDispatchRulesResponse, error)
}

// ===========================
// IOInfo ServerImpl Interface
// ===========================

type IOInfoServerImpl interface {
	// egress
	CreateEgress(context.Context, *livekit2.EgressInfo) (*google_protobuf.Empty, error)

	UpdateEgress(context.Context, *livekit2.EgressInfo) (*google_protobuf.Empty, error)

	GetEgress(context.Context, *GetEgressRequest) (*livekit2.EgressInfo, error)

	ListEgress(context.Context, *livekit2.ListEgressRequest) (*livekit2.ListEgressResponse, error)

	// ingress
	GetIngressInfo(context.Context, *GetIngressInfoRequest) (*GetIngressInfoResponse, error)

	UpdateIngressState(context.Context, *UpdateIngressStateRequest) (*google_protobuf.Empty, error)

	// sip
	GetSIPTrunkAuthentication(context.Context, *GetSIPTrunkAuthenticationRequest) (*GetSIPTrunkAuthenticationResponse, error)

	EvaluateSIPDispatchRules(context.Context, *EvaluateSIPDispatchRulesRequest) (*EvaluateSIPDispatchRulesResponse, error)
}

// =======================
// IOInfo Server Interface
// =======================

type IOInfoServer interface {

	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// =============
// IOInfo Client
// =============

type iOInfoClient struct {
	client *client.RPCClient
}

// NewIOInfoClient creates a psrpc client that implements the IOInfoClient interface.
func NewIOInfoClient(bus psrpc.MessageBus, opts ...psrpc.ClientOption) (IOInfoClient, error) {
	sd := &info.ServiceDefinition{
		Name: "IOInfo",
		ID:   rand.NewClientID(),
	}

	sd.RegisterMethod("CreateEgress", false, false, true, true)
	sd.RegisterMethod("UpdateEgress", false, false, true, true)
	sd.RegisterMethod("GetEgress", false, false, true, true)
	sd.RegisterMethod("ListEgress", false, false, true, true)
	sd.RegisterMethod("GetIngressInfo", false, false, true, true)
	sd.RegisterMethod("UpdateIngressState", false, false, true, true)
	sd.RegisterMethod("GetSIPTrunkAuthentication", false, false, true, true)
	sd.RegisterMethod("EvaluateSIPDispatchRules", false, false, true, true)

	rpcClient, err := client.NewRPCClient(sd, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &iOInfoClient{
		client: rpcClient,
	}, nil
}

func (c *iOInfoClient) CreateEgress(ctx context.Context, req *livekit2.EgressInfo, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error) {
	return client.RequestSingle[*google_protobuf.Empty](ctx, c.client, "CreateEgress", nil, req, opts...)
}

func (c *iOInfoClient) UpdateEgress(ctx context.Context, req *livekit2.EgressInfo, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error) {
	return client.RequestSingle[*google_protobuf.Empty](ctx, c.client, "UpdateEgress", nil, req, opts...)
}

func (c *iOInfoClient) GetEgress(ctx context.Context, req *GetEgressRequest, opts ...psrpc.RequestOption) (*livekit2.EgressInfo, error) {
	return client.RequestSingle[*livekit2.EgressInfo](ctx, c.client, "GetEgress", nil, req, opts...)
}

func (c *iOInfoClient) ListEgress(ctx context.Context, req *livekit2.ListEgressRequest, opts ...psrpc.RequestOption) (*livekit2.ListEgressResponse, error) {
	return client.RequestSingle[*livekit2.ListEgressResponse](ctx, c.client, "ListEgress", nil, req, opts...)
}

func (c *iOInfoClient) GetIngressInfo(ctx context.Context, req *GetIngressInfoRequest, opts ...psrpc.RequestOption) (*GetIngressInfoResponse, error) {
	return client.RequestSingle[*GetIngressInfoResponse](ctx, c.client, "GetIngressInfo", nil, req, opts...)
}

func (c *iOInfoClient) UpdateIngressState(ctx context.Context, req *UpdateIngressStateRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error) {
	return client.RequestSingle[*google_protobuf.Empty](ctx, c.client, "UpdateIngressState", nil, req, opts...)
}

func (c *iOInfoClient) GetSIPTrunkAuthentication(ctx context.Context, req *GetSIPTrunkAuthenticationRequest, opts ...psrpc.RequestOption) (*GetSIPTrunkAuthenticationResponse, error) {
	return client.RequestSingle[*GetSIPTrunkAuthenticationResponse](ctx, c.client, "GetSIPTrunkAuthentication", nil, req, opts...)
}

func (c *iOInfoClient) EvaluateSIPDispatchRules(ctx context.Context, req *EvaluateSIPDispatchRulesRequest, opts ...psrpc.RequestOption) (*EvaluateSIPDispatchRulesResponse, error) {
	return client.RequestSingle[*EvaluateSIPDispatchRulesResponse](ctx, c.client, "EvaluateSIPDispatchRules", nil, req, opts...)
}

// =============
// IOInfo Server
// =============

type iOInfoServer struct {
	svc IOInfoServerImpl
	rpc *server.RPCServer
}

// NewIOInfoServer builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewIOInfoServer(svc IOInfoServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (IOInfoServer, error) {
	sd := &info.ServiceDefinition{
		Name: "IOInfo",
		ID:   rand.NewServerID(),
	}

	s := server.NewRPCServer(sd, bus, opts...)

	sd.RegisterMethod("CreateEgress", false, false, true, true)
	var err error
	err = server.RegisterHandler(s, "CreateEgress", nil, svc.CreateEgress, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("UpdateEgress", false, false, true, true)
	err = server.RegisterHandler(s, "UpdateEgress", nil, svc.UpdateEgress, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("GetEgress", false, false, true, true)
	err = server.RegisterHandler(s, "GetEgress", nil, svc.GetEgress, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("ListEgress", false, false, true, true)
	err = server.RegisterHandler(s, "ListEgress", nil, svc.ListEgress, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("GetIngressInfo", false, false, true, true)
	err = server.RegisterHandler(s, "GetIngressInfo", nil, svc.GetIngressInfo, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("UpdateIngressState", false, false, true, true)
	err = server.RegisterHandler(s, "UpdateIngressState", nil, svc.UpdateIngressState, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("GetSIPTrunkAuthentication", false, false, true, true)
	err = server.RegisterHandler(s, "GetSIPTrunkAuthentication", nil, svc.GetSIPTrunkAuthentication, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("EvaluateSIPDispatchRules", false, false, true, true)
	err = server.RegisterHandler(s, "EvaluateSIPDispatchRules", nil, svc.EvaluateSIPDispatchRules, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	return &iOInfoServer{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *iOInfoServer) Shutdown() {
	s.rpc.Close(false)
}

func (s *iOInfoServer) Kill() {
	s.rpc.Close(true)
}

var psrpcFileDescriptor4 = []byte{
	// 740 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x6f, 0xdb, 0x38,
	0x10, 0x85, 0x3f, 0x13, 0x4f, 0xb2, 0x41, 0xc0, 0xd8, 0x59, 0x47, 0xc6, 0x6e, 0xbc, 0xde, 0xcd,
	0x22, 0x68, 0x03, 0x19, 0x4d, 0x0f, 0x3d, 0xf4, 0x94, 0xb6, 0x46, 0x2a, 0x34, 0x48, 0x0d, 0xa7,
	0xb9, 0xb4, 0x07, 0x41, 0x96, 0x68, 0x99, 0xb5, 0x4c, 0xb2, 0x24, 0x95, 0x20, 0xb7, 0x9e, 0xfa,
	0x07, 0xfa, 0x47, 0xfb, 0x13, 0x0a, 0x91, 0x94, 0xed, 0x7c, 0x38, 0x2e, 0x7a, 0xb2, 0xf9, 0x66,
	0xe6, 0xcd, 0xd3, 0x23, 0x67, 0x60, 0x53, 0xf0, 0xb0, 0x4b, 0x98, 0xcb, 0x05, 0x53, 0x0c, 0x95,
	0x04, 0x0f, 0x9d, 0x7a, 0x42, 0xae, 0xf0, 0x84, 0x28, 0x1f, 0xc7, 0x02, 0x4b, 0x69, 0x42, 0x4e,
	0x23, 0x47, 0x09, 0x5d, 0x84, 0x5b, 0x31, 0x63, 0x71, 0x82, 0xbb, 0xfa, 0x34, 0x4c, 0x47, 0x5d,
	0x3c, 0xe5, 0xea, 0xc6, 0x04, 0x3b, 0x5d, 0xd8, 0x3e, 0xc5, 0xaa, 0xa7, 0xf3, 0x07, 0xf8, 0x4b,
	0x8a, 0xa5, 0x42, 0x2d, 0xa8, 0x19, 0x5e, 0x9f, 0x44, 0xcd, 0x42, 0xbb, 0x70, 0x58, 0x1b, 0xac,
	0x1b, 0xc0, 0x8b, 0x3a, 0x97, 0xd0, 0x38, 0xc5, 0xca, 0x33, 0x1d, 0x3c, 0x3a, 0x62, 0x79, 0xd5,
	0x5f, 0x00, 0xb6, 0xef, 0xbc, 0xac, 0x66, 0x11, 0x2f, 0xca, 0xc2, 0x52, 0x09, 0x1c, 0x4c, 0xfd,
	0x09, 0xbe, 0x69, 0x16, 0x4d, 0xd8, 0x20, 0xef, 0xf0, 0x4d, 0x87, 0xc1, 0xee, 0x5d, 0x5a, 0xc9,
	0x19, 0x95, 0x18, 0x1d, 0x42, 0x99, 0xd0, 0x11, 0xd3, 0x8c, 0x1b, 0xc7, 0x75, 0xd7, 0x7e, 0xa4,
	0xbb, 0x98, 0xab, 0x33, 0x50, 0x1d, 0x2a, 0x8a, 0x4d, 0x30, 0xb5, 0xec, 0xe6, 0x80, 0x1a, 0x50,
	0xbd, 0x96, 0x7e, 0x2a, 0x92, 0x66, 0xc9, 0xc0, 0xd7, 0xf2, 0x52, 0x24, 0x9d, 0x18, 0xf6, 0x2e,
	0x79, 0x14, 0x28, 0x6c, 0x79, 0x2e, 0x54, 0xa0, 0xf0, 0x2f, 0x7e, 0xcb, 0x53, 0xa8, 0xc8, 0x2c,
	0x5d, 0x37, 0xda, 0x38, 0x6e, 0xdc, 0xd5, 0x64, 0xb8, 0x4c, 0x4e, 0xe7, 0x6b, 0x01, 0xda, 0xa7,
	0x58, 0x5d, 0x78, 0xfd, 0x0f, 0x22, 0xa5, 0x93, 0x93, 0x54, 0x8d, 0x31, 0x55, 0x24, 0x0c, 0x14,
	0x61, 0x34, 0x6f, 0x88, 0xa0, 0x3c, 0x12, 0x6c, 0x6a, 0x95, 0xeb, 0xff, 0x68, 0x0b, 0x8a, 0x8a,
	0x59, 0xd1, 0x45, 0xc5, 0xd0, 0x3e, 0x6c, 0x48, 0x11, 0xfa, 0x41, 0x14, 0x65, 0x3d, 0x9a, 0x65,
	0x1d, 0x00, 0x29, 0xc2, 0x13, 0x83, 0xa0, 0x3f, 0x61, 0x4d, 0x31, 0x7f, 0xcc, 0xa4, 0x6a, 0x56,
	0x74, 0xb0, 0xaa, 0xd8, 0x5b, 0x26, 0x55, 0xe7, 0x13, 0xfc, 0xf3, 0x88, 0x02, 0xeb, 0xb3, 0x03,
	0xeb, 0xa9, 0xc4, 0x82, 0x06, 0x53, 0x9c, 0x5f, 0x7a, 0x7e, 0xce, 0x62, 0x3c, 0x90, 0xf2, 0x9a,
	0x89, 0xc8, 0x4a, 0x9c, 0x9d, 0x3b, 0xdf, 0x8a, 0xb0, 0xdf, 0xbb, 0x0a, 0x92, 0x34, 0x50, 0xf8,
	0xc2, 0xeb, 0xbf, 0x21, 0x92, 0x07, 0x2a, 0x1c, 0x0f, 0xd2, 0x04, 0xcf, 0x5e, 0xd4, 0x11, 0x20,
	0x49, 0xb8, 0xcf, 0x03, 0xa1, 0x48, 0x48, 0x78, 0x40, 0xd5, 0xdc, 0xd7, 0x6d, 0x49, 0x78, 0x7f,
	0x1e, 0xf0, 0x22, 0x74, 0x00, 0x5b, 0x61, 0x90, 0x24, 0x84, 0xc6, 0x3e, 0x4d, 0xa7, 0x43, 0x2c,
	0x6c, 0xcf, 0x3f, 0x2c, 0x7a, 0xae, 0x41, 0xf4, 0x2f, 0x68, 0x00, 0x47, 0x79, 0x96, 0xb1, 0x6a,
	0xd3, 0x80, 0x36, 0x69, 0xa5, 0x69, 0xdb, 0x50, 0xe2, 0x84, 0x5a, 0xc3, 0xb2, 0xbf, 0xd9, 0x83,
	0xa1, 0xcc, 0xcf, 0xc0, 0x6a, 0xbb, 0x70, 0xb8, 0x3e, 0xa8, 0x50, 0xd6, 0x27, 0x34, 0x63, 0xb2,
	0xed, 0xb4, 0xc3, 0x6b, 0x86, 0xc9, 0x40, 0xda, 0xe5, 0xef, 0x05, 0x68, 0x2f, 0x37, 0xc2, 0xba,
	0xdc, 0x82, 0x9a, 0x60, 0x6c, 0xea, 0x2f, 0xda, 0x9c, 0x01, 0xe7, 0x99, 0xcd, 0xcf, 0xa0, 0x7e,
	0xdb, 0xa2, 0xec, 0x9a, 0x54, 0x3e, 0x2d, 0x3b, 0x7c, 0xd1, 0x25, 0x13, 0xca, 0x54, 0x09, 0x63,
	0xb2, 0x56, 0x5c, 0xd2, 0x8a, 0xc1, 0x42, 0x7d, 0x42, 0x8f, 0x7f, 0x94, 0xa1, 0xea, 0xbd, 0xcf,
	0xa6, 0x04, 0xbd, 0x84, 0xcd, 0xd7, 0x02, 0x07, 0x0a, 0x9b, 0x71, 0x47, 0x3b, 0xb3, 0x77, 0xdb,
	0x9b, 0x8d, 0x92, 0xb3, 0xeb, 0x9a, 0x75, 0xe1, 0xe6, 0xeb, 0xc2, 0xed, 0x65, 0xeb, 0x22, 0x2b,
	0x36, 0xf3, 0xf2, 0x3b, 0xc5, 0x2f, 0xa0, 0x36, 0xdb, 0x32, 0xa8, 0xe1, 0x0a, 0x1e, 0xba, 0x77,
	0xb7, 0x8e, 0xf3, 0x10, 0x21, 0xea, 0x01, 0x9c, 0x11, 0x99, 0x57, 0x3a, 0xb3, 0x94, 0x39, 0x98,
	0x97, 0xb7, 0x1e, 0x8c, 0x59, 0xd7, 0x3d, 0xd8, 0xba, 0xbd, 0x5d, 0x90, 0x93, 0x8b, 0xb8, 0xbf,
	0xc9, 0x9c, 0xd6, 0x83, 0x31, 0x4b, 0x75, 0x06, 0xe8, 0xfe, 0xde, 0x40, 0x7f, 0xeb, 0x92, 0xa5,
	0x0b, 0x65, 0xa9, 0x31, 0x9f, 0x61, 0x6f, 0xe9, 0x64, 0xa2, 0x83, 0x5c, 0xc7, 0xa3, 0xbb, 0xc3,
	0xf9, 0x7f, 0x55, 0x9a, 0x55, 0x1e, 0x43, 0x73, 0xd9, 0xf3, 0x44, 0xff, 0x69, 0x8e, 0x15, 0x63,
	0xec, 0x1c, 0xac, 0xc8, 0x32, 0x8d, 0x5e, 0x1d, 0x7d, 0x7c, 0x12, 0x13, 0x35, 0x4e, 0x87, 0x6e,
	0xc8, 0xa6, 0x5d, 0x7b, 0x2d, 0xb3, 0x5f, 0x3e, 0x89, 0xbb, 0x12, 0x8b, 0x2b, 0x12, 0xe2, 0xae,
	0xe0, 0xe1, 0xb0, 0xaa, 0x2d, 0x79, 0xfe, 0x33, 0x00, 0x00, 0xff, 0xff, 0x29, 0x12, 0xe4, 0x29,
	0xe7, 0x06, 0x00, 0x00,
}
