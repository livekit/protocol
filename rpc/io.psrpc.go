// Code generated by protoc-gen-psrpc v0.6.0, DO NOT EDIT.
// source: rpc/io.proto

package rpc

import (
	"context"

	"github.com/livekit/psrpc"
	"github.com/livekit/psrpc/pkg/client"
	"github.com/livekit/psrpc/pkg/info"
	"github.com/livekit/psrpc/pkg/rand"
	"github.com/livekit/psrpc/pkg/server"
	"github.com/livekit/psrpc/version"
)
import google_protobuf "google.golang.org/protobuf/types/known/emptypb"
import livekit4 "github.com/livekit/protocol/livekit"
import livekit5 "github.com/livekit/protocol/livekit"

var _ = version.PsrpcVersion_0_6

// =======================
// IOInfo Client Interface
// =======================

type IOInfoClient interface {
	// egress
	CreateEgress(ctx context.Context, req *livekit4.EgressInfo, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error)

	UpdateEgress(ctx context.Context, req *livekit4.EgressInfo, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error)

	GetEgress(ctx context.Context, req *GetEgressRequest, opts ...psrpc.RequestOption) (*livekit4.EgressInfo, error)

	ListEgress(ctx context.Context, req *livekit4.ListEgressRequest, opts ...psrpc.RequestOption) (*livekit4.ListEgressResponse, error)

	UpdateMetrics(ctx context.Context, req *UpdateMetricsRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error)

	// ingress
	CreateIngress(ctx context.Context, req *livekit5.IngressInfo, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error)

	GetIngressInfo(ctx context.Context, req *GetIngressInfoRequest, opts ...psrpc.RequestOption) (*GetIngressInfoResponse, error)

	UpdateIngressState(ctx context.Context, req *UpdateIngressStateRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error)

	// sip
	GetSIPTrunkAuthentication(ctx context.Context, req *GetSIPTrunkAuthenticationRequest, opts ...psrpc.RequestOption) (*GetSIPTrunkAuthenticationResponse, error)

	EvaluateSIPDispatchRules(ctx context.Context, req *EvaluateSIPDispatchRulesRequest, opts ...psrpc.RequestOption) (*EvaluateSIPDispatchRulesResponse, error)

	UpdateSIPCallState(ctx context.Context, req *UpdateSIPCallStateRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error)

	// Close immediately, without waiting for pending RPCs
	Close()
}

// ===========================
// IOInfo ServerImpl Interface
// ===========================

type IOInfoServerImpl interface {
	// egress
	CreateEgress(context.Context, *livekit4.EgressInfo) (*google_protobuf.Empty, error)

	UpdateEgress(context.Context, *livekit4.EgressInfo) (*google_protobuf.Empty, error)

	GetEgress(context.Context, *GetEgressRequest) (*livekit4.EgressInfo, error)

	ListEgress(context.Context, *livekit4.ListEgressRequest) (*livekit4.ListEgressResponse, error)

	UpdateMetrics(context.Context, *UpdateMetricsRequest) (*google_protobuf.Empty, error)

	// ingress
	CreateIngress(context.Context, *livekit5.IngressInfo) (*google_protobuf.Empty, error)

	GetIngressInfo(context.Context, *GetIngressInfoRequest) (*GetIngressInfoResponse, error)

	UpdateIngressState(context.Context, *UpdateIngressStateRequest) (*google_protobuf.Empty, error)

	// sip
	GetSIPTrunkAuthentication(context.Context, *GetSIPTrunkAuthenticationRequest) (*GetSIPTrunkAuthenticationResponse, error)

	EvaluateSIPDispatchRules(context.Context, *EvaluateSIPDispatchRulesRequest) (*EvaluateSIPDispatchRulesResponse, error)

	UpdateSIPCallState(context.Context, *UpdateSIPCallStateRequest) (*google_protobuf.Empty, error)
}

// =======================
// IOInfo Server Interface
// =======================

type IOInfoServer interface {

	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// =============
// IOInfo Client
// =============

type iOInfoClient struct {
	client *client.RPCClient
}

// NewIOInfoClient creates a psrpc client that implements the IOInfoClient interface.
func NewIOInfoClient(bus psrpc.MessageBus, opts ...psrpc.ClientOption) (IOInfoClient, error) {
	sd := &info.ServiceDefinition{
		Name: "IOInfo",
		ID:   rand.NewClientID(),
	}

	sd.RegisterMethod("CreateEgress", false, false, true, true)
	sd.RegisterMethod("UpdateEgress", false, false, true, true)
	sd.RegisterMethod("GetEgress", false, false, true, true)
	sd.RegisterMethod("ListEgress", false, false, true, true)
	sd.RegisterMethod("UpdateMetrics", false, false, true, true)
	sd.RegisterMethod("CreateIngress", false, false, true, true)
	sd.RegisterMethod("GetIngressInfo", false, false, true, true)
	sd.RegisterMethod("UpdateIngressState", false, false, true, true)
	sd.RegisterMethod("GetSIPTrunkAuthentication", false, false, true, true)
	sd.RegisterMethod("EvaluateSIPDispatchRules", false, false, true, true)
	sd.RegisterMethod("UpdateSIPCallState", false, false, true, true)

	rpcClient, err := client.NewRPCClient(sd, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &iOInfoClient{
		client: rpcClient,
	}, nil
}

func (c *iOInfoClient) CreateEgress(ctx context.Context, req *livekit4.EgressInfo, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error) {
	return client.RequestSingle[*google_protobuf.Empty](ctx, c.client, "CreateEgress", nil, req, opts...)
}

func (c *iOInfoClient) UpdateEgress(ctx context.Context, req *livekit4.EgressInfo, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error) {
	return client.RequestSingle[*google_protobuf.Empty](ctx, c.client, "UpdateEgress", nil, req, opts...)
}

func (c *iOInfoClient) GetEgress(ctx context.Context, req *GetEgressRequest, opts ...psrpc.RequestOption) (*livekit4.EgressInfo, error) {
	return client.RequestSingle[*livekit4.EgressInfo](ctx, c.client, "GetEgress", nil, req, opts...)
}

func (c *iOInfoClient) ListEgress(ctx context.Context, req *livekit4.ListEgressRequest, opts ...psrpc.RequestOption) (*livekit4.ListEgressResponse, error) {
	return client.RequestSingle[*livekit4.ListEgressResponse](ctx, c.client, "ListEgress", nil, req, opts...)
}

func (c *iOInfoClient) UpdateMetrics(ctx context.Context, req *UpdateMetricsRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error) {
	return client.RequestSingle[*google_protobuf.Empty](ctx, c.client, "UpdateMetrics", nil, req, opts...)
}

func (c *iOInfoClient) CreateIngress(ctx context.Context, req *livekit5.IngressInfo, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error) {
	return client.RequestSingle[*google_protobuf.Empty](ctx, c.client, "CreateIngress", nil, req, opts...)
}

func (c *iOInfoClient) GetIngressInfo(ctx context.Context, req *GetIngressInfoRequest, opts ...psrpc.RequestOption) (*GetIngressInfoResponse, error) {
	return client.RequestSingle[*GetIngressInfoResponse](ctx, c.client, "GetIngressInfo", nil, req, opts...)
}

func (c *iOInfoClient) UpdateIngressState(ctx context.Context, req *UpdateIngressStateRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error) {
	return client.RequestSingle[*google_protobuf.Empty](ctx, c.client, "UpdateIngressState", nil, req, opts...)
}

func (c *iOInfoClient) GetSIPTrunkAuthentication(ctx context.Context, req *GetSIPTrunkAuthenticationRequest, opts ...psrpc.RequestOption) (*GetSIPTrunkAuthenticationResponse, error) {
	return client.RequestSingle[*GetSIPTrunkAuthenticationResponse](ctx, c.client, "GetSIPTrunkAuthentication", nil, req, opts...)
}

func (c *iOInfoClient) EvaluateSIPDispatchRules(ctx context.Context, req *EvaluateSIPDispatchRulesRequest, opts ...psrpc.RequestOption) (*EvaluateSIPDispatchRulesResponse, error) {
	return client.RequestSingle[*EvaluateSIPDispatchRulesResponse](ctx, c.client, "EvaluateSIPDispatchRules", nil, req, opts...)
}

func (c *iOInfoClient) UpdateSIPCallState(ctx context.Context, req *UpdateSIPCallStateRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error) {
	return client.RequestSingle[*google_protobuf.Empty](ctx, c.client, "UpdateSIPCallState", nil, req, opts...)
}

func (s *iOInfoClient) Close() {
	s.client.Close()
}

// =============
// IOInfo Server
// =============

type iOInfoServer struct {
	svc IOInfoServerImpl
	rpc *server.RPCServer
}

// NewIOInfoServer builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewIOInfoServer(svc IOInfoServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (IOInfoServer, error) {
	sd := &info.ServiceDefinition{
		Name: "IOInfo",
		ID:   rand.NewServerID(),
	}

	s := server.NewRPCServer(sd, bus, opts...)

	sd.RegisterMethod("CreateEgress", false, false, true, true)
	var err error
	err = server.RegisterHandler(s, "CreateEgress", nil, svc.CreateEgress, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("UpdateEgress", false, false, true, true)
	err = server.RegisterHandler(s, "UpdateEgress", nil, svc.UpdateEgress, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("GetEgress", false, false, true, true)
	err = server.RegisterHandler(s, "GetEgress", nil, svc.GetEgress, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("ListEgress", false, false, true, true)
	err = server.RegisterHandler(s, "ListEgress", nil, svc.ListEgress, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("UpdateMetrics", false, false, true, true)
	err = server.RegisterHandler(s, "UpdateMetrics", nil, svc.UpdateMetrics, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("CreateIngress", false, false, true, true)
	err = server.RegisterHandler(s, "CreateIngress", nil, svc.CreateIngress, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("GetIngressInfo", false, false, true, true)
	err = server.RegisterHandler(s, "GetIngressInfo", nil, svc.GetIngressInfo, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("UpdateIngressState", false, false, true, true)
	err = server.RegisterHandler(s, "UpdateIngressState", nil, svc.UpdateIngressState, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("GetSIPTrunkAuthentication", false, false, true, true)
	err = server.RegisterHandler(s, "GetSIPTrunkAuthentication", nil, svc.GetSIPTrunkAuthentication, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("EvaluateSIPDispatchRules", false, false, true, true)
	err = server.RegisterHandler(s, "EvaluateSIPDispatchRules", nil, svc.EvaluateSIPDispatchRules, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("UpdateSIPCallState", false, false, true, true)
	err = server.RegisterHandler(s, "UpdateSIPCallState", nil, svc.UpdateSIPCallState, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	return &iOInfoServer{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *iOInfoServer) Shutdown() {
	s.rpc.Close(false)
}

func (s *iOInfoServer) Kill() {
	s.rpc.Close(true)
}

var psrpcFileDescriptor4 = []byte{
	// 1504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xdd, 0x56, 0xdb, 0xc6,
	0x16, 0x3e, 0xb6, 0xc1, 0xc1, 0xdb, 0x60, 0xcc, 0x60, 0x73, 0x84, 0x59, 0x27, 0x21, 0xce, 0xc9,
	0x39, 0xb4, 0x5d, 0xcb, 0x34, 0xf4, 0xa2, 0x6d, 0xb2, 0x9a, 0x15, 0x70, 0x1c, 0xa2, 0x96, 0x80,
	0x2b, 0xe0, 0xa2, 0xbd, 0x51, 0x07, 0x69, 0x30, 0x0a, 0xb2, 0x46, 0x9d, 0x19, 0x41, 0x78, 0x82,
	0xf6, 0x31, 0xfa, 0x08, 0x7d, 0x85, 0xbe, 0x54, 0xae, 0xbb, 0xe6, 0x47, 0xb6, 0x8c, 0xed, 0x80,
	0x7b, 0x27, 0x7d, 0xfb, 0xff, 0x67, 0x66, 0xf6, 0x86, 0x45, 0x16, 0x7b, 0xdb, 0x01, 0x6d, 0xc5,
	0x8c, 0x0a, 0x8a, 0x0a, 0x2c, 0xf6, 0x1a, 0xb5, 0x30, 0xb8, 0x22, 0x97, 0x81, 0x70, 0x49, 0x8f,
	0x11, 0xce, 0x35, 0xa9, 0x51, 0x4f, 0xd1, 0x20, 0xca, 0xc2, 0x2b, 0x29, 0xcc, 0x83, 0xd8, 0x40,
	0x28, 0x85, 0x18, 0xa5, 0x7d, 0x83, 0x6d, 0xf4, 0x28, 0xed, 0x85, 0x64, 0x5b, 0xfd, 0x9d, 0x25,
	0xe7, 0xdb, 0xa4, 0x1f, 0x8b, 0x1b, 0x43, 0x7c, 0x78, 0x9b, 0xe8, 0x27, 0x0c, 0x8b, 0x80, 0x46,
	0x9a, 0xde, 0xdc, 0x86, 0xea, 0x3e, 0x11, 0x1d, 0x65, 0xd6, 0x21, 0xbf, 0x26, 0x84, 0x0b, 0xb4,
	0x01, 0x25, 0xed, 0x9e, 0x1b, 0xf8, 0x56, 0x6e, 0x33, 0xb7, 0x55, 0x72, 0x16, 0x34, 0x60, 0xfb,
	0xcd, 0xdf, 0x72, 0x50, 0x3b, 0x8d, 0x7d, 0x2c, 0xc8, 0x3b, 0x22, 0x58, 0xe0, 0x0d, 0xa4, 0xfe,
	0x0f, 0x73, 0x41, 0x74, 0x4e, 0x95, 0x40, 0x79, 0x67, 0xb5, 0x65, 0x3c, 0x6d, 0x69, 0xdd, 0x76,
	0x74, 0x4e, 0x1d, 0xc5, 0x80, 0x9a, 0xb0, 0x84, 0xaf, 0x7a, 0xae, 0x17, 0x27, 0x6e, 0xc2, 0x71,
	0x8f, 0x58, 0x85, 0xcd, 0xdc, 0x56, 0xde, 0x29, 0xe3, 0xab, 0x5e, 0x3b, 0x4e, 0x4e, 0x25, 0x24,
	0x79, 0xfa, 0xf8, 0x43, 0x86, 0x67, 0x4e, 0xf3, 0xf4, 0xf1, 0x87, 0x94, 0xa7, 0x79, 0x0a, 0xf5,
	0x7d, 0x22, 0xec, 0x68, 0xa8, 0xdf, 0x78, 0xf2, 0x1f, 0x00, 0x93, 0xc8, 0x61, 0x00, 0x25, 0x83,
	0xd8, 0xbe, 0x24, 0x73, 0xc1, 0x08, 0xee, 0xbb, 0x97, 0xe4, 0xc6, 0xca, 0x6b, 0xb2, 0x46, 0x7e,
	0x20, 0x37, 0xcd, 0xdf, 0xf3, 0xb0, 0x76, 0x5b, 0x2f, 0x8f, 0x69, 0xc4, 0x09, 0xda, 0x1a, 0x09,
	0xb1, 0x36, 0x08, 0x31, 0xcb, 0xab, 0x63, 0xac, 0xc1, 0xbc, 0xa0, 0x97, 0x24, 0x32, 0xea, 0xf5,
	0x0f, 0xaa, 0x43, 0xf1, 0x9a, 0xbb, 0x09, 0x0b, 0x55, 0xc8, 0x25, 0x67, 0xfe, 0x9a, 0x9f, 0xb2,
	0x10, 0x9d, 0x42, 0x25, 0xa4, 0xbd, 0x5e, 0x10, 0xf5, 0xdc, 0xf3, 0x80, 0x84, 0x3e, 0xb7, 0xe6,
	0x36, 0x0b, 0x5b, 0xe5, 0x9d, 0x56, 0x8b, 0xc5, 0x5e, 0x6b, 0xb2, 0x2f, 0xad, 0x03, 0x2d, 0xf1,
	0x46, 0x09, 0x74, 0x22, 0xc1, 0x6e, 0x9c, 0xa5, 0x30, 0x8b, 0x35, 0x5e, 0x01, 0x1a, 0x67, 0x42,
	0x55, 0x28, 0xc8, 0xb0, 0x75, 0x56, 0xe4, 0xa7, 0xf4, 0xf5, 0x0a, 0x87, 0x09, 0x49, 0x7d, 0x55,
	0x3f, 0xcf, 0xf3, 0xdf, 0xe4, 0x9a, 0x3d, 0x58, 0xd7, 0xa5, 0x36, 0x0e, 0x1c, 0x0b, 0x2c, 0xc8,
	0x3d, 0xb3, 0xfc, 0x05, 0xcc, 0x73, 0xc9, 0xae, 0xb4, 0x96, 0x77, 0xea, 0xb7, 0x93, 0xa5, 0x75,
	0x69, 0x9e, 0xe6, 0x1f, 0x39, 0xd8, 0xdc, 0x27, 0xe2, 0xd8, 0xee, 0x9e, 0xb0, 0x24, 0xba, 0xdc,
	0x4d, 0xc4, 0x05, 0x89, 0x44, 0xe0, 0xa9, 0x4e, 0x4d, 0x0d, 0x3e, 0x84, 0x32, 0x0f, 0x62, 0xd7,
	0xc3, 0x61, 0x28, 0x2d, 0x16, 0x4d, 0xe1, 0x82, 0xb8, 0x8d, 0xc3, 0xd0, 0xf6, 0x11, 0x82, 0xb9,
	0x73, 0x46, 0xfb, 0x26, 0x0c, 0xf5, 0x8d, 0x2a, 0x90, 0x17, 0xd4, 0x64, 0x3b, 0x2f, 0x28, 0x7a,
	0x04, 0x65, 0xce, 0x3c, 0x17, 0xfb, 0xbe, 0xf4, 0x41, 0x75, 0x55, 0xc9, 0x01, 0xce, 0xbc, 0x5d,
	0x8d, 0xa0, 0x7f, 0xc3, 0x03, 0x41, 0xdd, 0x0b, 0xca, 0x85, 0x35, 0xaf, 0x88, 0x45, 0x41, 0xdf,
	0x52, 0x2e, 0x9a, 0x7f, 0xe6, 0xe0, 0xf1, 0x27, 0x5c, 0x34, 0x1d, 0xd2, 0x80, 0x85, 0x84, 0x13,
	0x16, 0xe1, 0x3e, 0x49, 0x4f, 0x4e, 0xfa, 0x2f, 0x69, 0x31, 0xe6, 0xfc, 0x9a, 0x32, 0xdf, 0xf8,
	0x38, 0xf8, 0x97, 0xbe, 0xfb, 0x8c, 0xc6, 0xca, 0xd3, 0x05, 0x47, 0x7d, 0xa3, 0x4d, 0x58, 0x94,
	0xf1, 0x0a, 0x69, 0x4e, 0x06, 0x9c, 0x3a, 0x1b, 0xc4, 0xca, 0x03, 0xdd, 0xc9, 0x31, 0xa3, 0xef,
	0x89, 0x27, 0x24, 0x5d, 0xfb, 0x5b, 0x32, 0x88, 0xed, 0x37, 0x3f, 0x16, 0xe0, 0x51, 0x47, 0x56,
	0x13, 0x0b, 0x72, 0x6c, 0x77, 0x5f, 0x07, 0x3c, 0xc6, 0xc2, 0xbb, 0x70, 0x92, 0x90, 0xf0, 0x29,
	0x49, 0x5d, 0xb8, 0x9d, 0xd4, 0x2f, 0x01, 0x49, 0x7a, 0x8c, 0x99, 0x08, 0xbc, 0x20, 0xc6, 0x91,
	0x18, 0x54, 0x7b, 0x2f, 0x6f, 0xe5, 0x9c, 0x2a, 0x0f, 0xe2, 0xee, 0x90, 0x68, 0xfb, 0x63, 0x6e,
	0xc3, 0x98, 0xdb, 0x4f, 0xa1, 0x22, 0xed, 0xc9, 0x7e, 0x8f, 0x92, 0xfe, 0x19, 0x61, 0x26, 0x1d,
	0x4b, 0x06, 0x3d, 0x54, 0x20, 0x7a, 0x02, 0x0a, 0x20, 0x7e, 0xca, 0xa5, 0xcb, 0xb8, 0xa8, 0x41,
	0xc3, 0x74, 0x67, 0x41, 0xab, 0x50, 0x88, 0x83, 0xc8, 0x24, 0x47, 0x7e, 0xca, 0x53, 0x18, 0x51,
	0x57, 0x82, 0x45, 0x95, 0xed, 0xf9, 0x88, 0x76, 0x83, 0x48, 0x6a, 0x32, 0xe6, 0x54, 0xf5, 0x1f,
	0x68, 0x4d, 0x1a, 0x92, 0x1d, 0x80, 0x7c, 0xa8, 0x92, 0x0f, 0x82, 0x61, 0x17, 0x0b, 0xc1, 0x82,
	0xb3, 0x44, 0x10, 0x6e, 0x95, 0xd4, 0x41, 0xfd, 0x56, 0x1d, 0xd4, 0x3b, 0x52, 0xdd, 0xea, 0x48,
	0xe1, 0xdd, 0x81, 0xac, 0x3e, 0xb3, 0xcb, 0x64, 0x14, 0x6d, 0xec, 0x41, 0x6d, 0x12, 0xe3, 0x4c,
	0xe7, 0xf6, 0x63, 0x19, 0x36, 0xa7, 0x7b, 0x63, 0x5a, 0x75, 0x03, 0x4a, 0xf2, 0x11, 0x71, 0xb3,
	0xbd, 0x2a, 0x81, 0x43, 0xd9, 0xab, 0xcf, 0xa0, 0x36, 0x5a, 0x72, 0xd9, 0xeb, 0x22, 0xbd, 0x2d,
	0x57, 0xe3, 0x6c, 0xc5, 0x35, 0x09, 0x7d, 0x06, 0xd5, 0xac, 0x88, 0x52, 0xab, 0x93, 0xb8, 0x9c,
	0xc1, 0x27, 0x69, 0xef, 0x13, 0x81, 0x7d, 0x2c, 0xb0, 0xe9, 0xbe, 0xac, 0xf6, 0x77, 0x86, 0x84,
	0xae, 0x61, 0x2d, 0x2b, 0x92, 0x29, 0x41, 0x59, 0x95, 0xe0, 0xd5, 0x1d, 0x25, 0x30, 0xb7, 0x66,
	0xa6, 0x55, 0x6f, 0x57, 0xa2, 0x1e, 0x4f, 0xa2, 0xa1, 0x27, 0x50, 0x66, 0xba, 0x80, 0xaa, 0x65,
	0xd4, 0x01, 0x55, 0x9d, 0x0f, 0x06, 0x96, 0xbd, 0x33, 0xb8, 0xee, 0xe7, 0x26, 0x5f, 0xf7, 0xf3,
	0xd9, 0xeb, 0xbe, 0x05, 0x45, 0x46, 0x78, 0x12, 0x0a, 0xd5, 0x7f, 0x95, 0x9d, 0x35, 0xe5, 0x7a,
	0xd6, 0x65, 0x45, 0x75, 0x0c, 0xd7, 0xd8, 0x81, 0x2a, 0x8d, 0x1d, 0xa8, 0x6d, 0xa8, 0x49, 0x0e,
	0xdf, 0xc8, 0xbb, 0x2c, 0x09, 0xc9, 0xf0, 0xe8, 0xad, 0xf0, 0x20, 0xce, 0x66, 0x63, 0xec, 0xe2,
	0x58, 0xbc, 0x75, 0x71, 0xa0, 0x03, 0x78, 0x70, 0x41, 0xb0, 0x4f, 0x18, 0xb7, 0x96, 0x54, 0x76,
	0x77, 0xee, 0x97, 0xdd, 0xb7, 0x5a, 0x48, 0xe7, 0x33, 0x55, 0x81, 0x18, 0xd4, 0xcd, 0xa7, 0x2b,
	0x68, 0xb6, 0x72, 0x15, 0xa5, 0xfb, 0xe5, 0x4c, 0xba, 0x4f, 0xe8, 0xed, 0xba, 0xad, 0x5e, 0x8c,
	0x53, 0xa4, 0xcd, 0xa1, 0x21, 0x69, 0x36, 0x8d, 0x07, 0xcd, 0x62, 0x73, 0xa8, 0xf0, 0x84, 0x8e,
	0xc4, 0xb6, 0x8a, 0xc7, 0x29, 0x68, 0x0f, 0x96, 0x83, 0xc8, 0x0b, 0x13, 0x9f, 0x0c, 0xac, 0xad,
	0xaa, 0x02, 0xaf, 0x0f, 0xde, 0xbe, 0x63, 0xbb, 0xab, 0xb9, 0x8f, 0x62, 0xf9, 0x6c, 0x70, 0xa7,
	0x62, 0x24, 0x52, 0x1d, 0x2f, 0xa1, 0x4a, 0x22, 0x7c, 0x26, 0x6f, 0xa1, 0x73, 0x82, 0x45, 0xc2,
	0x08, 0xb7, 0x96, 0x37, 0x0b, 0x5b, 0x95, 0xcc, 0x40, 0x75, 0x6c, 0x77, 0xdf, 0x68, 0x9a, 0xb3,
	0x6c, 0x98, 0xcd, 0xbf, 0xf2, 0x81, 0x05, 0x91, 0x1a, 0x25, 0x44, 0xd0, 0x27, 0x34, 0x11, 0x56,
	0x55, 0xbd, 0xbf, 0xeb, 0x2d, 0x3d, 0x08, 0xb6, 0xd2, 0x41, 0xb0, 0xf5, 0xda, 0x0c, 0x82, 0x4e,
	0xc5, 0x48, 0x9c, 0x68, 0x01, 0xd4, 0x81, 0x15, 0x35, 0x7b, 0xc9, 0x27, 0x21, 0x9d, 0x16, 0xad,
	0x95, 0xbb, 0xb4, 0x2c, 0xcb, 0xd1, 0x0c, 0x87, 0x61, 0x0a, 0xc8, 0xfb, 0x54, 0xdd, 0x2f, 0x31,
	0x23, 0x9c, 0x08, 0xab, 0xa6, 0xbb, 0x56, 0x42, 0x5d, 0x85, 0xa0, 0x17, 0x86, 0xc1, 0xa3, 0xd1,
	0x79, 0xd0, 0xb3, 0xea, 0xca, 0x42, 0x63, 0x10, 0xa6, 0x43, 0x69, 0xbf, 0xad, 0x48, 0xa9, 0x09,
	0x25, 0xac, 0xa1, 0xc6, 0x5b, 0x68, 0x4c, 0x3f, 0xcb, 0xb3, 0x5c, 0x96, 0x8d, 0xe7, 0xb0, 0x98,
	0xad, 0xed, 0x4c, 0xb2, 0x6f, 0xc0, 0x9a, 0xd6, 0x97, 0xb3, 0xea, 0x99, 0xd6, 0x6b, 0x33, 0x5d,
	0xfc, 0x87, 0xe9, 0xc0, 0x76, 0x6c, 0x77, 0x65, 0x31, 0x46, 0x06, 0xb6, 0x67, 0x50, 0xd2, 0xcf,
	0xfc, 0xa4, 0x11, 0xd6, 0x08, 0xa8, 0x11, 0x73, 0xc1, 0x33, 0x5f, 0x9f, 0xff, 0x02, 0x2b, 0x63,
	0xf7, 0x12, 0xb2, 0xa0, 0x76, 0xd0, 0xd9, 0xdf, 0x6d, 0xff, 0xe4, 0xee, 0xb6, 0xdb, 0x9d, 0xee,
	0x89, 0x7b, 0xe4, 0xb8, 0x5d, 0xfb, 0xb0, 0xfa, 0x2f, 0x04, 0x50, 0xd4, 0x50, 0x35, 0x87, 0x96,
	0xa1, 0xec, 0x74, 0x7e, 0x3c, 0xed, 0x1c, 0x9f, 0x28, 0x62, 0x5e, 0x12, 0x9d, 0xce, 0xf7, 0x9d,
	0xf6, 0x49, 0xb5, 0x80, 0x16, 0x60, 0xee, 0xb5, 0x73, 0xd4, 0xad, 0xce, 0xed, 0xfc, 0x55, 0x84,
	0xa2, 0x7d, 0x24, 0x8d, 0xa1, 0x17, 0xb0, 0xd8, 0x66, 0x04, 0x0b, 0xa2, 0x37, 0x06, 0x34, 0x69,
	0x85, 0x68, 0xac, 0x8d, 0x75, 0x60, 0x47, 0x6e, 0x3b, 0x52, 0x58, 0x47, 0xfe, 0x4f, 0x84, 0xbf,
	0x86, 0xd2, 0x60, 0x09, 0x42, 0xf5, 0x74, 0xea, 0x1e, 0x59, 0x8a, 0x1a, 0x93, 0x14, 0xa2, 0x0e,
	0xc0, 0x41, 0xc0, 0x53, 0xc9, 0x61, 0xef, 0x0e, 0xc1, 0x54, 0x7c, 0x63, 0x22, 0xcd, 0x3c, 0xc5,
	0x7b, 0xb0, 0x34, 0xb2, 0x52, 0xa1, 0x75, 0xe5, 0xc3, 0xa4, 0x35, 0x6b, 0x6a, 0x0c, 0xdf, 0xc1,
	0x92, 0xce, 0x9e, 0x99, 0xaf, 0xd1, 0xc4, 0xf5, 0x64, 0xaa, 0xb8, 0x0d, 0x95, 0xd1, 0x45, 0x03,
	0x35, 0x26, 0x6e, 0x1f, 0x69, 0x34, 0xd3, 0x37, 0x13, 0x74, 0x00, 0x68, 0x7c, 0x6b, 0x40, 0x0f,
	0x33, 0x21, 0x4d, 0x58, 0x27, 0xa6, 0x3a, 0xf6, 0x1e, 0xd6, 0xa7, 0x8e, 0xdd, 0xe8, 0x69, 0xea,
	0xc7, 0x27, 0x37, 0x87, 0xc6, 0xff, 0xee, 0x62, 0x33, 0x9e, 0xf7, 0xc0, 0x9a, 0xf6, 0x26, 0xa0,
	0xff, 0xde, 0x67, 0xc6, 0x6b, 0x3c, 0xbd, 0xd7, 0xc3, 0x32, 0x4c, 0x51, 0xf6, 0x9c, 0x8e, 0xa4,
	0x68, 0xc2, 0x01, 0x9e, 0x96, 0xa2, 0xbd, 0xc7, 0x3f, 0x3f, 0xea, 0x05, 0xe2, 0x22, 0x39, 0x6b,
	0x79, 0xb4, 0xbf, 0x6d, 0xaa, 0xae, 0x37, 0x7e, 0x8f, 0x86, 0xdb, 0x2c, 0xf6, 0xce, 0x8a, 0xea,
	0xef, 0xab, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x15, 0x63, 0xec, 0x93, 0x10, 0x00, 0x00,
}
