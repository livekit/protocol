// Code generated by protoc-gen-psrpc v0.6.0, DO NOT EDIT.
// source: rpc/io.proto

package rpc

import (
	"context"

	"github.com/livekit/psrpc"
	"github.com/livekit/psrpc/pkg/client"
	"github.com/livekit/psrpc/pkg/info"
	"github.com/livekit/psrpc/pkg/rand"
	"github.com/livekit/psrpc/pkg/server"
	"github.com/livekit/psrpc/version"
)
import google_protobuf "google.golang.org/protobuf/types/known/emptypb"
import livekit4 "github.com/livekit/protocol/livekit"
import livekit5 "github.com/livekit/protocol/livekit"

var _ = version.PsrpcVersion_0_6

// =======================
// IOInfo Client Interface
// =======================

type IOInfoClient interface {
	// egress
	CreateEgress(ctx context.Context, req *livekit4.EgressInfo, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error)

	UpdateEgress(ctx context.Context, req *livekit4.EgressInfo, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error)

	GetEgress(ctx context.Context, req *GetEgressRequest, opts ...psrpc.RequestOption) (*livekit4.EgressInfo, error)

	ListEgress(ctx context.Context, req *livekit4.ListEgressRequest, opts ...psrpc.RequestOption) (*livekit4.ListEgressResponse, error)

	UpdateMetrics(ctx context.Context, req *UpdateMetricsRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error)

	// ingress
	CreateIngress(ctx context.Context, req *livekit5.IngressInfo, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error)

	GetIngressInfo(ctx context.Context, req *GetIngressInfoRequest, opts ...psrpc.RequestOption) (*GetIngressInfoResponse, error)

	UpdateIngressState(ctx context.Context, req *UpdateIngressStateRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error)

	// sip
	GetSIPTrunkAuthentication(ctx context.Context, req *GetSIPTrunkAuthenticationRequest, opts ...psrpc.RequestOption) (*GetSIPTrunkAuthenticationResponse, error)

	EvaluateSIPDispatchRules(ctx context.Context, req *EvaluateSIPDispatchRulesRequest, opts ...psrpc.RequestOption) (*EvaluateSIPDispatchRulesResponse, error)

	// Close immediately, without waiting for pending RPCs
	Close()
}

// ===========================
// IOInfo ServerImpl Interface
// ===========================

type IOInfoServerImpl interface {
	// egress
	CreateEgress(context.Context, *livekit4.EgressInfo) (*google_protobuf.Empty, error)

	UpdateEgress(context.Context, *livekit4.EgressInfo) (*google_protobuf.Empty, error)

	GetEgress(context.Context, *GetEgressRequest) (*livekit4.EgressInfo, error)

	ListEgress(context.Context, *livekit4.ListEgressRequest) (*livekit4.ListEgressResponse, error)

	UpdateMetrics(context.Context, *UpdateMetricsRequest) (*google_protobuf.Empty, error)

	// ingress
	CreateIngress(context.Context, *livekit5.IngressInfo) (*google_protobuf.Empty, error)

	GetIngressInfo(context.Context, *GetIngressInfoRequest) (*GetIngressInfoResponse, error)

	UpdateIngressState(context.Context, *UpdateIngressStateRequest) (*google_protobuf.Empty, error)

	// sip
	GetSIPTrunkAuthentication(context.Context, *GetSIPTrunkAuthenticationRequest) (*GetSIPTrunkAuthenticationResponse, error)

	EvaluateSIPDispatchRules(context.Context, *EvaluateSIPDispatchRulesRequest) (*EvaluateSIPDispatchRulesResponse, error)
}

// =======================
// IOInfo Server Interface
// =======================

type IOInfoServer interface {

	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// =============
// IOInfo Client
// =============

type iOInfoClient struct {
	client *client.RPCClient
}

// NewIOInfoClient creates a psrpc client that implements the IOInfoClient interface.
func NewIOInfoClient(bus psrpc.MessageBus, opts ...psrpc.ClientOption) (IOInfoClient, error) {
	sd := &info.ServiceDefinition{
		Name: "IOInfo",
		ID:   rand.NewClientID(),
	}

	sd.RegisterMethod("CreateEgress", false, false, true, true)
	sd.RegisterMethod("UpdateEgress", false, false, true, true)
	sd.RegisterMethod("GetEgress", false, false, true, true)
	sd.RegisterMethod("ListEgress", false, false, true, true)
	sd.RegisterMethod("UpdateMetrics", false, false, true, true)
	sd.RegisterMethod("CreateIngress", false, false, true, true)
	sd.RegisterMethod("GetIngressInfo", false, false, true, true)
	sd.RegisterMethod("UpdateIngressState", false, false, true, true)
	sd.RegisterMethod("GetSIPTrunkAuthentication", false, false, true, true)
	sd.RegisterMethod("EvaluateSIPDispatchRules", false, false, true, true)

	rpcClient, err := client.NewRPCClient(sd, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &iOInfoClient{
		client: rpcClient,
	}, nil
}

func (c *iOInfoClient) CreateEgress(ctx context.Context, req *livekit4.EgressInfo, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error) {
	return client.RequestSingle[*google_protobuf.Empty](ctx, c.client, "CreateEgress", nil, req, opts...)
}

func (c *iOInfoClient) UpdateEgress(ctx context.Context, req *livekit4.EgressInfo, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error) {
	return client.RequestSingle[*google_protobuf.Empty](ctx, c.client, "UpdateEgress", nil, req, opts...)
}

func (c *iOInfoClient) GetEgress(ctx context.Context, req *GetEgressRequest, opts ...psrpc.RequestOption) (*livekit4.EgressInfo, error) {
	return client.RequestSingle[*livekit4.EgressInfo](ctx, c.client, "GetEgress", nil, req, opts...)
}

func (c *iOInfoClient) ListEgress(ctx context.Context, req *livekit4.ListEgressRequest, opts ...psrpc.RequestOption) (*livekit4.ListEgressResponse, error) {
	return client.RequestSingle[*livekit4.ListEgressResponse](ctx, c.client, "ListEgress", nil, req, opts...)
}

func (c *iOInfoClient) UpdateMetrics(ctx context.Context, req *UpdateMetricsRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error) {
	return client.RequestSingle[*google_protobuf.Empty](ctx, c.client, "UpdateMetrics", nil, req, opts...)
}

func (c *iOInfoClient) CreateIngress(ctx context.Context, req *livekit5.IngressInfo, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error) {
	return client.RequestSingle[*google_protobuf.Empty](ctx, c.client, "CreateIngress", nil, req, opts...)
}

func (c *iOInfoClient) GetIngressInfo(ctx context.Context, req *GetIngressInfoRequest, opts ...psrpc.RequestOption) (*GetIngressInfoResponse, error) {
	return client.RequestSingle[*GetIngressInfoResponse](ctx, c.client, "GetIngressInfo", nil, req, opts...)
}

func (c *iOInfoClient) UpdateIngressState(ctx context.Context, req *UpdateIngressStateRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error) {
	return client.RequestSingle[*google_protobuf.Empty](ctx, c.client, "UpdateIngressState", nil, req, opts...)
}

func (c *iOInfoClient) GetSIPTrunkAuthentication(ctx context.Context, req *GetSIPTrunkAuthenticationRequest, opts ...psrpc.RequestOption) (*GetSIPTrunkAuthenticationResponse, error) {
	return client.RequestSingle[*GetSIPTrunkAuthenticationResponse](ctx, c.client, "GetSIPTrunkAuthentication", nil, req, opts...)
}

func (c *iOInfoClient) EvaluateSIPDispatchRules(ctx context.Context, req *EvaluateSIPDispatchRulesRequest, opts ...psrpc.RequestOption) (*EvaluateSIPDispatchRulesResponse, error) {
	return client.RequestSingle[*EvaluateSIPDispatchRulesResponse](ctx, c.client, "EvaluateSIPDispatchRules", nil, req, opts...)
}

func (s *iOInfoClient) Close() {
	s.client.Close()
}

// =============
// IOInfo Server
// =============

type iOInfoServer struct {
	svc IOInfoServerImpl
	rpc *server.RPCServer
}

// NewIOInfoServer builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewIOInfoServer(svc IOInfoServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (IOInfoServer, error) {
	sd := &info.ServiceDefinition{
		Name: "IOInfo",
		ID:   rand.NewServerID(),
	}

	s := server.NewRPCServer(sd, bus, opts...)

	sd.RegisterMethod("CreateEgress", false, false, true, true)
	var err error
	err = server.RegisterHandler(s, "CreateEgress", nil, svc.CreateEgress, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("UpdateEgress", false, false, true, true)
	err = server.RegisterHandler(s, "UpdateEgress", nil, svc.UpdateEgress, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("GetEgress", false, false, true, true)
	err = server.RegisterHandler(s, "GetEgress", nil, svc.GetEgress, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("ListEgress", false, false, true, true)
	err = server.RegisterHandler(s, "ListEgress", nil, svc.ListEgress, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("UpdateMetrics", false, false, true, true)
	err = server.RegisterHandler(s, "UpdateMetrics", nil, svc.UpdateMetrics, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("CreateIngress", false, false, true, true)
	err = server.RegisterHandler(s, "CreateIngress", nil, svc.CreateIngress, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("GetIngressInfo", false, false, true, true)
	err = server.RegisterHandler(s, "GetIngressInfo", nil, svc.GetIngressInfo, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("UpdateIngressState", false, false, true, true)
	err = server.RegisterHandler(s, "UpdateIngressState", nil, svc.UpdateIngressState, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("GetSIPTrunkAuthentication", false, false, true, true)
	err = server.RegisterHandler(s, "GetSIPTrunkAuthentication", nil, svc.GetSIPTrunkAuthentication, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("EvaluateSIPDispatchRules", false, false, true, true)
	err = server.RegisterHandler(s, "EvaluateSIPDispatchRules", nil, svc.EvaluateSIPDispatchRules, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	return &iOInfoServer{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *iOInfoServer) Shutdown() {
	s.rpc.Close(false)
}

func (s *iOInfoServer) Kill() {
	s.rpc.Close(true)
}

var psrpcFileDescriptor4 = []byte{
	// 1383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xdb, 0x52, 0xdb, 0x46,
	0x18, 0x8e, 0x6d, 0x70, 0xf0, 0x6f, 0xb0, 0xcd, 0xc6, 0x50, 0x21, 0xa6, 0x09, 0x71, 0x9a, 0x96,
	0xa4, 0x33, 0xa6, 0xa5, 0x17, 0x6d, 0xd3, 0x69, 0x27, 0x1c, 0x14, 0xe2, 0x86, 0x80, 0x2b, 0xe0,
	0xa2, 0xbd, 0x51, 0x17, 0x69, 0x31, 0x0a, 0xb2, 0x56, 0xdd, 0x5d, 0x41, 0x78, 0x82, 0xf6, 0x01,
	0xfa, 0x00, 0x7d, 0x84, 0xbe, 0x5b, 0x67, 0x7a, 0xdd, 0xd9, 0x83, 0x8c, 0xf0, 0x21, 0x40, 0xef,
	0xb4, 0xff, 0x69, 0xbf, 0xff, 0xb4, 0xfe, 0x0c, 0xb3, 0x2c, 0xf1, 0xd7, 0x42, 0xda, 0x4e, 0x18,
	0x15, 0x14, 0x95, 0x58, 0xe2, 0xdb, 0xcd, 0x28, 0x3c, 0x27, 0x67, 0xa1, 0xf0, 0x48, 0x8f, 0x11,
	0xce, 0xb5, 0xca, 0x5e, 0xc8, 0xa4, 0x61, 0x9c, 0x17, 0x2f, 0xf7, 0x28, 0xed, 0x45, 0x64, 0x4d,
	0x9d, 0x8e, 0xd3, 0x93, 0x35, 0xd2, 0x4f, 0xc4, 0xa5, 0x51, 0x3e, 0x1c, 0x56, 0x06, 0x29, 0xc3,
	0x22, 0xa4, 0xb1, 0xd6, 0xb7, 0xd6, 0xa0, 0xb1, 0x43, 0x84, 0xa3, 0xe2, 0xb9, 0xe4, 0xb7, 0x94,
	0x70, 0x81, 0x96, 0xa1, 0xa2, 0xef, 0xf5, 0xc2, 0xc0, 0x2a, 0xac, 0x14, 0x56, 0x2b, 0xee, 0x8c,
	0x16, 0x74, 0x82, 0xd6, 0xef, 0x05, 0x68, 0x1e, 0x25, 0x01, 0x16, 0xe4, 0x2d, 0x11, 0x2c, 0xf4,
	0x07, 0x5e, 0x9f, 0xc1, 0x54, 0x18, 0x9f, 0x50, 0xe5, 0x50, 0x5d, 0x7f, 0xd0, 0x36, 0x60, 0xdb,
	0x3a, 0x76, 0x27, 0x3e, 0xa1, 0xae, 0x32, 0x40, 0x2d, 0x98, 0xc3, 0xe7, 0x3d, 0xcf, 0x4f, 0x52,
	0x2f, 0xe5, 0xb8, 0x47, 0xac, 0xd2, 0x4a, 0x61, 0xb5, 0xe8, 0x56, 0xf1, 0x79, 0x6f, 0x2b, 0x49,
	0x8f, 0xa4, 0x48, 0xda, 0xf4, 0xf1, 0xfb, 0x9c, 0xcd, 0x94, 0xb6, 0xe9, 0xe3, 0xf7, 0x99, 0x4d,
	0xeb, 0x08, 0x16, 0x76, 0x88, 0xe8, 0xc4, 0x57, 0xf1, 0x0d, 0x92, 0x8f, 0x01, 0x4c, 0x85, 0xae,
	0x12, 0xa8, 0x18, 0x49, 0x27, 0x90, 0x6a, 0x2e, 0x18, 0xc1, 0x7d, 0xef, 0x8c, 0x5c, 0x5a, 0x45,
	0xad, 0xd6, 0x92, 0x37, 0xe4, 0xb2, 0xf5, 0x47, 0x11, 0x16, 0x87, 0xe3, 0xf2, 0x84, 0xc6, 0x9c,
	0xa0, 0xd5, 0x6b, 0x29, 0x36, 0x07, 0x29, 0xe6, 0x6d, 0x75, 0x8e, 0x4d, 0x98, 0x16, 0xf4, 0x8c,
	0xc4, 0x26, 0xbc, 0x3e, 0xa0, 0x05, 0x28, 0x5f, 0x70, 0x2f, 0x65, 0x91, 0x4a, 0xb9, 0xe2, 0x4e,
	0x5f, 0xf0, 0x23, 0x16, 0xa1, 0x23, 0xa8, 0x45, 0xb4, 0xd7, 0x0b, 0xe3, 0x9e, 0x77, 0x12, 0x92,
	0x28, 0xe0, 0xd6, 0xd4, 0x4a, 0x69, 0xb5, 0xba, 0xde, 0x6e, 0xb3, 0xc4, 0x6f, 0x8f, 0xc7, 0xd2,
	0xde, 0xd5, 0x1e, 0xaf, 0x94, 0x83, 0x13, 0x0b, 0x76, 0xe9, 0xce, 0x45, 0x79, 0x99, 0xfd, 0x12,
	0xd0, 0xa8, 0x11, 0x6a, 0x40, 0x49, 0xa6, 0xad, 0xab, 0x22, 0x3f, 0x25, 0xd6, 0x73, 0x1c, 0xa5,
	0x24, 0xc3, 0xaa, 0x0e, 0x2f, 0x8a, 0xdf, 0x14, 0x5a, 0x3d, 0x58, 0xd2, 0xad, 0x36, 0x00, 0x0e,
	0x04, 0x16, 0xe4, 0x96, 0x55, 0xfe, 0x1c, 0xa6, 0xb9, 0x34, 0x57, 0x51, 0xab, 0xeb, 0x0b, 0xc3,
	0xc5, 0xd2, 0xb1, 0xb4, 0x4d, 0xeb, 0xaf, 0x02, 0xac, 0xec, 0x10, 0x71, 0xd0, 0xe9, 0x1e, 0xb2,
	0x34, 0x3e, 0xdb, 0x48, 0xc5, 0x29, 0x89, 0x45, 0xe8, 0xab, 0x49, 0xcd, 0x2e, 0x7c, 0x08, 0x55,
	0x1e, 0x26, 0x9e, 0x8f, 0xa3, 0x48, 0xde, 0x58, 0x36, 0x8d, 0x0b, 0x93, 0x2d, 0x1c, 0x45, 0x9d,
	0x00, 0x21, 0x98, 0x3a, 0x61, 0xb4, 0x6f, 0xd2, 0x50, 0xdf, 0xa8, 0x06, 0x45, 0x41, 0x4d, 0xb5,
	0x8b, 0x82, 0xa2, 0x47, 0x50, 0xe5, 0xcc, 0xf7, 0x70, 0x10, 0x48, 0x0c, 0x6a, 0xaa, 0x2a, 0x2e,
	0x70, 0xe6, 0x6f, 0x68, 0x09, 0xfa, 0x08, 0xee, 0x0b, 0xea, 0x9d, 0x52, 0x2e, 0xac, 0x69, 0xa5,
	0x2c, 0x0b, 0xfa, 0x9a, 0x72, 0xd1, 0xfa, 0xbb, 0x00, 0x8f, 0x3f, 0x00, 0xd1, 0x4c, 0x88, 0x0d,
	0x33, 0x29, 0x27, 0x2c, 0xc6, 0x7d, 0x92, 0x6d, 0x4e, 0x76, 0x96, 0xba, 0x04, 0x73, 0x7e, 0x41,
	0x59, 0x60, 0x30, 0x0e, 0xce, 0x12, 0x7b, 0xc0, 0x68, 0xa2, 0x90, 0xce, 0xb8, 0xea, 0x1b, 0xad,
	0xc0, 0xac, 0xcc, 0x57, 0xc8, 0xeb, 0x64, 0xc2, 0x19, 0xd8, 0x30, 0x51, 0x08, 0xf4, 0x24, 0x27,
	0x8c, 0xbe, 0x23, 0xbe, 0x90, 0x7a, 0x8d, 0xb7, 0x62, 0x24, 0x9d, 0xa0, 0xf5, 0x6f, 0x09, 0x1e,
	0x39, 0xb2, 0x9b, 0x58, 0x90, 0x83, 0x4e, 0x77, 0x3b, 0xe4, 0x09, 0x16, 0xfe, 0xa9, 0x9b, 0x46,
	0x84, 0x4f, 0x28, 0xea, 0xcc, 0x70, 0x51, 0xbf, 0x00, 0x24, 0xf5, 0x09, 0x66, 0x22, 0xf4, 0xc3,
	0x04, 0xc7, 0x62, 0xd0, 0xed, 0xcd, 0xa2, 0x55, 0x70, 0x1b, 0x3c, 0x4c, 0xba, 0x57, 0xca, 0x4e,
	0x30, 0x02, 0x1b, 0x46, 0x60, 0x3f, 0x85, 0x9a, 0xbc, 0x4f, 0xce, 0x7b, 0x9c, 0xf6, 0x8f, 0x09,
	0x33, 0xe5, 0x98, 0x33, 0xd2, 0x3d, 0x25, 0x44, 0x4f, 0x40, 0x09, 0x48, 0x90, 0x59, 0xe9, 0x36,
	0xce, 0x6a, 0xa1, 0x31, 0xba, 0xb1, 0xa1, 0x0d, 0x28, 0x25, 0x61, 0x6c, 0x8a, 0x23, 0x3f, 0xe5,
	0x16, 0xc6, 0xd4, 0x93, 0xc2, 0xb2, 0xaa, 0xf6, 0x74, 0x4c, 0xbb, 0x61, 0x2c, 0x23, 0x99, 0xeb,
	0x54, 0xf7, 0xef, 0xeb, 0x48, 0x5a, 0x24, 0x27, 0x00, 0x05, 0xd0, 0x20, 0xef, 0x05, 0xc3, 0x1e,
	0x16, 0x82, 0x85, 0xc7, 0xa9, 0x20, 0xdc, 0xaa, 0xa8, 0x45, 0xfd, 0x56, 0x2d, 0xea, 0x0d, 0xa5,
	0x6e, 0x3b, 0xd2, 0x79, 0x63, 0xe0, 0xab, 0x77, 0xb6, 0x4e, 0xae, 0x4b, 0xed, 0x4d, 0x68, 0x8e,
	0x33, 0xbc, 0xd3, 0xde, 0xfe, 0x59, 0x81, 0x95, 0xc9, 0x68, 0xcc, 0xa8, 0x2e, 0x43, 0x85, 0x51,
	0xda, 0xf7, 0xf2, 0xb3, 0x2a, 0x05, 0x7b, 0x72, 0x56, 0xbf, 0x84, 0xe6, 0xf5, 0x96, 0xcb, 0x59,
	0x17, 0xd9, 0x6b, 0xf9, 0x20, 0xc9, 0x77, 0x5c, 0xab, 0xd0, 0x33, 0x68, 0xe4, 0x5d, 0x54, 0x58,
	0x5d, 0xc4, 0x7a, 0x4e, 0x3e, 0x2e, 0x7a, 0x9f, 0x08, 0x1c, 0x60, 0x81, 0xcd, 0xf4, 0xe5, 0xa3,
	0xbf, 0x35, 0x2a, 0x74, 0x01, 0x8b, 0x79, 0x97, 0x5c, 0x0b, 0xaa, 0xaa, 0x05, 0x2f, 0x6f, 0x68,
	0x81, 0x79, 0x35, 0x73, 0xa3, 0x3a, 0xdc, 0x89, 0x85, 0x64, 0x9c, 0x0e, 0x3d, 0x81, 0x2a, 0xd3,
	0x0d, 0x54, 0x23, 0xa3, 0x16, 0x54, 0x4d, 0x3e, 0x18, 0xb1, 0x9c, 0x9d, 0xc1, 0x73, 0x3f, 0x35,
	0xfe, 0xb9, 0x9f, 0xce, 0x3f, 0xf7, 0x6d, 0x28, 0x33, 0xc2, 0xd3, 0x48, 0xa8, 0xf9, 0xab, 0xad,
	0x2f, 0x2a, 0xe8, 0x79, 0xc8, 0x4a, 0xeb, 0x1a, 0xab, 0x91, 0x85, 0xaa, 0x8c, 0x2c, 0xd4, 0x1a,
	0x34, 0xa5, 0x45, 0x60, 0xfc, 0x3d, 0x96, 0x46, 0xe4, 0x6a, 0xf5, 0xe6, 0x79, 0x98, 0xe4, 0xab,
	0x31, 0xf2, 0x70, 0xcc, 0x0e, 0x3d, 0x1c, 0x68, 0x17, 0xee, 0x9f, 0x12, 0x1c, 0x10, 0xc6, 0xad,
	0x39, 0x55, 0xdd, 0xf5, 0xdb, 0x55, 0xf7, 0xb5, 0x76, 0xd2, 0xf5, 0xcc, 0x42, 0x20, 0x06, 0x0b,
	0xe6, 0xd3, 0x13, 0x34, 0xdf, 0xb9, 0x9a, 0x8a, 0xfd, 0xc3, 0x9d, 0x62, 0x1f, 0xd2, 0xe1, 0xbe,
	0x3d, 0x38, 0x1d, 0xd5, 0xa0, 0x17, 0xd0, 0x20, 0x31, 0x3e, 0x96, 0xdb, 0x7c, 0x42, 0xb0, 0x48,
	0x19, 0xe1, 0x56, 0x7d, 0xa5, 0xb4, 0x5a, 0x5b, 0xaf, 0x67, 0xd5, 0x7e, 0xa5, 0xe5, 0x6e, 0xdd,
	0x18, 0x9a, 0x33, 0x47, 0x9b, 0x50, 0x67, 0x61, 0xac, 0x7e, 0x8e, 0x45, 0xd8, 0x27, 0x34, 0x15,
	0x56, 0x43, 0xfd, 0x86, 0x2d, 0xb5, 0x35, 0x99, 0x6a, 0x67, 0x64, 0xaa, 0xbd, 0x6d, 0xc8, 0x94,
	0x5b, 0x33, 0x1e, 0x87, 0xda, 0x01, 0x39, 0x30, 0xaf, 0xf8, 0x8b, 0x7c, 0x56, 0x33, 0xc6, 0x65,
	0xcd, 0xdf, 0x14, 0xa5, 0x2e, 0xe9, 0x0d, 0x8e, 0xa2, 0x4c, 0x60, 0xbf, 0x06, 0x7b, 0xf2, 0xc4,
	0xde, 0xe5, 0x49, 0xb0, 0x5f, 0xc0, 0x6c, 0xbe, 0x3b, 0x77, 0xf2, 0x7d, 0x05, 0xd6, 0xa4, 0xea,
	0xdf, 0x25, 0xce, 0xf3, 0x67, 0x00, 0x57, 0x75, 0x47, 0x33, 0x30, 0xb5, 0xb7, 0xbf, 0xe7, 0x34,
	0xee, 0xa1, 0x79, 0x98, 0x7b, 0xe3, 0x76, 0x0e, 0xba, 0x9e, 0xb3, 0xb7, 0xb1, 0xb9, 0xeb, 0x6c,
	0x37, 0x0a, 0xcf, 0x7f, 0x85, 0xf9, 0x91, 0x85, 0x40, 0x16, 0x34, 0x77, 0x9d, 0x9d, 0x8d, 0xad,
	0x9f, 0xbd, 0x8d, 0xad, 0x2d, 0xa7, 0x7b, 0xe8, 0xed, 0xbb, 0x5e, 0xb7, 0xb3, 0xd7, 0xb8, 0x87,
	0x00, 0xca, 0x5a, 0xd4, 0x28, 0xa0, 0x3a, 0x54, 0x5d, 0xe7, 0xa7, 0x23, 0xe7, 0xe0, 0x50, 0x29,
	0x8b, 0x52, 0xe9, 0x3a, 0x3f, 0x3a, 0x5b, 0x87, 0x8d, 0x92, 0xbc, 0x74, 0xdb, 0xdd, 0xef, 0x36,
	0xa6, 0xd6, 0xff, 0x99, 0x86, 0x72, 0x67, 0x5f, 0x52, 0x2a, 0xf4, 0x1d, 0xcc, 0x6e, 0x31, 0x82,
	0x05, 0xd1, 0x54, 0x15, 0x8d, 0xe3, 0xae, 0xf6, 0xe2, 0x48, 0xdb, 0x1c, 0x49, 0xb3, 0xa5, 0xb3,
	0xe6, 0x48, 0xff, 0xc7, 0xf9, 0x6b, 0xa8, 0x0c, 0xd8, 0x37, 0x5a, 0xc8, 0xe8, 0xde, 0x35, 0x36,
	0x6e, 0x8f, 0x0b, 0x88, 0x1c, 0x80, 0xdd, 0x90, 0x67, 0x9e, 0xf6, 0xc0, 0xe4, 0x4a, 0x98, 0xb9,
	0x2f, 0x8f, 0xd5, 0x99, 0xdf, 0x80, 0x4d, 0x98, 0xbb, 0xc6, 0xe5, 0xd1, 0x92, 0xc2, 0x30, 0x8e,
	0xdf, 0x4f, 0xcc, 0xe1, 0x7b, 0x98, 0xd3, 0xd5, 0x33, 0xc4, 0x0e, 0x8d, 0xe5, 0xc5, 0x13, 0xdd,
	0x3b, 0x50, 0xbb, 0xce, 0x70, 0x91, 0x3d, 0x96, 0xf6, 0x66, 0xd9, 0x4c, 0xa6, 0xc4, 0x68, 0x17,
	0xd0, 0x28, 0x5d, 0x45, 0x0f, 0x73, 0x29, 0x8d, 0xe1, 0xb1, 0x13, 0x81, 0xbd, 0x83, 0xa5, 0x89,
	0x7c, 0x0f, 0x3d, 0xcd, 0x70, 0x7c, 0x90, 0xb2, 0xda, 0x9f, 0xde, 0x64, 0x66, 0x90, 0xf7, 0xc0,
	0x9a, 0xf4, 0x00, 0xa2, 0x4f, 0x6e, 0x43, 0x2e, 0xec, 0xa7, 0xb7, 0x7a, 0x45, 0x37, 0x1f, 0xff,
	0xf2, 0xa8, 0x17, 0x8a, 0xd3, 0xf4, 0xb8, 0xed, 0xd3, 0xfe, 0x9a, 0xe9, 0x93, 0xfe, 0x73, 0xe8,
	0xd3, 0x68, 0x8d, 0x25, 0xfe, 0x71, 0x59, 0x9d, 0xbe, 0xfa, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x78,
	0x34, 0x20, 0xb1, 0x97, 0x0e, 0x00, 0x00,
}
