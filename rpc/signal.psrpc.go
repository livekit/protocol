// Code generated by protoc-gen-psrpc v0.2.4, DO NOT EDIT.
// source: rpc/signal.proto

package rpc

import context "context"
import psrpc "github.com/livekit/psrpc"
import version "github.com/livekit/psrpc/version"

var _ = version.PsrpcVersion_0_2_4

// =======================
// Signal Client Interface
// =======================

type SignalClient interface {
	RelaySignal(context.Context, string, *RelaySignalRequest, ...psrpc.RequestOption) (*RelaySignalResponse, error)
}

// ===========================
// Signal ServerImpl Interface
// ===========================

type SignalServerImpl interface {
	RelaySignal(context.Context, *RelaySignalRequest) (*RelaySignalResponse, error)
}

// =======================
// Signal Server Interface
// =======================

type SignalServer interface {
	RegisterRelaySignalTopic(string) error
	DeregisterRelaySignalTopic(string)

	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// =============
// Signal Client
// =============

type signalClient struct {
	client *psrpc.RPCClient
}

// NewSignalClient creates a psrpc client that implements the SignalClient interface.
func NewSignalClient(clientID string, bus psrpc.MessageBus, opts ...psrpc.ClientOption) (SignalClient, error) {
	rpcClient, err := psrpc.NewRPCClient("Signal", clientID, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &signalClient{
		client: rpcClient,
	}, nil
}

func (c *signalClient) RelaySignal(ctx context.Context, topic string, req *RelaySignalRequest, opts ...psrpc.RequestOption) (*RelaySignalResponse, error) {
	return psrpc.RequestSingle[*RelaySignalResponse](ctx, c.client, "RelaySignal", topic, req, opts...)
}

// =============
// Signal Server
// =============

type signalServer struct {
	svc SignalServerImpl
	rpc *psrpc.RPCServer
}

// NewSignalServer builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewSignalServer(serverID string, svc SignalServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (SignalServer, error) {
	s := psrpc.NewRPCServer("Signal", serverID, bus, opts...)

	return &signalServer{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *signalServer) RegisterRelaySignalTopic(topic string) error {
	return psrpc.RegisterHandler(s.rpc, "RelaySignal", topic, s.svc.RelaySignal, nil)
}

func (s *signalServer) DeregisterRelaySignalTopic(topic string) {
	s.rpc.DeregisterHandler("RelaySignal", topic)
}

func (s *signalServer) Shutdown() {
	s.rpc.Close(false)
}

func (s *signalServer) Kill() {
	s.rpc.Close(true)
}

var psrpcFileDescriptor3 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x65, 0x90, 0x5a, 0xe4, 0x12, 0x09, 0x5c, 0xd1, 0x44, 0x99, 0x50, 0x26, 0x84, 0x90,
	0x53, 0xb5, 0x1b, 0x23, 0x23, 0xa3, 0x33, 0xc1, 0x12, 0xa5, 0xae, 0x15, 0xac, 0x06, 0xdb, 0xdc,
	0xb9, 0x95, 0x58, 0xd9, 0xf8, 0x3b, 0xfc, 0x42, 0xd4, 0x38, 0x0d, 0x41, 0x99, 0x12, 0xbf, 0xf7,
	0xee, 0xbb, 0x67, 0xd3, 0x2b, 0x70, 0x32, 0x47, 0x5d, 0x9b, 0xaa, 0xe1, 0x0e, 0xac, 0xb7, 0xec,
	0x1c, 0x9c, 0x4c, 0x23, 0xeb, 0xbc, 0xb6, 0x06, 0x83, 0x96, 0x2e, 0x1a, 0x7d, 0x50, 0x3b, 0xed,
	0x4b, 0x6d, 0xbc, 0x82, 0x3e, 0x9b, 0x5e, 0x9f, 0x74, 0xf0, 0x32, 0x48, 0xd9, 0x17, 0xa1, 0x4c,
	0xa8, 0xa6, 0xfa, 0x2c, 0x5a, 0xa8, 0x50, 0x1f, 0x7b, 0x85, 0x9e, 0x3d, 0xd2, 0x08, 0x7d, 0x05,
	0xbe, 0x44, 0x85, 0xa8, 0xad, 0x49, 0xc8, 0x2d, 0xb9, 0x9b, 0xad, 0x6e, 0x78, 0x47, 0xe0, 0xc5,
	0xd1, 0x2d, 0x82, 0x29, 0x2e, 0x71, 0x70, 0x62, 0x4b, 0x3a, 0x85, 0x80, 0x49, 0xce, 0xda, 0xa9,
	0xc5, 0xdf, 0xd4, 0x70, 0x89, 0x38, 0xc5, 0xb2, 0x67, 0x3a, 0xff, 0xd7, 0x01, 0x9d, 0x35, 0xa8,
	0xd8, 0x9a, 0x5e, 0x40, 0xf7, 0xdf, 0xed, 0x8f, 0x47, 0xa4, 0x60, 0x8b, 0x3e, 0xb8, 0x92, 0x74,
	0x12, 0x3c, 0xf6, 0x42, 0x67, 0x03, 0x2a, 0x8b, 0x39, 0x38, 0xc9, 0xc7, 0x77, 0x4d, 0x93, 0xb1,
	0x11, 0x58, 0x59, 0xfc, 0xf3, 0x4d, 0xe6, 0x09, 0xc9, 0x22, 0x36, 0x35, 0x76, 0xab, 0x4a, 0xbd,
	0x3d, 0xf6, 0x58, 0x92, 0xa7, 0x87, 0xd7, 0xfb, 0x5a, 0xfb, 0xb7, 0xfd, 0x86, 0x4b, 0xfb, 0x9e,
	0x77, 0x9d, 0xfa, 0xaf, 0xdb, 0xd5, 0x39, 0x2a, 0x38, 0x68, 0xa9, 0x72, 0x70, 0x72, 0x33, 0x69,
	0x9f, 0x7a, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xde, 0xa6, 0xa9, 0xbd, 0x01, 0x00, 0x00,
}
