// Code generated by protoc-gen-psrpc v0.2.5, DO NOT EDIT.
// source: rpc/egress.proto

package rpc

import context "context"
import psrpc "github.com/livekit/psrpc"
import version "github.com/livekit/psrpc/version"
import livekit "github.com/livekit/protocol/livekit"

var _ = version.PsrpcVersion_0_2_5

// ===============================
// EgressInternal Client Interface
// ===============================

type EgressInternalClient interface {
	StartEgress(context.Context, string, *StartEgressRequest, ...psrpc.RequestOption) (*livekit.EgressInfo, error)

	ListActiveEgress(context.Context, *ListActiveEgressRequest, ...psrpc.RequestOption) (<-chan *psrpc.Response[*ListActiveEgressResponse], error)
}

// ===================================
// EgressInternal ServerImpl Interface
// ===================================

type EgressInternalServerImpl interface {
	StartEgress(context.Context, *StartEgressRequest) (*livekit.EgressInfo, error)
	StartEgressAffinity(*StartEgressRequest) float32

	ListActiveEgress(context.Context, *ListActiveEgressRequest) (*ListActiveEgressResponse, error)
}

// ===============================
// EgressInternal Server Interface
// ===============================

type EgressInternalServer interface {
	RegisterStartEgressTopic(string) error
	DeregisterStartEgressTopic(string)

	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// =====================
// EgressInternal Client
// =====================

type egressInternalClient struct {
	client *psrpc.RPCClient
}

// NewEgressInternalClient creates a psrpc client that implements the EgressInternalClient interface.
func NewEgressInternalClient(clientID string, bus psrpc.MessageBus, opts ...psrpc.ClientOption) (EgressInternalClient, error) {
	rpcClient, err := psrpc.NewRPCClient("EgressInternal", clientID, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &egressInternalClient{
		client: rpcClient,
	}, nil
}

func (c *egressInternalClient) StartEgress(ctx context.Context, topic string, req *StartEgressRequest, opts ...psrpc.RequestOption) (*livekit.EgressInfo, error) {
	return psrpc.RequestSingle[*livekit.EgressInfo](ctx, c.client, "StartEgress", topic, req, opts...)
}

func (c *egressInternalClient) ListActiveEgress(ctx context.Context, req *ListActiveEgressRequest, opts ...psrpc.RequestOption) (<-chan *psrpc.Response[*ListActiveEgressResponse], error) {
	return psrpc.RequestMulti[*ListActiveEgressResponse](ctx, c.client, "ListActiveEgress", "", req, opts...)
}

// =====================
// EgressInternal Server
// =====================

type egressInternalServer struct {
	svc EgressInternalServerImpl
	rpc *psrpc.RPCServer
}

// NewEgressInternalServer builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewEgressInternalServer(serverID string, svc EgressInternalServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (EgressInternalServer, error) {
	s := psrpc.NewRPCServer("EgressInternal", serverID, bus, opts...)

	var err error
	err = psrpc.RegisterHandler(s, "ListActiveEgress", "", svc.ListActiveEgress, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	return &egressInternalServer{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *egressInternalServer) RegisterStartEgressTopic(topic string) error {
	return psrpc.RegisterHandler(s.rpc, "StartEgress", topic, s.svc.StartEgress, s.svc.StartEgressAffinity)
}

func (s *egressInternalServer) DeregisterStartEgressTopic(topic string) {
	s.rpc.DeregisterHandler("StartEgress", topic)
}

func (s *egressInternalServer) Shutdown() {
	s.rpc.Close(false)
}

func (s *egressInternalServer) Kill() {
	s.rpc.Close(true)
}

// ==============================
// EgressHandler Client Interface
// ==============================

type EgressHandlerClient interface {
	UpdateStream(context.Context, string, *livekit.UpdateStreamRequest, ...psrpc.RequestOption) (*livekit.EgressInfo, error)

	StopEgress(context.Context, string, *livekit.StopEgressRequest, ...psrpc.RequestOption) (*livekit.EgressInfo, error)
}

// ==================================
// EgressHandler ServerImpl Interface
// ==================================

type EgressHandlerServerImpl interface {
	UpdateStream(context.Context, *livekit.UpdateStreamRequest) (*livekit.EgressInfo, error)

	StopEgress(context.Context, *livekit.StopEgressRequest) (*livekit.EgressInfo, error)
}

// ==============================
// EgressHandler Server Interface
// ==============================

type EgressHandlerServer interface {
	RegisterUpdateStreamTopic(string) error
	DeregisterUpdateStreamTopic(string)

	RegisterStopEgressTopic(string) error
	DeregisterStopEgressTopic(string)

	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// ====================
// EgressHandler Client
// ====================

type egressHandlerClient struct {
	client *psrpc.RPCClient
}

// NewEgressHandlerClient creates a psrpc client that implements the EgressHandlerClient interface.
func NewEgressHandlerClient(clientID string, bus psrpc.MessageBus, opts ...psrpc.ClientOption) (EgressHandlerClient, error) {
	rpcClient, err := psrpc.NewRPCClient("EgressHandler", clientID, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &egressHandlerClient{
		client: rpcClient,
	}, nil
}

func (c *egressHandlerClient) UpdateStream(ctx context.Context, topic string, req *livekit.UpdateStreamRequest, opts ...psrpc.RequestOption) (*livekit.EgressInfo, error) {
	return psrpc.RequestSingle[*livekit.EgressInfo](ctx, c.client, "UpdateStream", topic, req, opts...)
}

func (c *egressHandlerClient) StopEgress(ctx context.Context, topic string, req *livekit.StopEgressRequest, opts ...psrpc.RequestOption) (*livekit.EgressInfo, error) {
	return psrpc.RequestSingle[*livekit.EgressInfo](ctx, c.client, "StopEgress", topic, req, opts...)
}

// ====================
// EgressHandler Server
// ====================

type egressHandlerServer struct {
	svc EgressHandlerServerImpl
	rpc *psrpc.RPCServer
}

// NewEgressHandlerServer builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewEgressHandlerServer(serverID string, svc EgressHandlerServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (EgressHandlerServer, error) {
	s := psrpc.NewRPCServer("EgressHandler", serverID, bus, opts...)

	return &egressHandlerServer{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *egressHandlerServer) RegisterUpdateStreamTopic(topic string) error {
	return psrpc.RegisterHandler(s.rpc, "UpdateStream", topic, s.svc.UpdateStream, nil)
}

func (s *egressHandlerServer) DeregisterUpdateStreamTopic(topic string) {
	s.rpc.DeregisterHandler("UpdateStream", topic)
}

func (s *egressHandlerServer) RegisterStopEgressTopic(topic string) error {
	return psrpc.RegisterHandler(s.rpc, "StopEgress", topic, s.svc.StopEgress, nil)
}

func (s *egressHandlerServer) DeregisterStopEgressTopic(topic string) {
	s.rpc.DeregisterHandler("StopEgress", topic)
}

func (s *egressHandlerServer) Shutdown() {
	s.rpc.Close(false)
}

func (s *egressHandlerServer) Kill() {
	s.rpc.Close(true)
}

var psrpcFileDescriptor0 = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xd1, 0x6e, 0xda, 0x4c,
	0x10, 0x85, 0xff, 0xc5, 0xc1, 0xe0, 0xe1, 0x87, 0x46, 0xd3, 0x54, 0x6c, 0x20, 0x51, 0x29, 0xed,
	0x05, 0xaa, 0x5a, 0x23, 0x91, 0xab, 0x5e, 0x86, 0x0a, 0x29, 0x96, 0x22, 0x55, 0x32, 0x8d, 0x22,
	0xf5, 0x06, 0x19, 0x7b, 0x4b, 0x2d, 0xc0, 0xbb, 0xdd, 0x5d, 0xe0, 0x19, 0xf2, 0x18, 0x7d, 0x83,
	0x2a, 0x0f, 0xd5, 0xe7, 0xa8, 0xbc, 0x36, 0x2e, 0x10, 0x51, 0xf5, 0x0a, 0xed, 0x77, 0xce, 0x1c,
	0xcd, 0x0c, 0x63, 0x38, 0x95, 0x22, 0xec, 0xb3, 0x99, 0x64, 0x4a, 0xb9, 0x42, 0x72, 0xcd, 0xd1,
	0x92, 0x22, 0x6c, 0xd5, 0xb9, 0xd0, 0x31, 0x4f, 0x72, 0xd6, 0x3a, 0x5b, 0xc4, 0x6b, 0x36, 0x8f,
	0xf5, 0x64, 0xd7, 0xd9, 0xfd, 0x65, 0x01, 0x8e, 0x75, 0x20, 0xf5, 0xc8, 0x50, 0x9f, 0x7d, 0x5f,
	0x31, 0xa5, 0xb1, 0x0d, 0x4e, 0x66, 0x9b, 0xc4, 0x11, 0x25, 0x1d, 0xd2, 0x73, 0xfc, 0x6a, 0x06,
	0xbc, 0x08, 0x5f, 0x01, 0xc8, 0xcc, 0x97, 0xaa, 0xa5, 0x54, 0x1d, 0x96, 0x28, 0xf1, 0x9d, 0x9c,
	0x7a, 0x11, 0xbe, 0x04, 0x47, 0xb1, 0x24, 0x62, 0x32, 0x75, 0x40, 0xe1, 0xa8, 0x66, 0xd0, 0x8b,
	0xb0, 0x0d, 0x15, 0xc5, 0x12, 0x3d, 0x09, 0x34, 0x3d, 0xe9, 0x90, 0x9e, 0x65, 0x64, 0x3b, 0x45,
	0xd7, 0x1a, 0x6f, 0xa1, 0x21, 0x39, 0x5f, 0x4e, 0x42, 0xbe, 0x14, 0x5c, 0xc5, 0x9a, 0xd1, 0x72,
	0x87, 0xf4, 0x6a, 0x83, 0xd7, 0x6e, 0x3e, 0x83, 0xeb, 0x73, 0xbe, 0xfc, 0xb8, 0x55, 0xf7, 0x5a,
	0xbf, 0xf9, 0xcf, 0xaf, 0xcb, 0x5d, 0x15, 0x3f, 0xc1, 0x33, 0x2d, 0x83, 0x70, 0xbe, 0x13, 0x67,
	0x9b, 0xb8, 0x37, 0x45, 0xdc, 0xe7, 0x54, 0x3f, 0x9a, 0xd7, 0xd0, 0x7b, 0x32, 0x5e, 0x41, 0xd9,
	0x10, 0x5a, 0x31, 0x31, 0xed, 0xfd, 0x98, 0xc3, 0xea, 0xcc, 0x8b, 0xef, 0xc1, 0xda, 0xb0, 0x29,
	0xad, 0x99, 0x92, 0xf3, 0xa2, 0xe4, 0x9e, 0x4d, 0x0f, 0x0b, 0x52, 0x1f, 0x36, 0xa1, 0x62, 0x56,
	0x10, 0x47, 0xd4, 0x32, 0xeb, 0xb7, 0xd3, 0xa7, 0x17, 0xe1, 0x19, 0x94, 0x35, 0x9f, 0xb3, 0x84,
	0x56, 0x0d, 0xce, 0x1e, 0xf8, 0x02, 0xec, 0x8d, 0x9a, 0xac, 0xe4, 0x82, 0x3a, 0x19, 0xde, 0xa8,
	0x3b, 0xb9, 0x18, 0x3a, 0x50, 0xc9, 0xff, 0x93, 0xee, 0x39, 0x34, 0x6f, 0x63, 0xa5, 0xaf, 0x43,
	0x1d, 0xaf, 0xf7, 0x27, 0xec, 0x7e, 0x00, 0xfa, 0x54, 0x52, 0x82, 0x27, 0x8a, 0xe1, 0x25, 0x40,
	0x71, 0x08, 0x8a, 0x92, 0x8e, 0xd5, 0x73, 0x7c, 0x67, 0x7b, 0x09, 0x6a, 0xf0, 0x93, 0x40, 0x23,
	0xab, 0xf0, 0x12, 0xcd, 0x64, 0x12, 0x2c, 0x70, 0x04, 0xb5, 0x9d, 0x83, 0xc2, 0xa6, 0x2b, 0x45,
	0xe8, 0x3e, 0x3d, 0xb1, 0xd6, 0xf3, 0x62, 0x07, 0xdb, 0x80, 0xaf, 0xbc, 0x5b, 0x7d, 0x7c, 0x20,
	0x27, 0xe9, 0xc1, 0xe1, 0x3d, 0x9c, 0x1e, 0x36, 0x85, 0x17, 0x26, 0xeb, 0xc8, 0x18, 0xad, 0xcb,
	0x23, 0x6a, 0x36, 0x49, 0xd7, 0x7e, 0x7c, 0x20, 0xa5, 0x2a, 0x19, 0xfc, 0x20, 0x50, 0xcf, 0xa4,
	0x9b, 0x20, 0x89, 0x16, 0x4c, 0xa2, 0x07, 0xff, 0xdf, 0x89, 0x28, 0xd0, 0x6c, 0xac, 0x25, 0x0b,
	0x96, 0x78, 0x51, 0x74, 0xb6, 0x8b, 0xff, 0xda, 0xb7, 0x09, 0xa7, 0x04, 0x47, 0x00, 0x63, 0xcd,
	0x45, 0xde, 0x6f, 0xab, 0xb0, 0xfe, 0x81, 0xff, 0x12, 0x33, 0x7c, 0xf7, 0xe5, 0xed, 0x2c, 0xd6,
	0xdf, 0x56, 0x53, 0x37, 0xe4, 0xcb, 0x7e, 0x6e, 0x2c, 0x7e, 0xc5, 0x7c, 0xd6, 0x57, 0x4c, 0xae,
	0xe3, 0x90, 0xf5, 0xa5, 0x08, 0xa7, 0xb6, 0xf9, 0x94, 0xaf, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x20, 0xd1, 0xe8, 0x08, 0x08, 0x04, 0x00, 0x00,
}
