// Code generated by protoc-gen-psrpc v0.6.0, DO NOT EDIT.
// source: rpc/sip.proto

package rpc

import (
	"context"

	"github.com/livekit/psrpc"
	"github.com/livekit/psrpc/pkg/client"
	"github.com/livekit/psrpc/pkg/info"
	"github.com/livekit/psrpc/pkg/rand"
	"github.com/livekit/psrpc/pkg/server"
	"github.com/livekit/psrpc/version"
)
import google_protobuf "google.golang.org/protobuf/types/known/emptypb"

var _ = version.PsrpcVersion_0_6

// ============================
// SIPInternal Client Interface
// ============================

type SIPInternalClient interface {
	CreateSIPParticipant(ctx context.Context, topic string, req *InternalCreateSIPParticipantRequest, opts ...psrpc.RequestOption) (*InternalCreateSIPParticipantResponse, error)

	TransferSIPParticipant(ctx context.Context, sipCallId string, req *InternalTransferSIPParticipantRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error)

	// Close immediately, without waiting for pending RPCs
	Close()
}

// ================================
// SIPInternal ServerImpl Interface
// ================================

type SIPInternalServerImpl interface {
	CreateSIPParticipant(context.Context, *InternalCreateSIPParticipantRequest) (*InternalCreateSIPParticipantResponse, error)
	CreateSIPParticipantAffinity(context.Context, *InternalCreateSIPParticipantRequest) float32

	TransferSIPParticipant(context.Context, *InternalTransferSIPParticipantRequest) (*google_protobuf.Empty, error)
}

// ============================
// SIPInternal Server Interface
// ============================

type SIPInternalServer interface {
	RegisterCreateSIPParticipantTopic(topic string) error
	DeregisterCreateSIPParticipantTopic(topic string)
	RegisterTransferSIPParticipantTopic(sipCallId string) error
	DeregisterTransferSIPParticipantTopic(sipCallId string)

	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// ==================
// SIPInternal Client
// ==================

type sIPInternalClient struct {
	client *client.RPCClient
}

// NewSIPInternalClient creates a psrpc client that implements the SIPInternalClient interface.
func NewSIPInternalClient(bus psrpc.MessageBus, opts ...psrpc.ClientOption) (SIPInternalClient, error) {
	sd := &info.ServiceDefinition{
		Name: "SIPInternal",
		ID:   rand.NewClientID(),
	}

	sd.RegisterMethod("CreateSIPParticipant", true, false, true, false)
	sd.RegisterMethod("TransferSIPParticipant", false, false, true, true)

	rpcClient, err := client.NewRPCClient(sd, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &sIPInternalClient{
		client: rpcClient,
	}, nil
}

func (c *sIPInternalClient) CreateSIPParticipant(ctx context.Context, topic string, req *InternalCreateSIPParticipantRequest, opts ...psrpc.RequestOption) (*InternalCreateSIPParticipantResponse, error) {
	return client.RequestSingle[*InternalCreateSIPParticipantResponse](ctx, c.client, "CreateSIPParticipant", []string{topic}, req, opts...)
}

func (c *sIPInternalClient) TransferSIPParticipant(ctx context.Context, sipCallId string, req *InternalTransferSIPParticipantRequest, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error) {
	return client.RequestSingle[*google_protobuf.Empty](ctx, c.client, "TransferSIPParticipant", []string{sipCallId}, req, opts...)
}

func (s *sIPInternalClient) Close() {
	s.client.Close()
}

// ==================
// SIPInternal Server
// ==================

type sIPInternalServer struct {
	svc SIPInternalServerImpl
	rpc *server.RPCServer
}

// NewSIPInternalServer builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewSIPInternalServer(svc SIPInternalServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (SIPInternalServer, error) {
	sd := &info.ServiceDefinition{
		Name: "SIPInternal",
		ID:   rand.NewServerID(),
	}

	s := server.NewRPCServer(sd, bus, opts...)

	sd.RegisterMethod("CreateSIPParticipant", true, false, true, false)
	sd.RegisterMethod("TransferSIPParticipant", false, false, true, true)
	return &sIPInternalServer{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *sIPInternalServer) RegisterCreateSIPParticipantTopic(topic string) error {
	return server.RegisterHandler(s.rpc, "CreateSIPParticipant", []string{topic}, s.svc.CreateSIPParticipant, s.svc.CreateSIPParticipantAffinity)
}

func (s *sIPInternalServer) DeregisterCreateSIPParticipantTopic(topic string) {
	s.rpc.DeregisterHandler("CreateSIPParticipant", []string{topic})
}

func (s *sIPInternalServer) RegisterTransferSIPParticipantTopic(sipCallId string) error {
	return server.RegisterHandler(s.rpc, "TransferSIPParticipant", []string{sipCallId}, s.svc.TransferSIPParticipant, nil)
}

func (s *sIPInternalServer) DeregisterTransferSIPParticipantTopic(sipCallId string) {
	s.rpc.DeregisterHandler("TransferSIPParticipant", []string{sipCallId})
}

func (s *sIPInternalServer) Shutdown() {
	s.rpc.Close(false)
}

func (s *sIPInternalServer) Kill() {
	s.rpc.Close(true)
}

var psrpcFileDescriptor10 = []byte{
	// 991 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcd, 0x72, 0xdb, 0x36,
	0x10, 0x1e, 0x5a, 0xfe, 0x5d, 0x59, 0x3f, 0x86, 0x2c, 0x07, 0xa6, 0x9b, 0x44, 0x75, 0x9a, 0x19,
	0xa5, 0x07, 0xba, 0x75, 0xa6, 0xd3, 0x4e, 0x0e, 0x9d, 0x3a, 0x8e, 0x3d, 0xd1, 0x21, 0x8d, 0x2b,
	0x2b, 0x97, 0x5e, 0x38, 0x10, 0x09, 0xdb, 0xa8, 0x49, 0x82, 0x05, 0xc0, 0x28, 0xea, 0x1b, 0xe4,
	0x2d, 0xfa, 0x0c, 0x79, 0x88, 0x3e, 0x47, 0xdf, 0xa3, 0x97, 0x0e, 0x00, 0xd2, 0xa6, 0x65, 0x29,
	0x95, 0xa6, 0x37, 0xee, 0x7e, 0xbb, 0x1f, 0xb0, 0xab, 0xdd, 0x0f, 0x82, 0x9a, 0x48, 0x83, 0x03,
	0xc9, 0x52, 0x2f, 0x15, 0x5c, 0x71, 0x54, 0x11, 0x69, 0xe0, 0xee, 0x5d, 0x72, 0x7e, 0x19, 0xd1,
	0x03, 0xe3, 0x1a, 0x66, 0x17, 0x07, 0x34, 0x4e, 0xd5, 0xd8, 0x46, 0xb8, 0x8f, 0x26, 0xc1, 0x30,
	0x13, 0x44, 0x31, 0x9e, 0xe4, 0x78, 0x8d, 0xa7, 0xda, 0x92, 0xb9, 0xb9, 0x15, 0xb1, 0xf7, 0xf4,
	0x9a, 0x29, 0xff, 0xe6, 0x8c, 0xfd, 0xbf, 0x6a, 0xf0, 0xa4, 0x97, 0x28, 0x2a, 0x12, 0x12, 0x1d,
	0x0b, 0x4a, 0x14, 0x3d, 0xef, 0x9d, 0x9d, 0x11, 0xa1, 0x58, 0xc0, 0x52, 0x92, 0xa8, 0x3e, 0xfd,
	0x3d, 0xa3, 0x52, 0xa1, 0x87, 0x00, 0xa9, 0xe0, 0xbf, 0xd1, 0x40, 0xf9, 0x2c, 0xc4, 0xa8, 0xe3,
	0x74, 0x37, 0xfa, 0x1b, 0xb9, 0xa7, 0x17, 0xa2, 0x47, 0x50, 0x95, 0x2c, 0xf5, 0x03, 0x12, 0x45,
	0x1a, 0xaf, 0x59, 0x5c, 0xb2, 0xf4, 0x98, 0x44, 0x51, 0x2f, 0x44, 0x1d, 0xd8, 0xd4, 0xb8, 0x12,
	0x59, 0x72, 0xad, 0x03, 0x5a, 0x26, 0x00, 0x24, 0x4b, 0x07, 0xda, 0xd5, 0x0b, 0x11, 0x86, 0x35,
	0x12, 0x86, 0x82, 0x4a, 0x89, 0x97, 0x0c, 0x58, 0x98, 0xc8, 0x85, 0xf5, 0x2b, 0x2e, 0x55, 0x42,
	0x62, 0x8a, 0xb7, 0x0d, 0x74, 0x63, 0xa3, 0xe7, 0xb0, 0xa1, 0x04, 0x49, 0x64, 0xca, 0x85, 0xc2,
	0xcd, 0x8e, 0xd3, 0xad, 0x1f, 0xb6, 0xbd, 0xbc, 0x4a, 0xef, 0xbc, 0x77, 0x36, 0x28, 0xc0, 0xfe,
	0x6d, 0x1c, 0xda, 0x81, 0xd5, 0x24, 0x8b, 0x87, 0x54, 0xe0, 0x8a, 0xa1, 0xcb, 0x2d, 0xf4, 0x00,
	0xd6, 0x4c, 0x01, 0x8a, 0xe3, 0x65, 0x0b, 0x68, 0x73, 0xc0, 0xf5, 0x0d, 0x32, 0xa9, 0x5b, 0x14,
	0x53, 0xbc, 0x62, 0x6f, 0x50, 0xd8, 0x1a, 0x4b, 0x89, 0x94, 0x23, 0x2e, 0x42, 0xbc, 0x6a, 0xb1,
	0xc2, 0x46, 0x7b, 0xb0, 0x21, 0x38, 0x8f, 0x7d, 0x93, 0xb8, 0x66, 0x41, 0xed, 0xf8, 0x59, 0x27,
	0x7e, 0x0b, 0xdb, 0xe9, 0x6d, 0x9f, 0x7d, 0x16, 0xd2, 0x44, 0x31, 0x35, 0xc6, 0xeb, 0x26, 0xae,
	0x55, 0xc2, 0x7a, 0x39, 0x84, 0x9e, 0x41, 0xb3, 0x9c, 0x62, 0x68, 0xeb, 0x26, 0xbc, 0x51, 0xf2,
	0x4f, 0x63, 0x8f, 0xa9, 0x22, 0x21, 0x51, 0x04, 0x37, 0xee, 0xb1, 0xbf, 0xc9, 0x21, 0xf4, 0x07,
	0xec, 0x94, 0x53, 0x88, 0x52, 0x82, 0x0d, 0x33, 0x45, 0x25, 0xde, 0xea, 0x54, 0xba, 0xd5, 0xc3,
	0x63, 0x4f, 0xa4, 0x81, 0x37, 0xc7, 0xb0, 0x78, 0x25, 0xd7, 0xd1, 0x0d, 0xcb, 0x49, 0xa2, 0xc4,
	0xb8, 0xdf, 0x4e, 0xa7, 0x61, 0x68, 0x1b, 0x56, 0x14, 0xbf, 0xa6, 0x09, 0xde, 0x30, 0xf7, 0xb3,
	0x06, 0x6a, 0xc3, 0xea, 0x48, 0xfa, 0x99, 0x88, 0x30, 0x58, 0xf7, 0x48, 0xbe, 0x13, 0x11, 0x42,
	0xb0, 0x1c, 0xaa, 0xf8, 0x02, 0x57, 0x8d, 0xd3, 0x7c, 0xa3, 0x27, 0x50, 0x4b, 0x23, 0x32, 0xf6,
	0x43, 0x46, 0x22, 0xc5, 0x13, 0x8a, 0x37, 0x3b, 0x4e, 0x77, 0xbd, 0xbf, 0xa9, 0x9d, 0xaf, 0x72,
	0x1f, 0x7a, 0x0b, 0x6b, 0x57, 0x94, 0x84, 0x54, 0x48, 0xdc, 0x36, 0x25, 0x7d, 0x37, 0x77, 0x49,
	0xaf, 0x6d, 0x9e, 0x2d, 0xa2, 0x60, 0x41, 0x19, 0xb4, 0xf3, 0x4f, 0x5f, 0xf1, 0x72, 0xc7, 0x76,
	0x0c, 0xfd, 0xd1, 0xa2, 0xf4, 0x03, 0x3e, 0xd9, 0xaf, 0xd6, 0xd5, 0x7d, 0x44, 0x1f, 0x7b, 0x7b,
	0x96, 0x3e, 0xb9, 0xa8, 0xca, 0x5d, 0xf0, 0xd8, 0x5b, 0xce, 0x01, 0xbf, 0x53, 0x61, 0x8b, 0xdc,
	0x47, 0xd0, 0x4b, 0x68, 0xb0, 0x24, 0x88, 0xb2, 0x90, 0xde, 0x1c, 0xb8, 0x67, 0x56, 0x6e, 0xb7,
	0xbc, 0x72, 0x36, 0xfa, 0xad, 0x15, 0x9e, 0x7e, 0x3d, 0xcf, 0x28, 0x38, 0x7e, 0x84, 0x26, 0x4d,
	0xc8, 0x30, 0xa2, 0xa1, 0x7f, 0x41, 0x89, 0xca, 0x04, 0x95, 0x78, 0xb7, 0x53, 0xe9, 0xd6, 0x0f,
	0x5b, 0x65, 0x92, 0x53, 0x8b, 0xf5, 0x1b, 0x79, 0x70, 0x6e, 0x9b, 0x3b, 0x08, 0x96, 0x5c, 0xb2,
	0xe4, 0xd2, 0x57, 0x2c, 0xa6, 0x3c, 0x53, 0xf8, 0x41, 0xc7, 0xe9, 0x56, 0x0f, 0x77, 0x3d, 0xab,
	0x85, 0x5e, 0xa1, 0x85, 0xde, 0xab, 0x5c, 0x0b, 0xfb, 0xf5, 0x3c, 0x63, 0x60, 0x13, 0xd0, 0x09,
	0x6c, 0xc5, 0xe4, 0x83, 0x15, 0xab, 0x42, 0x30, 0x31, 0xfe, 0x2f, 0x96, 0x46, 0x4c, 0x3e, 0x68,
	0x35, 0x2b, 0x1c, 0xe8, 0x14, 0x9a, 0x31, 0x0d, 0x19, 0xf1, 0x69, 0x12, 0x88, 0xb1, 0xa9, 0x17,
	0x7f, 0x61, 0xfa, 0xb1, 0x57, 0x2e, 0xe5, 0x8d, 0x8e, 0x39, 0xb9, 0x09, 0xe9, 0x37, 0xe2, 0xbb,
	0x0e, 0xe4, 0x41, 0x6b, 0x44, 0x98, 0xf2, 0xb3, 0x44, 0xb1, 0xc8, 0x27, 0x89, 0x1c, 0x51, 0x41,
	0x43, 0xfc, 0xd0, 0x0c, 0xf0, 0x96, 0x86, 0xde, 0x69, 0xe4, 0x28, 0x07, 0xdc, 0xd7, 0xe0, 0xce,
	0x5e, 0x30, 0xd4, 0x84, 0xca, 0x35, 0x1d, 0x63, 0xc7, 0xec, 0x86, 0xfe, 0xd4, 0xbb, 0xf5, 0x9e,
	0x44, 0x19, 0xcd, 0x75, 0xd5, 0x1a, 0x2f, 0x96, 0x7e, 0x70, 0xdc, 0x17, 0xb0, 0x59, 0xfe, 0xd5,
	0x17, 0xca, 0x3d, 0x05, 0x3c, 0x6b, 0x68, 0x17, 0xe5, 0x99, 0x35, 0x85, 0x8b, 0xf0, 0xec, 0xff,
	0xe9, 0xc0, 0x57, 0x9f, 0x1f, 0x79, 0x99, 0xf2, 0x44, 0x52, 0xf4, 0x14, 0xea, 0x77, 0x75, 0x37,
	0xe7, 0xaf, 0xdd, 0x51, 0xdc, 0x99, 0xf2, 0xbc, 0x34, 0x5b, 0x9e, 0x27, 0x1e, 0xc1, 0xca, 0xc4,
	0x23, 0xb8, 0xff, 0xf7, 0x12, 0x3c, 0x2d, 0xae, 0x68, 0x1e, 0xa6, 0x0b, 0x2a, 0xa6, 0xbf, 0xb6,
	0x13, 0x4c, 0xce, 0xe4, 0x73, 0xfa, 0x18, 0xaa, 0x2a, 0x27, 0xd0, 0xaf, 0x95, 0xbd, 0x13, 0x14,
	0xae, 0x01, 0xbf, 0x2f, 0x87, 0x95, 0x29, 0x72, 0xf8, 0xcb, 0xad, 0x1c, 0x2e, 0x1b, 0xe1, 0xf8,
	0xfe, 0x8e, 0x70, 0x7c, 0xf6, 0x8a, 0x33, 0x04, 0x71, 0xca, 0x7a, 0xae, 0x2c, 0xb8, 0x9e, 0xff,
	0x67, 0x2a, 0x0f, 0xff, 0x71, 0xa0, 0x7a, 0xde, 0x3b, 0x2b, 0x4a, 0x40, 0x23, 0xd8, 0x9e, 0x36,
	0x0c, 0xa8, 0x3b, 0xaf, 0x44, 0xba, 0xcf, 0xe6, 0x88, 0xb4, 0x93, 0xb5, 0x0f, 0x9f, 0x3e, 0x3a,
	0xab, 0x4d, 0xe7, 0x27, 0xe7, 0x1b, 0x07, 0x49, 0xd8, 0x99, 0xde, 0x3f, 0xf4, 0xf5, 0xfc, 0x4d,
	0x76, 0x77, 0xee, 0x75, 0xed, 0x44, 0xff, 0xfb, 0xdb, 0x6f, 0x7f, 0xfa, 0xe8, 0x6c, 0x35, 0x1d,
	0xb7, 0x86, 0xca, 0x73, 0xf2, 0xf2, 0xcb, 0x5f, 0x1f, 0x5f, 0x32, 0x75, 0x95, 0x0d, 0xbd, 0x80,
	0xc7, 0x07, 0xb9, 0x06, 0xd9, 0x3f, 0x87, 0x01, 0x8f, 0x0e, 0x44, 0x1a, 0x0c, 0x57, 0x8d, 0xf5,
	0xfc, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x87, 0x2a, 0x33, 0x06, 0x6b, 0x0a, 0x00, 0x00,
}
