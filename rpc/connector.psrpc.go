// Code generated by protoc-gen-psrpc v0.7.0, DO NOT EDIT.
// source: rpc/connector.proto

package rpc

import (
	"context"

	"github.com/livekit/psrpc"
	"github.com/livekit/psrpc/pkg/client"
	"github.com/livekit/psrpc/pkg/info"
	"github.com/livekit/psrpc/pkg/rand"
	"github.com/livekit/psrpc/pkg/server"
	"github.com/livekit/psrpc/version"
)
import livekit10 "github.com/livekit/protocol/livekit"

var _ = version.PsrpcVersion_0_7

// ==================================
// ConnectorInternal Client Interface
// ==================================

type ConnectorInternalClient interface {
	DialWhatsAppCall(ctx context.Context, topic string, req *InternalDialWhatsAppCallRequest, opts ...psrpc.RequestOption) (*livekit10.DialWhatsAppCallResponse, error)

	AcceptWhatsAppCall(ctx context.Context, topic string, req *InternalAcceptWhatsAppCallRequest, opts ...psrpc.RequestOption) (*livekit10.AcceptWhatsAppCallResponse, error)

	// Close immediately, without waiting for pending RPCs
	Close()
}

// ======================================
// ConnectorInternal ServerImpl Interface
// ======================================

type ConnectorInternalServerImpl interface {
	DialWhatsAppCall(context.Context, *InternalDialWhatsAppCallRequest) (*livekit10.DialWhatsAppCallResponse, error)

	AcceptWhatsAppCall(context.Context, *InternalAcceptWhatsAppCallRequest) (*livekit10.AcceptWhatsAppCallResponse, error)
}

// ==================================
// ConnectorInternal Server Interface
// ==================================

type ConnectorInternalServer interface {
	RegisterDialWhatsAppCallTopic(topic string) error
	DeregisterDialWhatsAppCallTopic(topic string)
	RegisterAcceptWhatsAppCallTopic(topic string) error
	DeregisterAcceptWhatsAppCallTopic(topic string)

	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// ========================
// ConnectorInternal Client
// ========================

type connectorInternalClient struct {
	client *client.RPCClient
}

// NewConnectorInternalClient creates a psrpc client that implements the ConnectorInternalClient interface.
func NewConnectorInternalClient(bus psrpc.MessageBus, opts ...psrpc.ClientOption) (ConnectorInternalClient, error) {
	sd := &info.ServiceDefinition{
		Name: "ConnectorInternal",
		ID:   rand.NewClientID(),
	}

	sd.RegisterMethod("DialWhatsAppCall", false, false, true, true)
	sd.RegisterMethod("AcceptWhatsAppCall", false, false, true, true)

	rpcClient, err := client.NewRPCClient(sd, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &connectorInternalClient{
		client: rpcClient,
	}, nil
}

func (c *connectorInternalClient) DialWhatsAppCall(ctx context.Context, topic string, req *InternalDialWhatsAppCallRequest, opts ...psrpc.RequestOption) (*livekit10.DialWhatsAppCallResponse, error) {
	return client.RequestSingle[*livekit10.DialWhatsAppCallResponse](ctx, c.client, "DialWhatsAppCall", []string{topic}, req, opts...)
}

func (c *connectorInternalClient) AcceptWhatsAppCall(ctx context.Context, topic string, req *InternalAcceptWhatsAppCallRequest, opts ...psrpc.RequestOption) (*livekit10.AcceptWhatsAppCallResponse, error) {
	return client.RequestSingle[*livekit10.AcceptWhatsAppCallResponse](ctx, c.client, "AcceptWhatsAppCall", []string{topic}, req, opts...)
}

func (s *connectorInternalClient) Close() {
	s.client.Close()
}

// ========================
// ConnectorInternal Server
// ========================

type connectorInternalServer struct {
	svc ConnectorInternalServerImpl
	rpc *server.RPCServer
}

// NewConnectorInternalServer builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewConnectorInternalServer(svc ConnectorInternalServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (ConnectorInternalServer, error) {
	sd := &info.ServiceDefinition{
		Name: "ConnectorInternal",
		ID:   rand.NewServerID(),
	}

	s := server.NewRPCServer(sd, bus, opts...)

	sd.RegisterMethod("DialWhatsAppCall", false, false, true, true)
	sd.RegisterMethod("AcceptWhatsAppCall", false, false, true, true)
	return &connectorInternalServer{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *connectorInternalServer) RegisterDialWhatsAppCallTopic(topic string) error {
	return server.RegisterHandler(s.rpc, "DialWhatsAppCall", []string{topic}, s.svc.DialWhatsAppCall, nil)
}

func (s *connectorInternalServer) DeregisterDialWhatsAppCallTopic(topic string) {
	s.rpc.DeregisterHandler("DialWhatsAppCall", []string{topic})
}

func (s *connectorInternalServer) RegisterAcceptWhatsAppCallTopic(topic string) error {
	return server.RegisterHandler(s.rpc, "AcceptWhatsAppCall", []string{topic}, s.svc.AcceptWhatsAppCall, nil)
}

func (s *connectorInternalServer) DeregisterAcceptWhatsAppCallTopic(topic string) {
	s.rpc.DeregisterHandler("AcceptWhatsAppCall", []string{topic})
}

func (s *connectorInternalServer) Shutdown() {
	s.rpc.Close(false)
}

func (s *connectorInternalServer) Kill() {
	s.rpc.Close(true)
}

// ======================================
// ConnectorInternal Unimplemented Server
// ======================================

type UnimplementedConnectorInternalServer struct{}

func (UnimplementedConnectorInternalServer) DialWhatsAppCall(context.Context, *InternalDialWhatsAppCallRequest) (*livekit10.DialWhatsAppCallResponse, error) {
	return nil, psrpc.ErrUnimplemented
}

func (UnimplementedConnectorInternalServer) AcceptWhatsAppCall(context.Context, *InternalAcceptWhatsAppCallRequest) (*livekit10.AcceptWhatsAppCallResponse, error) {
	return nil, psrpc.ErrUnimplemented
}

// =================================
// ConnectorHandler Client Interface
// =================================

type ConnectorHandlerClient interface {
	ConnectWhatsAppCall(ctx context.Context, whatsappCallId string, req *livekit10.ConnectWhatsAppCallRequest, opts ...psrpc.RequestOption) (*livekit10.ConnectWhatsAppCallResponse, error)

	DisconnectWhatsAppCall(ctx context.Context, whatsappCallId string, req *livekit10.DisconnectWhatsAppCallRequest, opts ...psrpc.RequestOption) (*livekit10.DisconnectWhatsAppCallResponse, error)

	// Close immediately, without waiting for pending RPCs
	Close()
}

// =====================================
// ConnectorHandler ServerImpl Interface
// =====================================

type ConnectorHandlerServerImpl interface {
	ConnectWhatsAppCall(context.Context, *livekit10.ConnectWhatsAppCallRequest) (*livekit10.ConnectWhatsAppCallResponse, error)

	DisconnectWhatsAppCall(context.Context, *livekit10.DisconnectWhatsAppCallRequest) (*livekit10.DisconnectWhatsAppCallResponse, error)
}

// =================================
// ConnectorHandler Server Interface
// =================================

type ConnectorHandlerServer interface {
	RegisterConnectWhatsAppCallTopic(whatsappCallId string) error
	DeregisterConnectWhatsAppCallTopic(whatsappCallId string)
	RegisterDisconnectWhatsAppCallTopic(whatsappCallId string) error
	DeregisterDisconnectWhatsAppCallTopic(whatsappCallId string)

	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// =======================
// ConnectorHandler Client
// =======================

type connectorHandlerClient struct {
	client *client.RPCClient
}

// NewConnectorHandlerClient creates a psrpc client that implements the ConnectorHandlerClient interface.
func NewConnectorHandlerClient(bus psrpc.MessageBus, opts ...psrpc.ClientOption) (ConnectorHandlerClient, error) {
	sd := &info.ServiceDefinition{
		Name: "ConnectorHandler",
		ID:   rand.NewClientID(),
	}

	sd.RegisterMethod("ConnectWhatsAppCall", false, false, true, true)
	sd.RegisterMethod("DisconnectWhatsAppCall", false, false, true, true)

	rpcClient, err := client.NewRPCClient(sd, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &connectorHandlerClient{
		client: rpcClient,
	}, nil
}

func (c *connectorHandlerClient) ConnectWhatsAppCall(ctx context.Context, whatsappCallId string, req *livekit10.ConnectWhatsAppCallRequest, opts ...psrpc.RequestOption) (*livekit10.ConnectWhatsAppCallResponse, error) {
	return client.RequestSingle[*livekit10.ConnectWhatsAppCallResponse](ctx, c.client, "ConnectWhatsAppCall", []string{whatsappCallId}, req, opts...)
}

func (c *connectorHandlerClient) DisconnectWhatsAppCall(ctx context.Context, whatsappCallId string, req *livekit10.DisconnectWhatsAppCallRequest, opts ...psrpc.RequestOption) (*livekit10.DisconnectWhatsAppCallResponse, error) {
	return client.RequestSingle[*livekit10.DisconnectWhatsAppCallResponse](ctx, c.client, "DisconnectWhatsAppCall", []string{whatsappCallId}, req, opts...)
}

func (s *connectorHandlerClient) Close() {
	s.client.Close()
}

// =======================
// ConnectorHandler Server
// =======================

type connectorHandlerServer struct {
	svc ConnectorHandlerServerImpl
	rpc *server.RPCServer
}

// NewConnectorHandlerServer builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewConnectorHandlerServer(svc ConnectorHandlerServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (ConnectorHandlerServer, error) {
	sd := &info.ServiceDefinition{
		Name: "ConnectorHandler",
		ID:   rand.NewServerID(),
	}

	s := server.NewRPCServer(sd, bus, opts...)

	sd.RegisterMethod("ConnectWhatsAppCall", false, false, true, true)
	sd.RegisterMethod("DisconnectWhatsAppCall", false, false, true, true)
	return &connectorHandlerServer{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *connectorHandlerServer) RegisterConnectWhatsAppCallTopic(whatsappCallId string) error {
	return server.RegisterHandler(s.rpc, "ConnectWhatsAppCall", []string{whatsappCallId}, s.svc.ConnectWhatsAppCall, nil)
}

func (s *connectorHandlerServer) DeregisterConnectWhatsAppCallTopic(whatsappCallId string) {
	s.rpc.DeregisterHandler("ConnectWhatsAppCall", []string{whatsappCallId})
}

func (s *connectorHandlerServer) RegisterDisconnectWhatsAppCallTopic(whatsappCallId string) error {
	return server.RegisterHandler(s.rpc, "DisconnectWhatsAppCall", []string{whatsappCallId}, s.svc.DisconnectWhatsAppCall, nil)
}

func (s *connectorHandlerServer) DeregisterDisconnectWhatsAppCallTopic(whatsappCallId string) {
	s.rpc.DeregisterHandler("DisconnectWhatsAppCall", []string{whatsappCallId})
}

func (s *connectorHandlerServer) Shutdown() {
	s.rpc.Close(false)
}

func (s *connectorHandlerServer) Kill() {
	s.rpc.Close(true)
}

// =====================================
// ConnectorHandler Unimplemented Server
// =====================================

type UnimplementedConnectorHandlerServer struct{}

func (UnimplementedConnectorHandlerServer) ConnectWhatsAppCall(context.Context, *livekit10.ConnectWhatsAppCallRequest) (*livekit10.ConnectWhatsAppCallResponse, error) {
	return nil, psrpc.ErrUnimplemented
}

func (UnimplementedConnectorHandlerServer) DisconnectWhatsAppCall(context.Context, *livekit10.DisconnectWhatsAppCallRequest) (*livekit10.DisconnectWhatsAppCallResponse, error) {
	return nil, psrpc.ErrUnimplemented
}

var psrpcFileDescriptor12 = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x3f, 0x6f, 0xda, 0x40,
	0x18, 0xc6, 0x75, 0x54, 0xa2, 0xd2, 0xf5, 0x8f, 0xdc, 0x43, 0x42, 0xd4, 0x0b, 0xe0, 0x22, 0xda,
	0xc9, 0x96, 0xe8, 0x56, 0x55, 0xaa, 0x28, 0x0c, 0xa5, 0xa3, 0x97, 0x48, 0x59, 0x2c, 0x73, 0x1c,
	0xe1, 0x92, 0xf3, 0xbd, 0x97, 0xf3, 0x91, 0x2c, 0x59, 0x33, 0xf0, 0x0d, 0x32, 0x65, 0xc8, 0x47,
	0xe0, 0x2b, 0xe5, 0x8b, 0x44, 0xc1, 0x3e, 0x82, 0x89, 0x0d, 0x4b, 0x36, 0xdf, 0xeb, 0xe7, 0x7d,
	0x9e, 0xdf, 0x3d, 0xb2, 0x71, 0x43, 0x2b, 0x1a, 0x50, 0x90, 0x92, 0x51, 0x03, 0xda, 0x57, 0x1a,
	0x0c, 0x90, 0x77, 0x5a, 0x51, 0xf7, 0x13, 0x28, 0xc3, 0x41, 0xa6, 0xd9, 0xcc, 0xed, 0x08, 0x7e,
	0xc5, 0x2e, 0xb8, 0x89, 0xb6, 0xe2, 0xe8, 0x7a, 0x11, 0x9b, 0x34, 0x56, 0x2a, 0x57, 0x38, 0x99,
	0x55, 0x92, 0x80, 0xcc, 0x26, 0xde, 0x3d, 0xc2, 0xed, 0x89, 0x34, 0x4c, 0xcb, 0x58, 0x8c, 0x79,
	0x2c, 0x4e, 0x9e, 0x17, 0x86, 0x4a, 0x8d, 0x62, 0x21, 0x42, 0x76, 0xb9, 0x64, 0xa9, 0x21, 0xbf,
	0xf0, 0x7b, 0x9d, 0x3d, 0xb6, 0x50, 0x07, 0xfd, 0xf8, 0x30, 0xe8, 0xf8, 0x79, 0x92, 0x5f, 0xb1,
	0x12, 0xda, 0x05, 0xf2, 0x07, 0x7f, 0xd6, 0x00, 0x49, 0x74, 0x0e, 0x5c, 0x46, 0x5c, 0xce, 0xa1,
	0x55, 0xdb, 0x58, 0x7c, 0xf5, 0xb5, 0xa2, 0xbe, 0x4d, 0x0e, 0x01, 0x92, 0xff, 0xc0, 0xe5, 0x44,
	0xce, 0x21, 0xfc, 0xa8, 0x77, 0x4e, 0xde, 0x03, 0xc2, 0x5d, 0x2b, 0x1b, 0x52, 0xca, 0x94, 0x29,
	0x43, 0xfc, 0xbd, 0x8f, 0xe8, 0x6d, 0x11, 0x2b, 0x97, 0xde, 0x0e, 0x72, 0xf0, 0x88, 0xf0, 0x97,
	0x91, 0x2d, 0xdd, 0xea, 0x09, 0xc5, 0xce, 0x7e, 0x3f, 0xa4, 0x57, 0xb0, 0xac, 0xa8, 0xcf, 0xed,
	0x1e, 0x28, 0x38, 0x55, 0x20, 0x53, 0xe6, 0xd5, 0xd7, 0x2b, 0x54, 0x73, 0x10, 0xe1, 0x98, 0xbc,
	0xbe, 0x21, 0xe9, 0x17, 0x62, 0x2a, 0x2b, 0x70, 0xbf, 0x1d, 0xac, 0xa9, 0x18, 0x35, 0xb8, 0xab,
	0x61, 0x67, 0x7b, 0xcb, 0x7f, 0xb1, 0x9c, 0x09, 0xa6, 0xc9, 0x0d, 0x6e, 0xe4, 0xb3, 0x02, 0xc0,
	0x8b, 0x71, 0xc9, 0x5b, 0x9b, 0xde, 0x3b, 0x2c, 0xca, 0xe3, 0xdd, 0xf5, 0x0a, 0x35, 0x1d, 0xe4,
	0x12, 0xe2, 0xd8, 0xcf, 0x39, 0xa2, 0xb1, 0x10, 0x11, 0x9f, 0x91, 0x5b, 0x84, 0x9b, 0x63, 0x9e,
	0xd2, 0x12, 0x82, 0xfe, 0x4e, 0x87, 0x65, 0x02, 0x0b, 0xf1, 0xfd, 0xa8, 0xee, 0x38, 0xc7, 0xdf,
	0xee, 0x69, 0xfb, 0x8c, 0x9b, 0xc5, 0x72, 0xea, 0x53, 0x48, 0x82, 0xdc, 0x30, 0xd8, 0xfc, 0x62,
	0x14, 0x44, 0xa0, 0x15, 0x9d, 0xd6, 0x37, 0xa7, 0x9f, 0x4f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5c,
	0xdc, 0xdc, 0x82, 0xcf, 0x03, 0x00, 0x00,
}
