// Code generated by protoc-gen-psrpc v0.5.1, DO NOT EDIT.
// source: rpc/agent.proto

package rpc

import (
	"context"

	"github.com/livekit/psrpc"
	"github.com/livekit/psrpc/pkg/client"
	"github.com/livekit/psrpc/pkg/info"
	"github.com/livekit/psrpc/pkg/rand"
	"github.com/livekit/psrpc/pkg/server"
	"github.com/livekit/psrpc/version"
)
import google_protobuf "google.golang.org/protobuf/types/known/emptypb"
import livekit1 "github.com/livekit/protocol/livekit"

var _ = version.PsrpcVersion_0_5

// ==============================
// AgentInternal Client Interface
// ==============================

type AgentInternalClient interface {
	CheckEnabled(ctx context.Context, req *CheckEnabledRequest, opts ...psrpc.RequestOption) (<-chan *psrpc.Response[*CheckEnabledResponse], error)

	JobRequest(ctx context.Context, topic string, req *livekit1.Job, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error)
}

// ==================================
// AgentInternal ServerImpl Interface
// ==================================

type AgentInternalServerImpl interface {
	CheckEnabled(context.Context, *CheckEnabledRequest) (*CheckEnabledResponse, error)

	JobRequest(context.Context, *livekit1.Job) (*google_protobuf.Empty, error)
	JobRequestAffinity(context.Context, *livekit1.Job) float32
}

// ==============================
// AgentInternal Server Interface
// ==============================

type AgentInternalServer interface {
	RegisterJobRequestTopic(topic string) error
	DeregisterJobRequestTopic(topic string)

	// Close and wait for pending RPCs to complete
	Shutdown()

	// Close immediately, without waiting for pending RPCs
	Kill()
}

// ====================
// AgentInternal Client
// ====================

type agentInternalClient struct {
	client *client.RPCClient
}

// NewAgentInternalClient creates a psrpc client that implements the AgentInternalClient interface.
func NewAgentInternalClient(bus psrpc.MessageBus, opts ...psrpc.ClientOption) (AgentInternalClient, error) {
	sd := &info.ServiceDefinition{
		Name: "AgentInternal",
		ID:   rand.NewClientID(),
	}

	sd.RegisterMethod("CheckEnabled", false, true, false, false)
	sd.RegisterMethod("JobRequest", true, false, true, false)

	rpcClient, err := client.NewRPCClient(sd, bus, opts...)
	if err != nil {
		return nil, err
	}

	return &agentInternalClient{
		client: rpcClient,
	}, nil
}

func (c *agentInternalClient) CheckEnabled(ctx context.Context, req *CheckEnabledRequest, opts ...psrpc.RequestOption) (<-chan *psrpc.Response[*CheckEnabledResponse], error) {
	return client.RequestMulti[*CheckEnabledResponse](ctx, c.client, "CheckEnabled", nil, req, opts...)
}

func (c *agentInternalClient) JobRequest(ctx context.Context, topic string, req *livekit1.Job, opts ...psrpc.RequestOption) (*google_protobuf.Empty, error) {
	return client.RequestSingle[*google_protobuf.Empty](ctx, c.client, "JobRequest", []string{topic}, req, opts...)
}

// ====================
// AgentInternal Server
// ====================

type agentInternalServer struct {
	svc AgentInternalServerImpl
	rpc *server.RPCServer
}

// NewAgentInternalServer builds a RPCServer that will route requests
// to the corresponding method in the provided svc implementation.
func NewAgentInternalServer(svc AgentInternalServerImpl, bus psrpc.MessageBus, opts ...psrpc.ServerOption) (AgentInternalServer, error) {
	sd := &info.ServiceDefinition{
		Name: "AgentInternal",
		ID:   rand.NewServerID(),
	}

	s := server.NewRPCServer(sd, bus, opts...)

	sd.RegisterMethod("CheckEnabled", false, true, false, false)
	var err error
	err = server.RegisterHandler(s, "CheckEnabled", nil, svc.CheckEnabled, nil)
	if err != nil {
		s.Close(false)
		return nil, err
	}

	sd.RegisterMethod("JobRequest", true, false, true, false)
	return &agentInternalServer{
		svc: svc,
		rpc: s,
	}, nil
}

func (s *agentInternalServer) RegisterJobRequestTopic(topic string) error {
	return server.RegisterHandler(s.rpc, "JobRequest", []string{topic}, s.svc.JobRequest, s.svc.JobRequestAffinity)
}

func (s *agentInternalServer) DeregisterJobRequestTopic(topic string) {
	s.rpc.DeregisterHandler("JobRequest", []string{topic})
}

func (s *agentInternalServer) Shutdown() {
	s.rpc.Close(false)
}

func (s *agentInternalServer) Kill() {
	s.rpc.Close(true)
}

var psrpcFileDescriptor0 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4e, 0x02, 0x31,
	0x10, 0x86, 0x53, 0x34, 0x84, 0x54, 0x88, 0x58, 0xd4, 0xe0, 0x7a, 0xd1, 0x3d, 0x11, 0x35, 0xad,
	0xd1, 0xbb, 0x41, 0x0d, 0x07, 0x49, 0xbc, 0x70, 0xf4, 0x42, 0x68, 0x1d, 0x96, 0x86, 0xa5, 0x53,
	0xdb, 0x2e, 0x89, 0x8f, 0xc0, 0x4b, 0xf8, 0x10, 0x3c, 0xa1, 0x81, 0xad, 0x1b, 0x4c, 0x38, 0x35,
	0xfd, 0xe7, 0x9b, 0x7f, 0xfe, 0xfc, 0xf4, 0xd8, 0x59, 0x25, 0x26, 0x19, 0x98, 0xc0, 0xad, 0xc3,
	0x80, 0xec, 0xc0, 0x59, 0x95, 0x5c, 0x66, 0x88, 0x59, 0x0e, 0x62, 0x2b, 0xc9, 0x62, 0x2a, 0x60,
	0x61, 0xc3, 0x77, 0x49, 0x24, 0x2d, 0xb4, 0x41, 0xa3, 0xf1, 0xf1, 0xdb, 0xc9, 0xf5, 0x12, 0xe6,
	0x3a, 0x8c, 0x77, 0x5c, 0xd2, 0x33, 0xda, 0x79, 0x9d, 0x81, 0x9a, 0x0f, 0xcc, 0x44, 0xe6, 0xf0,
	0x39, 0x82, 0xaf, 0x02, 0x7c, 0x48, 0xa7, 0xf4, 0xf4, 0xbf, 0xec, 0x2d, 0x1a, 0x0f, 0xec, 0x9a,
	0x36, 0x1d, 0xe2, 0x62, 0x0c, 0xa5, 0xde, 0x25, 0x57, 0xa4, 0xd7, 0x18, 0x1d, 0x6d, 0xb4, 0x88,
	0xb2, 0x5b, 0x7a, 0x62, 0x0b, 0x99, 0x6b, 0x3f, 0x03, 0x57, 0x71, 0xb5, 0x2d, 0xd7, 0xae, 0x06,
	0x11, 0x7e, 0xf8, 0x21, 0xb4, 0xf5, 0xbc, 0x89, 0xf3, 0x66, 0x02, 0x38, 0x33, 0xc9, 0xd9, 0x3b,
	0x6d, 0xee, 0x5e, 0x66, 0x5d, 0xee, 0xac, 0xe2, 0x7b, 0x32, 0x26, 0x17, 0x7b, 0x26, 0x65, 0xcc,
	0xb4, 0xb1, 0x5e, 0x91, 0xc3, 0x7e, 0xad, 0x47, 0xd8, 0x13, 0xa5, 0x43, 0x94, 0x71, 0x85, 0x35,
	0x79, 0xec, 0x80, 0x0f, 0x51, 0x26, 0xe7, 0xbc, 0x6c, 0x8f, 0xff, 0xb5, 0xc7, 0x07, 0x9b, 0xf6,
	0x52, 0xba, 0x5e, 0x91, 0x7a, 0x9b, 0xf4, 0xc9, 0x3d, 0x79, 0xb9, 0xfb, 0xb8, 0xc9, 0x74, 0x98,
	0x15, 0x92, 0x2b, 0x5c, 0x88, 0xb8, 0x5d, 0xbd, 0x76, 0x9e, 0x09, 0x0f, 0x6e, 0xa9, 0x15, 0x08,
	0x67, 0x95, 0xac, 0x6f, 0x9d, 0x1e, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xda, 0x33, 0x98, 0x4b,
	0xad, 0x01, 0x00, 0x00,
}
