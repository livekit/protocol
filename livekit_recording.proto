syntax = "proto3";

package livekit;
option go_package = "github.com/livekit/protocol/livekit";
option csharp_namespace = "LiveKit.Proto";
option ruby_package = "LiveKit::Proto";

import "google/protobuf/empty.proto";

// Recording service that can be performed on any node
// they are Twirp-based HTTP req/responses
service RecordingService {
    // Starts a room
    rpc StartRecording(StartRecordingRequest) returns (StartRecordingResponse);

    // Adds an rtmp output to a live recording
    rpc AddOutput(AddOutputRequest) returns (google.protobuf.Empty);

    // Removes an rtmp output from a live recording
    rpc RemoveOutput(RemoveOutputRequest) returns (google.protobuf.Empty);

    // Ends a recording
    rpc EndRecording(EndRecordingRequest) returns (google.protobuf.Empty);
}

message StartRecordingRequest {
  oneof input {
    string url = 1;
    RecordingTemplate template = 2;
  }
  oneof output {
    RtmpOutput rtmp = 3;
    string filepath = 4;
  }
  RecordingOptions options = 5;
}

message RecordingTemplate {
  string layout = 1;
  string room_name = 2;
  string base_url = 3; // defaults to https://recorder.livekit.io
}

message RtmpOutput {
  repeated string urls = 1;
}

enum RecordingPreset {
  // All presets use 44100 Hz, 128k bitrate for audio and a color depth of 24
  NONE = 0;
  HD_30 = 1; // 720p, 30fps, 3000 kpbs
  HD_60 = 2; // 720p, 60fps, 4500 kbps
  FULL_HD_30 = 3; // 1080p, 30fps, 4500 kbps
  FULL_HD_60 = 4; // 1080p, 60fps, 6000 kbps
}

message RecordingOptions {
  RecordingPreset preset = 1;
  int32 width = 2; // default 1920
  int32 height = 3; // default 1080
  int32 depth = 4; // default 24
  int32 framerate = 5; // default 30
  int32 audio_bitrate = 6; // default 128
  int32 audio_frequency = 7; // default 44100
  int32 video_bitrate = 8; // default 4500
  string profile = 9; // baseline, main, or high. default main
}

message StartRecordingResponse {
  string recording_id = 1;
}

message AddOutputRequest {
  string recording_id = 1;
  string rtmp_url = 2;
}

message RemoveOutputRequest {
  string recording_id = 1;
  string rtmp_url = 2;
}

message EndRecordingRequest {
  string recording_id = 1;
}

message RecordingInfo {
  string id = 1;
  string room_name = 2;
  bool active = 3;
  string error = 4;
  FileResult file = 5;
  repeated RtmpResult rtmp = 6;
}

message FileResult {
  string download_url = 1;
  int64 duration = 2;
}

message RtmpResult {
  string stream_url = 1;
  int64 duration = 2;
}
