// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.4
// source: livekit_agent_dispatch.proto

package livekit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentDispatchService_CreateDispatch_FullMethodName = "/livekit.AgentDispatchService/CreateDispatch"
	AgentDispatchService_DeleteDispatch_FullMethodName = "/livekit.AgentDispatchService/DeleteDispatch"
	AgentDispatchService_ListDispatch_FullMethodName   = "/livekit.AgentDispatchService/ListDispatch"
)

// AgentDispatchServiceClient is the client API for AgentDispatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentDispatchServiceClient interface {
	CreateDispatch(ctx context.Context, in *CreateAgentDispatchRequest, opts ...grpc.CallOption) (*AgentDispatch, error)
	DeleteDispatch(ctx context.Context, in *DeleteAgentDispatchRequest, opts ...grpc.CallOption) (*AgentDispatch, error)
	ListDispatch(ctx context.Context, in *ListAgentDispatchRequesst, opts ...grpc.CallOption) (*ListAgentDispatchResponse, error)
}

type agentDispatchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentDispatchServiceClient(cc grpc.ClientConnInterface) AgentDispatchServiceClient {
	return &agentDispatchServiceClient{cc}
}

func (c *agentDispatchServiceClient) CreateDispatch(ctx context.Context, in *CreateAgentDispatchRequest, opts ...grpc.CallOption) (*AgentDispatch, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentDispatch)
	err := c.cc.Invoke(ctx, AgentDispatchService_CreateDispatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentDispatchServiceClient) DeleteDispatch(ctx context.Context, in *DeleteAgentDispatchRequest, opts ...grpc.CallOption) (*AgentDispatch, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentDispatch)
	err := c.cc.Invoke(ctx, AgentDispatchService_DeleteDispatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentDispatchServiceClient) ListDispatch(ctx context.Context, in *ListAgentDispatchRequesst, opts ...grpc.CallOption) (*ListAgentDispatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentDispatchResponse)
	err := c.cc.Invoke(ctx, AgentDispatchService_ListDispatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentDispatchServiceServer is the server API for AgentDispatchService service.
// All implementations must embed UnimplementedAgentDispatchServiceServer
// for forward compatibility.
type AgentDispatchServiceServer interface {
	CreateDispatch(context.Context, *CreateAgentDispatchRequest) (*AgentDispatch, error)
	DeleteDispatch(context.Context, *DeleteAgentDispatchRequest) (*AgentDispatch, error)
	ListDispatch(context.Context, *ListAgentDispatchRequesst) (*ListAgentDispatchResponse, error)
	mustEmbedUnimplementedAgentDispatchServiceServer()
}

// UnimplementedAgentDispatchServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentDispatchServiceServer struct{}

func (UnimplementedAgentDispatchServiceServer) CreateDispatch(context.Context, *CreateAgentDispatchRequest) (*AgentDispatch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDispatch not implemented")
}
func (UnimplementedAgentDispatchServiceServer) DeleteDispatch(context.Context, *DeleteAgentDispatchRequest) (*AgentDispatch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDispatch not implemented")
}
func (UnimplementedAgentDispatchServiceServer) ListDispatch(context.Context, *ListAgentDispatchRequesst) (*ListAgentDispatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDispatch not implemented")
}
func (UnimplementedAgentDispatchServiceServer) mustEmbedUnimplementedAgentDispatchServiceServer() {}
func (UnimplementedAgentDispatchServiceServer) testEmbeddedByValue()                              {}

// UnsafeAgentDispatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentDispatchServiceServer will
// result in compilation errors.
type UnsafeAgentDispatchServiceServer interface {
	mustEmbedUnimplementedAgentDispatchServiceServer()
}

func RegisterAgentDispatchServiceServer(s grpc.ServiceRegistrar, srv AgentDispatchServiceServer) {
	// If the following call pancis, it indicates UnimplementedAgentDispatchServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentDispatchService_ServiceDesc, srv)
}

func _AgentDispatchService_CreateDispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentDispatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentDispatchServiceServer).CreateDispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentDispatchService_CreateDispatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentDispatchServiceServer).CreateDispatch(ctx, req.(*CreateAgentDispatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentDispatchService_DeleteDispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgentDispatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentDispatchServiceServer).DeleteDispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentDispatchService_DeleteDispatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentDispatchServiceServer).DeleteDispatch(ctx, req.(*DeleteAgentDispatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentDispatchService_ListDispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentDispatchRequesst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentDispatchServiceServer).ListDispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentDispatchService_ListDispatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentDispatchServiceServer).ListDispatch(ctx, req.(*ListAgentDispatchRequesst))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentDispatchService_ServiceDesc is the grpc.ServiceDesc for AgentDispatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentDispatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "livekit.AgentDispatchService",
	HandlerType: (*AgentDispatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDispatch",
			Handler:    _AgentDispatchService_CreateDispatch_Handler,
		},
		{
			MethodName: "DeleteDispatch",
			Handler:    _AgentDispatchService_DeleteDispatch_Handler,
		},
		{
			MethodName: "ListDispatch",
			Handler:    _AgentDispatchService_ListDispatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "livekit_agent_dispatch.proto",
}
