// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.23.4
// source: livekit_rtc_v2.proto

package livekit

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Signalv2ClientMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// monotonically increasing number (by 1) starting at some non-zero number (should not rollover)
	MessageId uint32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// last remote message processed
	LastProcessedRemoteMessageId uint32 `protobuf:"varint,2,opt,name=last_processed_remote_message_id,json=lastProcessedRemoteMessageId,proto3" json:"last_processed_remote_message_id,omitempty"`
	// Types that are valid to be assigned to Message:
	//
	//	*Signalv2ClientMessage_ConnectRequest
	//	*Signalv2ClientMessage_ReconnectRequest
	//	*Signalv2ClientMessage_AudioTrack
	//	*Signalv2ClientMessage_VideoTrack
	//	*Signalv2ClientMessage_PublisherSdp
	//	*Signalv2ClientMessage_SubscriberSdp
	//	*Signalv2ClientMessage_IceCandidate
	//	*Signalv2ClientMessage_MuteTrackRequest
	//	*Signalv2ClientMessage_UpdateSubscription
	//	*Signalv2ClientMessage_UpdateTrackSettings
	//	*Signalv2ClientMessage_LeaveRequest
	//	*Signalv2ClientMessage_UpdateSubscriptionPermission
	//	*Signalv2ClientMessage_SimulateScenario
	//	*Signalv2ClientMessage_UpdateParticipantMetadata
	//	*Signalv2ClientMessage_Ping
	//	*Signalv2ClientMessage_UpdateLocalAudioTrack
	//	*Signalv2ClientMessage_UpdateLocalVideoTrack
	//	*Signalv2ClientMessage_Acknowledgement
	Message       isSignalv2ClientMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Signalv2ClientMessage) Reset() {
	*x = Signalv2ClientMessage{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signalv2ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signalv2ClientMessage) ProtoMessage() {}

func (x *Signalv2ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signalv2ClientMessage.ProtoReflect.Descriptor instead.
func (*Signalv2ClientMessage) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{0}
}

func (x *Signalv2ClientMessage) GetMessageId() uint32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *Signalv2ClientMessage) GetLastProcessedRemoteMessageId() uint32 {
	if x != nil {
		return x.LastProcessedRemoteMessageId
	}
	return 0
}

func (x *Signalv2ClientMessage) GetMessage() isSignalv2ClientMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Signalv2ClientMessage) GetConnectRequest() *ConnectRequest {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_ConnectRequest); ok {
			return x.ConnectRequest
		}
	}
	return nil
}

func (x *Signalv2ClientMessage) GetReconnectRequest() *ReconnectRequest {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_ReconnectRequest); ok {
			return x.ReconnectRequest
		}
	}
	return nil
}

func (x *Signalv2ClientMessage) GetAudioTrack() *AudioTrack {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_AudioTrack); ok {
			return x.AudioTrack
		}
	}
	return nil
}

func (x *Signalv2ClientMessage) GetVideoTrack() *VideoTrack {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_VideoTrack); ok {
			return x.VideoTrack
		}
	}
	return nil
}

func (x *Signalv2ClientMessage) GetPublisherSdp() *SessionDescription {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_PublisherSdp); ok {
			return x.PublisherSdp
		}
	}
	return nil
}

func (x *Signalv2ClientMessage) GetSubscriberSdp() *SessionDescription {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_SubscriberSdp); ok {
			return x.SubscriberSdp
		}
	}
	return nil
}

func (x *Signalv2ClientMessage) GetIceCandidate() *TrickleRequest {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_IceCandidate); ok {
			return x.IceCandidate
		}
	}
	return nil
}

func (x *Signalv2ClientMessage) GetMuteTrackRequest() *MuteTrackRequest {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_MuteTrackRequest); ok {
			return x.MuteTrackRequest
		}
	}
	return nil
}

func (x *Signalv2ClientMessage) GetUpdateSubscription() *UpdateSubscription {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_UpdateSubscription); ok {
			return x.UpdateSubscription
		}
	}
	return nil
}

func (x *Signalv2ClientMessage) GetUpdateTrackSettings() *UpdateTrackSettings {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_UpdateTrackSettings); ok {
			return x.UpdateTrackSettings
		}
	}
	return nil
}

func (x *Signalv2ClientMessage) GetLeaveRequest() *LeaveRequest {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_LeaveRequest); ok {
			return x.LeaveRequest
		}
	}
	return nil
}

func (x *Signalv2ClientMessage) GetUpdateSubscriptionPermission() *SubscriptionPermission {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_UpdateSubscriptionPermission); ok {
			return x.UpdateSubscriptionPermission
		}
	}
	return nil
}

func (x *Signalv2ClientMessage) GetSimulateScenario() *SimulateScenario {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_SimulateScenario); ok {
			return x.SimulateScenario
		}
	}
	return nil
}

func (x *Signalv2ClientMessage) GetUpdateParticipantMetadata() *UpdateParticipantMetadata {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_UpdateParticipantMetadata); ok {
			return x.UpdateParticipantMetadata
		}
	}
	return nil
}

func (x *Signalv2ClientMessage) GetPing() *Ping {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_Ping); ok {
			return x.Ping
		}
	}
	return nil
}

func (x *Signalv2ClientMessage) GetUpdateLocalAudioTrack() *UpdateLocalAudioTrack {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_UpdateLocalAudioTrack); ok {
			return x.UpdateLocalAudioTrack
		}
	}
	return nil
}

func (x *Signalv2ClientMessage) GetUpdateLocalVideoTrack() *UpdateLocalVideoTrack {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_UpdateLocalVideoTrack); ok {
			return x.UpdateLocalVideoTrack
		}
	}
	return nil
}

func (x *Signalv2ClientMessage) GetAcknowledgement() bool {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_Acknowledgement); ok {
			return x.Acknowledgement
		}
	}
	return false
}

type isSignalv2ClientMessage_Message interface {
	isSignalv2ClientMessage_Message()
}

type Signalv2ClientMessage_ConnectRequest struct {
	ConnectRequest *ConnectRequest `protobuf:"bytes,3,opt,name=connect_request,json=connectRequest,proto3,oneof"`
}

type Signalv2ClientMessage_ReconnectRequest struct {
	ReconnectRequest *ReconnectRequest `protobuf:"bytes,4,opt,name=reconnect_request,json=reconnectRequest,proto3,oneof"`
}

type Signalv2ClientMessage_AudioTrack struct {
	AudioTrack *AudioTrack `protobuf:"bytes,5,opt,name=audio_track,json=audioTrack,proto3,oneof"`
}

type Signalv2ClientMessage_VideoTrack struct {
	VideoTrack *VideoTrack `protobuf:"bytes,6,opt,name=video_track,json=videoTrack,proto3,oneof"`
}

type Signalv2ClientMessage_PublisherSdp struct {
	PublisherSdp *SessionDescription `protobuf:"bytes,7,opt,name=publisher_sdp,json=publisherSdp,proto3,oneof"`
}

type Signalv2ClientMessage_SubscriberSdp struct {
	SubscriberSdp *SessionDescription `protobuf:"bytes,8,opt,name=subscriber_sdp,json=subscriberSdp,proto3,oneof"`
}

type Signalv2ClientMessage_IceCandidate struct {
	IceCandidate *TrickleRequest `protobuf:"bytes,9,opt,name=ice_candidate,json=iceCandidate,proto3,oneof"`
}

type Signalv2ClientMessage_MuteTrackRequest struct {
	MuteTrackRequest *MuteTrackRequest `protobuf:"bytes,10,opt,name=mute_track_request,json=muteTrackRequest,proto3,oneof"`
}

type Signalv2ClientMessage_UpdateSubscription struct {
	UpdateSubscription *UpdateSubscription `protobuf:"bytes,11,opt,name=update_subscription,json=updateSubscription,proto3,oneof"`
}

type Signalv2ClientMessage_UpdateTrackSettings struct {
	UpdateTrackSettings *UpdateTrackSettings `protobuf:"bytes,12,opt,name=update_track_settings,json=updateTrackSettings,proto3,oneof"`
}

type Signalv2ClientMessage_LeaveRequest struct {
	LeaveRequest *LeaveRequest `protobuf:"bytes,13,opt,name=leave_request,json=leaveRequest,proto3,oneof"`
}

type Signalv2ClientMessage_UpdateSubscriptionPermission struct {
	UpdateSubscriptionPermission *SubscriptionPermission `protobuf:"bytes,14,opt,name=update_subscription_permission,json=updateSubscriptionPermission,proto3,oneof"`
}

type Signalv2ClientMessage_SimulateScenario struct {
	SimulateScenario *SimulateScenario `protobuf:"bytes,15,opt,name=simulate_scenario,json=simulateScenario,proto3,oneof"`
}

type Signalv2ClientMessage_UpdateParticipantMetadata struct {
	UpdateParticipantMetadata *UpdateParticipantMetadata `protobuf:"bytes,16,opt,name=update_participant_metadata,json=updateParticipantMetadata,proto3,oneof"`
}

type Signalv2ClientMessage_Ping struct {
	Ping *Ping `protobuf:"bytes,17,opt,name=ping,proto3,oneof"`
}

type Signalv2ClientMessage_UpdateLocalAudioTrack struct {
	UpdateLocalAudioTrack *UpdateLocalAudioTrack `protobuf:"bytes,18,opt,name=update_local_audio_track,json=updateLocalAudioTrack,proto3,oneof"`
}

type Signalv2ClientMessage_UpdateLocalVideoTrack struct {
	UpdateLocalVideoTrack *UpdateLocalVideoTrack `protobuf:"bytes,19,opt,name=update_local_video_track,json=updateLocalVideoTrack,proto3,oneof"`
}

type Signalv2ClientMessage_Acknowledgement struct {
	Acknowledgement bool `protobuf:"varint,20,opt,name=acknowledgement,proto3,oneof"`
}

func (*Signalv2ClientMessage_ConnectRequest) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_ReconnectRequest) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_AudioTrack) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_VideoTrack) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_PublisherSdp) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_SubscriberSdp) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_IceCandidate) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_MuteTrackRequest) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_UpdateSubscription) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_UpdateTrackSettings) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_LeaveRequest) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_UpdateSubscriptionPermission) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_SimulateScenario) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_UpdateParticipantMetadata) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_Ping) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_UpdateLocalAudioTrack) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_UpdateLocalVideoTrack) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_Acknowledgement) isSignalv2ClientMessage_Message() {}

type Signalv2ClientEnvelope struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// collection of client -> server messages
	ClientMessages []*Signalv2ClientMessage `protobuf:"bytes,1,rep,name=client_messages,json=clientMessages,proto3" json:"client_messages,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Signalv2ClientEnvelope) Reset() {
	*x = Signalv2ClientEnvelope{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signalv2ClientEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signalv2ClientEnvelope) ProtoMessage() {}

func (x *Signalv2ClientEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signalv2ClientEnvelope.ProtoReflect.Descriptor instead.
func (*Signalv2ClientEnvelope) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{1}
}

func (x *Signalv2ClientEnvelope) GetClientMessages() []*Signalv2ClientMessage {
	if x != nil {
		return x.ClientMessages
	}
	return nil
}

type Signalv2ServerMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// monotonically increasing number (by 1) starting at some non-zero number (should not rollover)
	MessageId uint32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// last remote message processed
	LastProcessedRemoteMessageId uint32           `protobuf:"varint,2,opt,name=last_processed_remote_message_id,json=lastProcessedRemoteMessageId,proto3" json:"last_processed_remote_message_id,omitempty"`
	Errors                       []*ErrorResponse `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	// Types that are valid to be assigned to Message:
	//
	//	*Signalv2ServerMessage_ConnectResponse
	//	*Signalv2ServerMessage_ReconnectResponse
	//	*Signalv2ServerMessage_RoomUpdate
	//	*Signalv2ServerMessage_ParticipantUpdate
	//	*Signalv2ServerMessage_PublisherSdp
	//	*Signalv2ServerMessage_SubscriberSdp
	//	*Signalv2ServerMessage_LeaveRequest
	//	*Signalv2ServerMessage_MuteTrackRequest
	//	*Signalv2ServerMessage_SpeakersChanged
	//	*Signalv2ServerMessage_ConnectionQualityUpdate
	//	*Signalv2ServerMessage_StreamStateUpdate
	//	*Signalv2ServerMessage_SubscribedQualityUpdate
	//	*Signalv2ServerMessage_RefreshToken
	//	*Signalv2ServerMessage_TrackUnpublished
	//	*Signalv2ServerMessage_Pong
	//	*Signalv2ServerMessage_SubscriptionResponse
	//	*Signalv2ServerMessage_RequestResponse
	//	*Signalv2ServerMessage_TrackSubscribed
	//	*Signalv2ServerMessage_RoomMovedResponse
	//	*Signalv2ServerMessage_Acknowledgement
	Message       isSignalv2ServerMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Signalv2ServerMessage) Reset() {
	*x = Signalv2ServerMessage{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signalv2ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signalv2ServerMessage) ProtoMessage() {}

func (x *Signalv2ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signalv2ServerMessage.ProtoReflect.Descriptor instead.
func (*Signalv2ServerMessage) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{2}
}

func (x *Signalv2ServerMessage) GetMessageId() uint32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *Signalv2ServerMessage) GetLastProcessedRemoteMessageId() uint32 {
	if x != nil {
		return x.LastProcessedRemoteMessageId
	}
	return 0
}

func (x *Signalv2ServerMessage) GetErrors() []*ErrorResponse {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *Signalv2ServerMessage) GetMessage() isSignalv2ServerMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Signalv2ServerMessage) GetConnectResponse() *ConnectResponse {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_ConnectResponse); ok {
			return x.ConnectResponse
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetReconnectResponse() *ReconnectResponse {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_ReconnectResponse); ok {
			return x.ReconnectResponse
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetRoomUpdate() *Room {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_RoomUpdate); ok {
			return x.RoomUpdate
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetParticipantUpdate() *ParticipantUpdate {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_ParticipantUpdate); ok {
			return x.ParticipantUpdate
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetPublisherSdp() *SessionDescription {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_PublisherSdp); ok {
			return x.PublisherSdp
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetSubscriberSdp() *SessionDescription {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_SubscriberSdp); ok {
			return x.SubscriberSdp
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetLeaveRequest() *LeaveRequest {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_LeaveRequest); ok {
			return x.LeaveRequest
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetMuteTrackRequest() *MuteTrackRequest {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_MuteTrackRequest); ok {
			return x.MuteTrackRequest
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetSpeakersChanged() *SpeakersChanged {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_SpeakersChanged); ok {
			return x.SpeakersChanged
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetConnectionQualityUpdate() *ConnectionQualityUpdate {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_ConnectionQualityUpdate); ok {
			return x.ConnectionQualityUpdate
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetStreamStateUpdate() *StreamStateUpdate {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_StreamStateUpdate); ok {
			return x.StreamStateUpdate
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetSubscribedQualityUpdate() *SubscribedQualityUpdate {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_SubscribedQualityUpdate); ok {
			return x.SubscribedQualityUpdate
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetRefreshToken() string {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_RefreshToken); ok {
			return x.RefreshToken
		}
	}
	return ""
}

func (x *Signalv2ServerMessage) GetTrackUnpublished() *TrackUnpublishedResponse {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_TrackUnpublished); ok {
			return x.TrackUnpublished
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetPong() *Pong {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_Pong); ok {
			return x.Pong
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetSubscriptionResponse() *SubscriptionResponse {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_SubscriptionResponse); ok {
			return x.SubscriptionResponse
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetRequestResponse() *RequestResponse {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_RequestResponse); ok {
			return x.RequestResponse
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetTrackSubscribed() *TrackSubscribed {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_TrackSubscribed); ok {
			return x.TrackSubscribed
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetRoomMovedResponse() *RoomMovedResponse {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_RoomMovedResponse); ok {
			return x.RoomMovedResponse
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetAcknowledgement() bool {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_Acknowledgement); ok {
			return x.Acknowledgement
		}
	}
	return false
}

type isSignalv2ServerMessage_Message interface {
	isSignalv2ServerMessage_Message()
}

type Signalv2ServerMessage_ConnectResponse struct {
	ConnectResponse *ConnectResponse `protobuf:"bytes,4,opt,name=connect_response,json=connectResponse,proto3,oneof"`
}

type Signalv2ServerMessage_ReconnectResponse struct {
	ReconnectResponse *ReconnectResponse `protobuf:"bytes,5,opt,name=reconnect_response,json=reconnectResponse,proto3,oneof"`
}

type Signalv2ServerMessage_RoomUpdate struct {
	RoomUpdate *Room `protobuf:"bytes,6,opt,name=room_update,json=roomUpdate,proto3,oneof"`
}

type Signalv2ServerMessage_ParticipantUpdate struct {
	ParticipantUpdate *ParticipantUpdate `protobuf:"bytes,7,opt,name=participant_update,json=participantUpdate,proto3,oneof"`
}

type Signalv2ServerMessage_PublisherSdp struct {
	PublisherSdp *SessionDescription `protobuf:"bytes,8,opt,name=publisher_sdp,json=publisherSdp,proto3,oneof"`
}

type Signalv2ServerMessage_SubscriberSdp struct {
	SubscriberSdp *SessionDescription `protobuf:"bytes,9,opt,name=subscriber_sdp,json=subscriberSdp,proto3,oneof"`
}

type Signalv2ServerMessage_LeaveRequest struct {
	LeaveRequest *LeaveRequest `protobuf:"bytes,10,opt,name=leave_request,json=leaveRequest,proto3,oneof"`
}

type Signalv2ServerMessage_MuteTrackRequest struct {
	MuteTrackRequest *MuteTrackRequest `protobuf:"bytes,11,opt,name=mute_track_request,json=muteTrackRequest,proto3,oneof"`
}

type Signalv2ServerMessage_SpeakersChanged struct {
	SpeakersChanged *SpeakersChanged `protobuf:"bytes,12,opt,name=speakers_changed,json=speakersChanged,proto3,oneof"`
}

type Signalv2ServerMessage_ConnectionQualityUpdate struct {
	ConnectionQualityUpdate *ConnectionQualityUpdate `protobuf:"bytes,13,opt,name=connection_quality_update,json=connectionQualityUpdate,proto3,oneof"`
}

type Signalv2ServerMessage_StreamStateUpdate struct {
	StreamStateUpdate *StreamStateUpdate `protobuf:"bytes,14,opt,name=stream_state_update,json=streamStateUpdate,proto3,oneof"`
}

type Signalv2ServerMessage_SubscribedQualityUpdate struct {
	SubscribedQualityUpdate *SubscribedQualityUpdate `protobuf:"bytes,15,opt,name=subscribed_quality_update,json=subscribedQualityUpdate,proto3,oneof"`
}

type Signalv2ServerMessage_RefreshToken struct {
	RefreshToken string `protobuf:"bytes,16,opt,name=refresh_token,json=refreshToken,proto3,oneof"`
}

type Signalv2ServerMessage_TrackUnpublished struct {
	TrackUnpublished *TrackUnpublishedResponse `protobuf:"bytes,17,opt,name=track_unpublished,json=trackUnpublished,proto3,oneof"`
}

type Signalv2ServerMessage_Pong struct {
	Pong *Pong `protobuf:"bytes,18,opt,name=pong,proto3,oneof"`
}

type Signalv2ServerMessage_SubscriptionResponse struct {
	SubscriptionResponse *SubscriptionResponse `protobuf:"bytes,19,opt,name=subscription_response,json=subscriptionResponse,proto3,oneof"`
}

type Signalv2ServerMessage_RequestResponse struct {
	RequestResponse *RequestResponse `protobuf:"bytes,20,opt,name=request_response,json=requestResponse,proto3,oneof"`
}

type Signalv2ServerMessage_TrackSubscribed struct {
	TrackSubscribed *TrackSubscribed `protobuf:"bytes,21,opt,name=track_subscribed,json=trackSubscribed,proto3,oneof"`
}

type Signalv2ServerMessage_RoomMovedResponse struct {
	RoomMovedResponse *RoomMovedResponse `protobuf:"bytes,22,opt,name=room_moved_response,json=roomMovedResponse,proto3,oneof"`
}

type Signalv2ServerMessage_Acknowledgement struct {
	Acknowledgement bool `protobuf:"varint,23,opt,name=acknowledgement,proto3,oneof"`
}

func (*Signalv2ServerMessage_ConnectResponse) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_ReconnectResponse) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_RoomUpdate) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_ParticipantUpdate) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_PublisherSdp) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_SubscriberSdp) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_LeaveRequest) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_MuteTrackRequest) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_SpeakersChanged) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_ConnectionQualityUpdate) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_StreamStateUpdate) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_SubscribedQualityUpdate) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_RefreshToken) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_TrackUnpublished) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_Pong) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_SubscriptionResponse) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_RequestResponse) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_TrackSubscribed) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_RoomMovedResponse) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_Acknowledgement) isSignalv2ServerMessage_Message() {}

type Signalv2ServerEnvelope struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// collection of server -> client messages
	ServerMessages []*Signalv2ServerMessage `protobuf:"bytes,1,rep,name=server_messages,json=serverMessages,proto3" json:"server_messages,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Signalv2ServerEnvelope) Reset() {
	*x = Signalv2ServerEnvelope{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signalv2ServerEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signalv2ServerEnvelope) ProtoMessage() {}

func (x *Signalv2ServerEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signalv2ServerEnvelope.ProtoReflect.Descriptor instead.
func (*Signalv2ServerEnvelope) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{3}
}

func (x *Signalv2ServerEnvelope) GetServerMessages() []*Signalv2ServerMessage {
	if x != nil {
		return x.ServerMessages
	}
	return nil
}

type ConnectionSettings struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	AutoSubscribe        bool                   `protobuf:"varint,1,opt,name=auto_subscribe,json=autoSubscribe,proto3" json:"auto_subscribe,omitempty"`
	AdaptiveStream       bool                   `protobuf:"varint,2,opt,name=adaptive_stream,json=adaptiveStream,proto3" json:"adaptive_stream,omitempty"`
	SubscriberAllowPause *bool                  `protobuf:"varint,3,opt,name=subscriber_allow_pause,json=subscriberAllowPause,proto3,oneof" json:"subscriber_allow_pause,omitempty"`
	DisableIceLite       bool                   `protobuf:"varint,4,opt,name=disable_ice_lite,json=disableIceLite,proto3" json:"disable_ice_lite,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ConnectionSettings) Reset() {
	*x = ConnectionSettings{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionSettings) ProtoMessage() {}

func (x *ConnectionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionSettings.ProtoReflect.Descriptor instead.
func (*ConnectionSettings) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{4}
}

func (x *ConnectionSettings) GetAutoSubscribe() bool {
	if x != nil {
		return x.AutoSubscribe
	}
	return false
}

func (x *ConnectionSettings) GetAdaptiveStream() bool {
	if x != nil {
		return x.AdaptiveStream
	}
	return false
}

func (x *ConnectionSettings) GetSubscriberAllowPause() bool {
	if x != nil && x.SubscriberAllowPause != nil {
		return *x.SubscriberAllowPause
	}
	return false
}

func (x *ConnectionSettings) GetDisableIceLite() bool {
	if x != nil {
		return x.DisableIceLite
	}
	return false
}

type TrackSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cid           string                 `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Source        TrackSource            `protobuf:"varint,3,opt,name=source,proto3,enum=livekit.TrackSource" json:"source,omitempty"`
	Muted         bool                   `protobuf:"varint,4,opt,name=muted,proto3" json:"muted,omitempty"`
	Encryption    Encryption_Type        `protobuf:"varint,5,opt,name=encryption,proto3,enum=livekit.Encryption_Type" json:"encryption,omitempty"`
	Stream        string                 `protobuf:"bytes,6,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackSettings) Reset() {
	*x = TrackSettings{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackSettings) ProtoMessage() {}

func (x *TrackSettings) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackSettings.ProtoReflect.Descriptor instead.
func (*TrackSettings) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{5}
}

func (x *TrackSettings) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *TrackSettings) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrackSettings) GetSource() TrackSource {
	if x != nil {
		return x.Source
	}
	return TrackSource_UNKNOWN
}

func (x *TrackSettings) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

func (x *TrackSettings) GetEncryption() Encryption_Type {
	if x != nil {
		return x.Encryption
	}
	return Encryption_NONE
}

func (x *TrackSettings) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

type AudioTrack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrackSettings *TrackSettings         `protobuf:"bytes,1,opt,name=track_settings,json=trackSettings,proto3" json:"track_settings,omitempty"`
	AudioFeatures []AudioTrackFeature    `protobuf:"varint,5,rep,packed,name=audio_features,json=audioFeatures,proto3,enum=livekit.AudioTrackFeature" json:"audio_features,omitempty"`
	DisableRed    bool                   `protobuf:"varint,6,opt,name=disable_red,json=disableRed,proto3" json:"disable_red,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioTrack) Reset() {
	*x = AudioTrack{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioTrack) ProtoMessage() {}

func (x *AudioTrack) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioTrack.ProtoReflect.Descriptor instead.
func (*AudioTrack) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{6}
}

func (x *AudioTrack) GetTrackSettings() *TrackSettings {
	if x != nil {
		return x.TrackSettings
	}
	return nil
}

func (x *AudioTrack) GetAudioFeatures() []AudioTrackFeature {
	if x != nil {
		return x.AudioFeatures
	}
	return nil
}

func (x *AudioTrack) GetDisableRed() bool {
	if x != nil {
		return x.DisableRed
	}
	return false
}

type VideoTrack struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TrackSettings     *TrackSettings         `protobuf:"bytes,1,opt,name=track_settings,json=trackSettings,proto3" json:"track_settings,omitempty"`
	LayerMode         VideoLayer_Mode        `protobuf:"varint,2,opt,name=layer_mode,json=layerMode,proto3,enum=livekit.VideoLayer_Mode" json:"layer_mode,omitempty"`
	SimulcastCodecs   []*SimulcastCodec      `protobuf:"bytes,3,rep,name=simulcast_codecs,json=simulcastCodecs,proto3" json:"simulcast_codecs,omitempty"`
	BackupCodecPolicy BackupCodecPolicy      `protobuf:"varint,4,opt,name=backup_codec_policy,json=backupCodecPolicy,proto3,enum=livekit.BackupCodecPolicy" json:"backup_codec_policy,omitempty"`
	Sid               string                 `protobuf:"bytes,5,opt,name=sid,proto3" json:"sid,omitempty"` // used when publishing a new codec to an existing track
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *VideoTrack) Reset() {
	*x = VideoTrack{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTrack) ProtoMessage() {}

func (x *VideoTrack) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTrack.ProtoReflect.Descriptor instead.
func (*VideoTrack) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{7}
}

func (x *VideoTrack) GetTrackSettings() *TrackSettings {
	if x != nil {
		return x.TrackSettings
	}
	return nil
}

func (x *VideoTrack) GetLayerMode() VideoLayer_Mode {
	if x != nil {
		return x.LayerMode
	}
	return VideoLayer_UNUSED
}

func (x *VideoTrack) GetSimulcastCodecs() []*SimulcastCodec {
	if x != nil {
		return x.SimulcastCodecs
	}
	return nil
}

func (x *VideoTrack) GetBackupCodecPolicy() BackupCodecPolicy {
	if x != nil {
		return x.BackupCodecPolicy
	}
	return BackupCodecPolicy_PREFER_REGRESSION
}

func (x *VideoTrack) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

type ConnectRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ClientInfo            *ClientInfo            `protobuf:"bytes,1,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
	ConnectionSettings    *ConnectionSettings    `protobuf:"bytes,2,opt,name=connection_settings,json=connectionSettings,proto3" json:"connection_settings,omitempty"`
	ParticipantAttributes map[string]string      `protobuf:"bytes,3,rep,name=participant_attributes,json=participantAttributes,proto3" json:"participant_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AudioTracks           []*AudioTrack          `protobuf:"bytes,4,rep,name=audio_tracks,json=audioTracks,proto3" json:"audio_tracks,omitempty"`
	VideoTracks           []*VideoTrack          `protobuf:"bytes,5,rep,name=video_tracks,json=videoTracks,proto3" json:"video_tracks,omitempty"`
	PublisherSdp          *SessionDescription    `protobuf:"bytes,6,opt,name=publisher_sdp,json=publisherSdp,proto3" json:"publisher_sdp,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{8}
}

func (x *ConnectRequest) GetClientInfo() *ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *ConnectRequest) GetConnectionSettings() *ConnectionSettings {
	if x != nil {
		return x.ConnectionSettings
	}
	return nil
}

func (x *ConnectRequest) GetParticipantAttributes() map[string]string {
	if x != nil {
		return x.ParticipantAttributes
	}
	return nil
}

func (x *ConnectRequest) GetAudioTracks() []*AudioTrack {
	if x != nil {
		return x.AudioTracks
	}
	return nil
}

func (x *ConnectRequest) GetVideoTracks() []*VideoTrack {
	if x != nil {
		return x.VideoTracks
	}
	return nil
}

func (x *ConnectRequest) GetPublisherSdp() *SessionDescription {
	if x != nil {
		return x.PublisherSdp
	}
	return nil
}

type ReconnectRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ParticipantSid  string                 `protobuf:"bytes,1,opt,name=participant_sid,json=participantSid,proto3" json:"participant_sid,omitempty"`
	ReconnectReason ReconnectReason        `protobuf:"varint,2,opt,name=reconnect_reason,json=reconnectReason,proto3,enum=livekit.ReconnectReason" json:"reconnect_reason,omitempty"`
	SyncState       *SyncState             `protobuf:"bytes,3,opt,name=sync_state,json=syncState,proto3" json:"sync_state,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ReconnectRequest) Reset() {
	*x = ReconnectRequest{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconnectRequest) ProtoMessage() {}

func (x *ReconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconnectRequest.ProtoReflect.Descriptor instead.
func (*ReconnectRequest) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{9}
}

func (x *ReconnectRequest) GetParticipantSid() string {
	if x != nil {
		return x.ParticipantSid
	}
	return ""
}

func (x *ReconnectRequest) GetReconnectReason() ReconnectReason {
	if x != nil {
		return x.ReconnectReason
	}
	return ReconnectReason_RR_UNKNOWN
}

func (x *ReconnectRequest) GetSyncState() *SyncState {
	if x != nil {
		return x.SyncState
	}
	return nil
}

type ConnectResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Room                *Room                  `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	Participant         *ParticipantInfo       `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
	OtherParticipants   []*ParticipantInfo     `protobuf:"bytes,3,rep,name=other_participants,json=otherParticipants,proto3" json:"other_participants,omitempty"`
	IceServers          []*ICEServer           `protobuf:"bytes,4,rep,name=ice_servers,json=iceServers,proto3" json:"ice_servers,omitempty"`
	ClientConfiguration *ClientConfiguration   `protobuf:"bytes,5,opt,name=client_configuration,json=clientConfiguration,proto3" json:"client_configuration,omitempty"`
	ServerInfo          *ServerInfo            `protobuf:"bytes,6,opt,name=server_info,json=serverInfo,proto3" json:"server_info,omitempty"`
	// Server-Injected-Frame byte trailer, used to identify unencrypted frames when e2ee is enabled
	SifTrailer           []byte              `protobuf:"bytes,7,opt,name=sif_trailer,json=sifTrailer,proto3" json:"sif_trailer,omitempty"`
	EnabledPublishCodecs []*Codec            `protobuf:"bytes,8,rep,name=enabled_publish_codecs,json=enabledPublishCodecs,proto3" json:"enabled_publish_codecs,omitempty"`
	FastPublish          bool                `protobuf:"varint,9,opt,name=fast_publish,json=fastPublish,proto3" json:"fast_publish,omitempty"`
	PublisherSdp         *SessionDescription `protobuf:"bytes,10,opt,name=publisher_sdp,json=publisherSdp,proto3" json:"publisher_sdp,omitempty"`
	SubscriberSdp        *SessionDescription `protobuf:"bytes,11,opt,name=subscriber_sdp,json=subscriberSdp,proto3" json:"subscriber_sdp,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ConnectResponse) Reset() {
	*x = ConnectResponse{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse) ProtoMessage() {}

func (x *ConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{10}
}

func (x *ConnectResponse) GetRoom() *Room {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *ConnectResponse) GetParticipant() *ParticipantInfo {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *ConnectResponse) GetOtherParticipants() []*ParticipantInfo {
	if x != nil {
		return x.OtherParticipants
	}
	return nil
}

func (x *ConnectResponse) GetIceServers() []*ICEServer {
	if x != nil {
		return x.IceServers
	}
	return nil
}

func (x *ConnectResponse) GetClientConfiguration() *ClientConfiguration {
	if x != nil {
		return x.ClientConfiguration
	}
	return nil
}

func (x *ConnectResponse) GetServerInfo() *ServerInfo {
	if x != nil {
		return x.ServerInfo
	}
	return nil
}

func (x *ConnectResponse) GetSifTrailer() []byte {
	if x != nil {
		return x.SifTrailer
	}
	return nil
}

func (x *ConnectResponse) GetEnabledPublishCodecs() []*Codec {
	if x != nil {
		return x.EnabledPublishCodecs
	}
	return nil
}

func (x *ConnectResponse) GetFastPublish() bool {
	if x != nil {
		return x.FastPublish
	}
	return false
}

func (x *ConnectResponse) GetPublisherSdp() *SessionDescription {
	if x != nil {
		return x.PublisherSdp
	}
	return nil
}

func (x *ConnectResponse) GetSubscriberSdp() *SessionDescription {
	if x != nil {
		return x.SubscriberSdp
	}
	return nil
}

type ErrorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     uint32                 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{11}
}

func (x *ErrorResponse) GetMessageId() uint32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ErrorResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_livekit_rtc_v2_proto protoreflect.FileDescriptor

const file_livekit_rtc_v2_proto_rawDesc = "" +
	"\n" +
	"\x14livekit_rtc_v2.proto\x12\alivekit\x1a\x11livekit_rtc.proto\x1a\x14livekit_models.proto\"\x9e\v\n" +
	"\x15Signalv2ClientMessage\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\rR\tmessageId\x12F\n" +
	" last_processed_remote_message_id\x18\x02 \x01(\rR\x1clastProcessedRemoteMessageId\x12B\n" +
	"\x0fconnect_request\x18\x03 \x01(\v2\x17.livekit.ConnectRequestH\x00R\x0econnectRequest\x12H\n" +
	"\x11reconnect_request\x18\x04 \x01(\v2\x19.livekit.ReconnectRequestH\x00R\x10reconnectRequest\x126\n" +
	"\vaudio_track\x18\x05 \x01(\v2\x13.livekit.AudioTrackH\x00R\n" +
	"audioTrack\x126\n" +
	"\vvideo_track\x18\x06 \x01(\v2\x13.livekit.VideoTrackH\x00R\n" +
	"videoTrack\x12B\n" +
	"\rpublisher_sdp\x18\a \x01(\v2\x1b.livekit.SessionDescriptionH\x00R\fpublisherSdp\x12D\n" +
	"\x0esubscriber_sdp\x18\b \x01(\v2\x1b.livekit.SessionDescriptionH\x00R\rsubscriberSdp\x12>\n" +
	"\rice_candidate\x18\t \x01(\v2\x17.livekit.TrickleRequestH\x00R\ficeCandidate\x12I\n" +
	"\x12mute_track_request\x18\n" +
	" \x01(\v2\x19.livekit.MuteTrackRequestH\x00R\x10muteTrackRequest\x12N\n" +
	"\x13update_subscription\x18\v \x01(\v2\x1b.livekit.UpdateSubscriptionH\x00R\x12updateSubscription\x12R\n" +
	"\x15update_track_settings\x18\f \x01(\v2\x1c.livekit.UpdateTrackSettingsH\x00R\x13updateTrackSettings\x12<\n" +
	"\rleave_request\x18\r \x01(\v2\x15.livekit.LeaveRequestH\x00R\fleaveRequest\x12g\n" +
	"\x1eupdate_subscription_permission\x18\x0e \x01(\v2\x1f.livekit.SubscriptionPermissionH\x00R\x1cupdateSubscriptionPermission\x12H\n" +
	"\x11simulate_scenario\x18\x0f \x01(\v2\x19.livekit.SimulateScenarioH\x00R\x10simulateScenario\x12d\n" +
	"\x1bupdate_participant_metadata\x18\x10 \x01(\v2\".livekit.UpdateParticipantMetadataH\x00R\x19updateParticipantMetadata\x12#\n" +
	"\x04ping\x18\x11 \x01(\v2\r.livekit.PingH\x00R\x04ping\x12Y\n" +
	"\x18update_local_audio_track\x18\x12 \x01(\v2\x1e.livekit.UpdateLocalAudioTrackH\x00R\x15updateLocalAudioTrack\x12Y\n" +
	"\x18update_local_video_track\x18\x13 \x01(\v2\x1e.livekit.UpdateLocalVideoTrackH\x00R\x15updateLocalVideoTrack\x12*\n" +
	"\x0facknowledgement\x18\x14 \x01(\bH\x00R\x0facknowledgementB\t\n" +
	"\amessage\"a\n" +
	"\x16Signalv2ClientEnvelope\x12G\n" +
	"\x0fclient_messages\x18\x01 \x03(\v2\x1e.livekit.Signalv2ClientMessageR\x0eclientMessages\"\xb0\f\n" +
	"\x15Signalv2ServerMessage\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\rR\tmessageId\x12F\n" +
	" last_processed_remote_message_id\x18\x02 \x01(\rR\x1clastProcessedRemoteMessageId\x12.\n" +
	"\x06errors\x18\x03 \x03(\v2\x16.livekit.ErrorResponseR\x06errors\x12E\n" +
	"\x10connect_response\x18\x04 \x01(\v2\x18.livekit.ConnectResponseH\x00R\x0fconnectResponse\x12K\n" +
	"\x12reconnect_response\x18\x05 \x01(\v2\x1a.livekit.ReconnectResponseH\x00R\x11reconnectResponse\x120\n" +
	"\vroom_update\x18\x06 \x01(\v2\r.livekit.RoomH\x00R\n" +
	"roomUpdate\x12K\n" +
	"\x12participant_update\x18\a \x01(\v2\x1a.livekit.ParticipantUpdateH\x00R\x11participantUpdate\x12B\n" +
	"\rpublisher_sdp\x18\b \x01(\v2\x1b.livekit.SessionDescriptionH\x00R\fpublisherSdp\x12D\n" +
	"\x0esubscriber_sdp\x18\t \x01(\v2\x1b.livekit.SessionDescriptionH\x00R\rsubscriberSdp\x12<\n" +
	"\rleave_request\x18\n" +
	" \x01(\v2\x15.livekit.LeaveRequestH\x00R\fleaveRequest\x12I\n" +
	"\x12mute_track_request\x18\v \x01(\v2\x19.livekit.MuteTrackRequestH\x00R\x10muteTrackRequest\x12E\n" +
	"\x10speakers_changed\x18\f \x01(\v2\x18.livekit.SpeakersChangedH\x00R\x0fspeakersChanged\x12^\n" +
	"\x19connection_quality_update\x18\r \x01(\v2 .livekit.ConnectionQualityUpdateH\x00R\x17connectionQualityUpdate\x12L\n" +
	"\x13stream_state_update\x18\x0e \x01(\v2\x1a.livekit.StreamStateUpdateH\x00R\x11streamStateUpdate\x12^\n" +
	"\x19subscribed_quality_update\x18\x0f \x01(\v2 .livekit.SubscribedQualityUpdateH\x00R\x17subscribedQualityUpdate\x12%\n" +
	"\rrefresh_token\x18\x10 \x01(\tH\x00R\frefreshToken\x12P\n" +
	"\x11track_unpublished\x18\x11 \x01(\v2!.livekit.TrackUnpublishedResponseH\x00R\x10trackUnpublished\x12#\n" +
	"\x04pong\x18\x12 \x01(\v2\r.livekit.PongH\x00R\x04pong\x12T\n" +
	"\x15subscription_response\x18\x13 \x01(\v2\x1d.livekit.SubscriptionResponseH\x00R\x14subscriptionResponse\x12E\n" +
	"\x10request_response\x18\x14 \x01(\v2\x18.livekit.RequestResponseH\x00R\x0frequestResponse\x12E\n" +
	"\x10track_subscribed\x18\x15 \x01(\v2\x18.livekit.TrackSubscribedH\x00R\x0ftrackSubscribed\x12L\n" +
	"\x13room_moved_response\x18\x16 \x01(\v2\x1a.livekit.RoomMovedResponseH\x00R\x11roomMovedResponse\x12*\n" +
	"\x0facknowledgement\x18\x17 \x01(\bH\x00R\x0facknowledgementB\t\n" +
	"\amessage\"a\n" +
	"\x16Signalv2ServerEnvelope\x12G\n" +
	"\x0fserver_messages\x18\x01 \x03(\v2\x1e.livekit.Signalv2ServerMessageR\x0eserverMessages\"\xe4\x01\n" +
	"\x12ConnectionSettings\x12%\n" +
	"\x0eauto_subscribe\x18\x01 \x01(\bR\rautoSubscribe\x12'\n" +
	"\x0fadaptive_stream\x18\x02 \x01(\bR\x0eadaptiveStream\x129\n" +
	"\x16subscriber_allow_pause\x18\x03 \x01(\bH\x00R\x14subscriberAllowPause\x88\x01\x01\x12(\n" +
	"\x10disable_ice_lite\x18\x04 \x01(\bR\x0edisableIceLiteB\x19\n" +
	"\x17_subscriber_allow_pause\"\xcb\x01\n" +
	"\rTrackSettings\x12\x10\n" +
	"\x03cid\x18\x01 \x01(\tR\x03cid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12,\n" +
	"\x06source\x18\x03 \x01(\x0e2\x14.livekit.TrackSourceR\x06source\x12\x14\n" +
	"\x05muted\x18\x04 \x01(\bR\x05muted\x128\n" +
	"\n" +
	"encryption\x18\x05 \x01(\x0e2\x18.livekit.Encryption.TypeR\n" +
	"encryption\x12\x16\n" +
	"\x06stream\x18\x06 \x01(\tR\x06stream\"\xaf\x01\n" +
	"\n" +
	"AudioTrack\x12=\n" +
	"\x0etrack_settings\x18\x01 \x01(\v2\x16.livekit.TrackSettingsR\rtrackSettings\x12A\n" +
	"\x0eaudio_features\x18\x05 \x03(\x0e2\x1a.livekit.AudioTrackFeatureR\raudioFeatures\x12\x1f\n" +
	"\vdisable_red\x18\x06 \x01(\bR\n" +
	"disableRed\"\xa6\x02\n" +
	"\n" +
	"VideoTrack\x12=\n" +
	"\x0etrack_settings\x18\x01 \x01(\v2\x16.livekit.TrackSettingsR\rtrackSettings\x127\n" +
	"\n" +
	"layer_mode\x18\x02 \x01(\x0e2\x18.livekit.VideoLayer.ModeR\tlayerMode\x12B\n" +
	"\x10simulcast_codecs\x18\x03 \x03(\v2\x17.livekit.SimulcastCodecR\x0fsimulcastCodecs\x12J\n" +
	"\x13backup_codec_policy\x18\x04 \x01(\x0e2\x1a.livekit.BackupCodecPolicyR\x11backupCodecPolicy\x12\x10\n" +
	"\x03sid\x18\x05 \x01(\tR\x03sid\"\xfb\x03\n" +
	"\x0eConnectRequest\x124\n" +
	"\vclient_info\x18\x01 \x01(\v2\x13.livekit.ClientInfoR\n" +
	"clientInfo\x12L\n" +
	"\x13connection_settings\x18\x02 \x01(\v2\x1b.livekit.ConnectionSettingsR\x12connectionSettings\x12i\n" +
	"\x16participant_attributes\x18\x03 \x03(\v22.livekit.ConnectRequest.ParticipantAttributesEntryR\x15participantAttributes\x126\n" +
	"\faudio_tracks\x18\x04 \x03(\v2\x13.livekit.AudioTrackR\vaudioTracks\x126\n" +
	"\fvideo_tracks\x18\x05 \x03(\v2\x13.livekit.VideoTrackR\vvideoTracks\x12@\n" +
	"\rpublisher_sdp\x18\x06 \x01(\v2\x1b.livekit.SessionDescriptionR\fpublisherSdp\x1aH\n" +
	"\x1aParticipantAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb3\x01\n" +
	"\x10ReconnectRequest\x12'\n" +
	"\x0fparticipant_sid\x18\x01 \x01(\tR\x0eparticipantSid\x12C\n" +
	"\x10reconnect_reason\x18\x02 \x01(\x0e2\x18.livekit.ReconnectReasonR\x0freconnectReason\x121\n" +
	"\n" +
	"sync_state\x18\x03 \x01(\v2\x12.livekit.SyncStateR\tsyncState\"\x85\x05\n" +
	"\x0fConnectResponse\x12!\n" +
	"\x04room\x18\x01 \x01(\v2\r.livekit.RoomR\x04room\x12:\n" +
	"\vparticipant\x18\x02 \x01(\v2\x18.livekit.ParticipantInfoR\vparticipant\x12G\n" +
	"\x12other_participants\x18\x03 \x03(\v2\x18.livekit.ParticipantInfoR\x11otherParticipants\x123\n" +
	"\vice_servers\x18\x04 \x03(\v2\x12.livekit.ICEServerR\n" +
	"iceServers\x12O\n" +
	"\x14client_configuration\x18\x05 \x01(\v2\x1c.livekit.ClientConfigurationR\x13clientConfiguration\x124\n" +
	"\vserver_info\x18\x06 \x01(\v2\x13.livekit.ServerInfoR\n" +
	"serverInfo\x12\x1f\n" +
	"\vsif_trailer\x18\a \x01(\fR\n" +
	"sifTrailer\x12D\n" +
	"\x16enabled_publish_codecs\x18\b \x03(\v2\x0e.livekit.CodecR\x14enabledPublishCodecs\x12!\n" +
	"\ffast_publish\x18\t \x01(\bR\vfastPublish\x12@\n" +
	"\rpublisher_sdp\x18\n" +
	" \x01(\v2\x1b.livekit.SessionDescriptionR\fpublisherSdp\x12B\n" +
	"\x0esubscriber_sdp\x18\v \x01(\v2\x1b.livekit.SessionDescriptionR\rsubscriberSdp\"D\n" +
	"\rErrorResponse\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\rR\tmessageId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05errorBFZ#github.com/livekit/protocol/livekit\xaa\x02\rLiveKit.Proto\xea\x02\x0eLiveKit::Protob\x06proto3"

var (
	file_livekit_rtc_v2_proto_rawDescOnce sync.Once
	file_livekit_rtc_v2_proto_rawDescData []byte
)

func file_livekit_rtc_v2_proto_rawDescGZIP() []byte {
	file_livekit_rtc_v2_proto_rawDescOnce.Do(func() {
		file_livekit_rtc_v2_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_livekit_rtc_v2_proto_rawDesc), len(file_livekit_rtc_v2_proto_rawDesc)))
	})
	return file_livekit_rtc_v2_proto_rawDescData
}

var file_livekit_rtc_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_livekit_rtc_v2_proto_goTypes = []any{
	(*Signalv2ClientMessage)(nil),     // 0: livekit.Signalv2ClientMessage
	(*Signalv2ClientEnvelope)(nil),    // 1: livekit.Signalv2ClientEnvelope
	(*Signalv2ServerMessage)(nil),     // 2: livekit.Signalv2ServerMessage
	(*Signalv2ServerEnvelope)(nil),    // 3: livekit.Signalv2ServerEnvelope
	(*ConnectionSettings)(nil),        // 4: livekit.ConnectionSettings
	(*TrackSettings)(nil),             // 5: livekit.TrackSettings
	(*AudioTrack)(nil),                // 6: livekit.AudioTrack
	(*VideoTrack)(nil),                // 7: livekit.VideoTrack
	(*ConnectRequest)(nil),            // 8: livekit.ConnectRequest
	(*ReconnectRequest)(nil),          // 9: livekit.ReconnectRequest
	(*ConnectResponse)(nil),           // 10: livekit.ConnectResponse
	(*ErrorResponse)(nil),             // 11: livekit.ErrorResponse
	nil,                               // 12: livekit.ConnectRequest.ParticipantAttributesEntry
	(*SessionDescription)(nil),        // 13: livekit.SessionDescription
	(*TrickleRequest)(nil),            // 14: livekit.TrickleRequest
	(*MuteTrackRequest)(nil),          // 15: livekit.MuteTrackRequest
	(*UpdateSubscription)(nil),        // 16: livekit.UpdateSubscription
	(*UpdateTrackSettings)(nil),       // 17: livekit.UpdateTrackSettings
	(*LeaveRequest)(nil),              // 18: livekit.LeaveRequest
	(*SubscriptionPermission)(nil),    // 19: livekit.SubscriptionPermission
	(*SimulateScenario)(nil),          // 20: livekit.SimulateScenario
	(*UpdateParticipantMetadata)(nil), // 21: livekit.UpdateParticipantMetadata
	(*Ping)(nil),                      // 22: livekit.Ping
	(*UpdateLocalAudioTrack)(nil),     // 23: livekit.UpdateLocalAudioTrack
	(*UpdateLocalVideoTrack)(nil),     // 24: livekit.UpdateLocalVideoTrack
	(*ReconnectResponse)(nil),         // 25: livekit.ReconnectResponse
	(*Room)(nil),                      // 26: livekit.Room
	(*ParticipantUpdate)(nil),         // 27: livekit.ParticipantUpdate
	(*SpeakersChanged)(nil),           // 28: livekit.SpeakersChanged
	(*ConnectionQualityUpdate)(nil),   // 29: livekit.ConnectionQualityUpdate
	(*StreamStateUpdate)(nil),         // 30: livekit.StreamStateUpdate
	(*SubscribedQualityUpdate)(nil),   // 31: livekit.SubscribedQualityUpdate
	(*TrackUnpublishedResponse)(nil),  // 32: livekit.TrackUnpublishedResponse
	(*Pong)(nil),                      // 33: livekit.Pong
	(*SubscriptionResponse)(nil),      // 34: livekit.SubscriptionResponse
	(*RequestResponse)(nil),           // 35: livekit.RequestResponse
	(*TrackSubscribed)(nil),           // 36: livekit.TrackSubscribed
	(*RoomMovedResponse)(nil),         // 37: livekit.RoomMovedResponse
	(TrackSource)(0),                  // 38: livekit.TrackSource
	(Encryption_Type)(0),              // 39: livekit.Encryption.Type
	(AudioTrackFeature)(0),            // 40: livekit.AudioTrackFeature
	(VideoLayer_Mode)(0),              // 41: livekit.VideoLayer.Mode
	(*SimulcastCodec)(nil),            // 42: livekit.SimulcastCodec
	(BackupCodecPolicy)(0),            // 43: livekit.BackupCodecPolicy
	(*ClientInfo)(nil),                // 44: livekit.ClientInfo
	(ReconnectReason)(0),              // 45: livekit.ReconnectReason
	(*SyncState)(nil),                 // 46: livekit.SyncState
	(*ParticipantInfo)(nil),           // 47: livekit.ParticipantInfo
	(*ICEServer)(nil),                 // 48: livekit.ICEServer
	(*ClientConfiguration)(nil),       // 49: livekit.ClientConfiguration
	(*ServerInfo)(nil),                // 50: livekit.ServerInfo
	(*Codec)(nil),                     // 51: livekit.Codec
}
var file_livekit_rtc_v2_proto_depIdxs = []int32{
	8,  // 0: livekit.Signalv2ClientMessage.connect_request:type_name -> livekit.ConnectRequest
	9,  // 1: livekit.Signalv2ClientMessage.reconnect_request:type_name -> livekit.ReconnectRequest
	6,  // 2: livekit.Signalv2ClientMessage.audio_track:type_name -> livekit.AudioTrack
	7,  // 3: livekit.Signalv2ClientMessage.video_track:type_name -> livekit.VideoTrack
	13, // 4: livekit.Signalv2ClientMessage.publisher_sdp:type_name -> livekit.SessionDescription
	13, // 5: livekit.Signalv2ClientMessage.subscriber_sdp:type_name -> livekit.SessionDescription
	14, // 6: livekit.Signalv2ClientMessage.ice_candidate:type_name -> livekit.TrickleRequest
	15, // 7: livekit.Signalv2ClientMessage.mute_track_request:type_name -> livekit.MuteTrackRequest
	16, // 8: livekit.Signalv2ClientMessage.update_subscription:type_name -> livekit.UpdateSubscription
	17, // 9: livekit.Signalv2ClientMessage.update_track_settings:type_name -> livekit.UpdateTrackSettings
	18, // 10: livekit.Signalv2ClientMessage.leave_request:type_name -> livekit.LeaveRequest
	19, // 11: livekit.Signalv2ClientMessage.update_subscription_permission:type_name -> livekit.SubscriptionPermission
	20, // 12: livekit.Signalv2ClientMessage.simulate_scenario:type_name -> livekit.SimulateScenario
	21, // 13: livekit.Signalv2ClientMessage.update_participant_metadata:type_name -> livekit.UpdateParticipantMetadata
	22, // 14: livekit.Signalv2ClientMessage.ping:type_name -> livekit.Ping
	23, // 15: livekit.Signalv2ClientMessage.update_local_audio_track:type_name -> livekit.UpdateLocalAudioTrack
	24, // 16: livekit.Signalv2ClientMessage.update_local_video_track:type_name -> livekit.UpdateLocalVideoTrack
	0,  // 17: livekit.Signalv2ClientEnvelope.client_messages:type_name -> livekit.Signalv2ClientMessage
	11, // 18: livekit.Signalv2ServerMessage.errors:type_name -> livekit.ErrorResponse
	10, // 19: livekit.Signalv2ServerMessage.connect_response:type_name -> livekit.ConnectResponse
	25, // 20: livekit.Signalv2ServerMessage.reconnect_response:type_name -> livekit.ReconnectResponse
	26, // 21: livekit.Signalv2ServerMessage.room_update:type_name -> livekit.Room
	27, // 22: livekit.Signalv2ServerMessage.participant_update:type_name -> livekit.ParticipantUpdate
	13, // 23: livekit.Signalv2ServerMessage.publisher_sdp:type_name -> livekit.SessionDescription
	13, // 24: livekit.Signalv2ServerMessage.subscriber_sdp:type_name -> livekit.SessionDescription
	18, // 25: livekit.Signalv2ServerMessage.leave_request:type_name -> livekit.LeaveRequest
	15, // 26: livekit.Signalv2ServerMessage.mute_track_request:type_name -> livekit.MuteTrackRequest
	28, // 27: livekit.Signalv2ServerMessage.speakers_changed:type_name -> livekit.SpeakersChanged
	29, // 28: livekit.Signalv2ServerMessage.connection_quality_update:type_name -> livekit.ConnectionQualityUpdate
	30, // 29: livekit.Signalv2ServerMessage.stream_state_update:type_name -> livekit.StreamStateUpdate
	31, // 30: livekit.Signalv2ServerMessage.subscribed_quality_update:type_name -> livekit.SubscribedQualityUpdate
	32, // 31: livekit.Signalv2ServerMessage.track_unpublished:type_name -> livekit.TrackUnpublishedResponse
	33, // 32: livekit.Signalv2ServerMessage.pong:type_name -> livekit.Pong
	34, // 33: livekit.Signalv2ServerMessage.subscription_response:type_name -> livekit.SubscriptionResponse
	35, // 34: livekit.Signalv2ServerMessage.request_response:type_name -> livekit.RequestResponse
	36, // 35: livekit.Signalv2ServerMessage.track_subscribed:type_name -> livekit.TrackSubscribed
	37, // 36: livekit.Signalv2ServerMessage.room_moved_response:type_name -> livekit.RoomMovedResponse
	2,  // 37: livekit.Signalv2ServerEnvelope.server_messages:type_name -> livekit.Signalv2ServerMessage
	38, // 38: livekit.TrackSettings.source:type_name -> livekit.TrackSource
	39, // 39: livekit.TrackSettings.encryption:type_name -> livekit.Encryption.Type
	5,  // 40: livekit.AudioTrack.track_settings:type_name -> livekit.TrackSettings
	40, // 41: livekit.AudioTrack.audio_features:type_name -> livekit.AudioTrackFeature
	5,  // 42: livekit.VideoTrack.track_settings:type_name -> livekit.TrackSettings
	41, // 43: livekit.VideoTrack.layer_mode:type_name -> livekit.VideoLayer.Mode
	42, // 44: livekit.VideoTrack.simulcast_codecs:type_name -> livekit.SimulcastCodec
	43, // 45: livekit.VideoTrack.backup_codec_policy:type_name -> livekit.BackupCodecPolicy
	44, // 46: livekit.ConnectRequest.client_info:type_name -> livekit.ClientInfo
	4,  // 47: livekit.ConnectRequest.connection_settings:type_name -> livekit.ConnectionSettings
	12, // 48: livekit.ConnectRequest.participant_attributes:type_name -> livekit.ConnectRequest.ParticipantAttributesEntry
	6,  // 49: livekit.ConnectRequest.audio_tracks:type_name -> livekit.AudioTrack
	7,  // 50: livekit.ConnectRequest.video_tracks:type_name -> livekit.VideoTrack
	13, // 51: livekit.ConnectRequest.publisher_sdp:type_name -> livekit.SessionDescription
	45, // 52: livekit.ReconnectRequest.reconnect_reason:type_name -> livekit.ReconnectReason
	46, // 53: livekit.ReconnectRequest.sync_state:type_name -> livekit.SyncState
	26, // 54: livekit.ConnectResponse.room:type_name -> livekit.Room
	47, // 55: livekit.ConnectResponse.participant:type_name -> livekit.ParticipantInfo
	47, // 56: livekit.ConnectResponse.other_participants:type_name -> livekit.ParticipantInfo
	48, // 57: livekit.ConnectResponse.ice_servers:type_name -> livekit.ICEServer
	49, // 58: livekit.ConnectResponse.client_configuration:type_name -> livekit.ClientConfiguration
	50, // 59: livekit.ConnectResponse.server_info:type_name -> livekit.ServerInfo
	51, // 60: livekit.ConnectResponse.enabled_publish_codecs:type_name -> livekit.Codec
	13, // 61: livekit.ConnectResponse.publisher_sdp:type_name -> livekit.SessionDescription
	13, // 62: livekit.ConnectResponse.subscriber_sdp:type_name -> livekit.SessionDescription
	63, // [63:63] is the sub-list for method output_type
	63, // [63:63] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_livekit_rtc_v2_proto_init() }
func file_livekit_rtc_v2_proto_init() {
	if File_livekit_rtc_v2_proto != nil {
		return
	}
	file_livekit_rtc_proto_init()
	file_livekit_models_proto_init()
	file_livekit_rtc_v2_proto_msgTypes[0].OneofWrappers = []any{
		(*Signalv2ClientMessage_ConnectRequest)(nil),
		(*Signalv2ClientMessage_ReconnectRequest)(nil),
		(*Signalv2ClientMessage_AudioTrack)(nil),
		(*Signalv2ClientMessage_VideoTrack)(nil),
		(*Signalv2ClientMessage_PublisherSdp)(nil),
		(*Signalv2ClientMessage_SubscriberSdp)(nil),
		(*Signalv2ClientMessage_IceCandidate)(nil),
		(*Signalv2ClientMessage_MuteTrackRequest)(nil),
		(*Signalv2ClientMessage_UpdateSubscription)(nil),
		(*Signalv2ClientMessage_UpdateTrackSettings)(nil),
		(*Signalv2ClientMessage_LeaveRequest)(nil),
		(*Signalv2ClientMessage_UpdateSubscriptionPermission)(nil),
		(*Signalv2ClientMessage_SimulateScenario)(nil),
		(*Signalv2ClientMessage_UpdateParticipantMetadata)(nil),
		(*Signalv2ClientMessage_Ping)(nil),
		(*Signalv2ClientMessage_UpdateLocalAudioTrack)(nil),
		(*Signalv2ClientMessage_UpdateLocalVideoTrack)(nil),
		(*Signalv2ClientMessage_Acknowledgement)(nil),
	}
	file_livekit_rtc_v2_proto_msgTypes[2].OneofWrappers = []any{
		(*Signalv2ServerMessage_ConnectResponse)(nil),
		(*Signalv2ServerMessage_ReconnectResponse)(nil),
		(*Signalv2ServerMessage_RoomUpdate)(nil),
		(*Signalv2ServerMessage_ParticipantUpdate)(nil),
		(*Signalv2ServerMessage_PublisherSdp)(nil),
		(*Signalv2ServerMessage_SubscriberSdp)(nil),
		(*Signalv2ServerMessage_LeaveRequest)(nil),
		(*Signalv2ServerMessage_MuteTrackRequest)(nil),
		(*Signalv2ServerMessage_SpeakersChanged)(nil),
		(*Signalv2ServerMessage_ConnectionQualityUpdate)(nil),
		(*Signalv2ServerMessage_StreamStateUpdate)(nil),
		(*Signalv2ServerMessage_SubscribedQualityUpdate)(nil),
		(*Signalv2ServerMessage_RefreshToken)(nil),
		(*Signalv2ServerMessage_TrackUnpublished)(nil),
		(*Signalv2ServerMessage_Pong)(nil),
		(*Signalv2ServerMessage_SubscriptionResponse)(nil),
		(*Signalv2ServerMessage_RequestResponse)(nil),
		(*Signalv2ServerMessage_TrackSubscribed)(nil),
		(*Signalv2ServerMessage_RoomMovedResponse)(nil),
		(*Signalv2ServerMessage_Acknowledgement)(nil),
	}
	file_livekit_rtc_v2_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_livekit_rtc_v2_proto_rawDesc), len(file_livekit_rtc_v2_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_livekit_rtc_v2_proto_goTypes,
		DependencyIndexes: file_livekit_rtc_v2_proto_depIdxs,
		MessageInfos:      file_livekit_rtc_v2_proto_msgTypes,
	}.Build()
	File_livekit_rtc_v2_proto = out.File
	file_livekit_rtc_v2_proto_goTypes = nil
	file_livekit_rtc_v2_proto_depIdxs = nil
}
