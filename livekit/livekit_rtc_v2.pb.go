// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.23.4
// source: livekit_rtc_v2.proto

package livekit

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Signalv2ClientMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// monotonically increasing number (by 1) starting at some non-zero number (should not rollover)
	MessageId uint32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// last remote message processed
	LastProcessedRemoteMessageId uint32 `protobuf:"varint,2,opt,name=last_processed_remote_message_id,json=lastProcessedRemoteMessageId,proto3" json:"last_processed_remote_message_id,omitempty"`
	// Types that are valid to be assigned to Message:
	//
	//	*Signalv2ClientMessage_Fragment
	//	*Signalv2ClientMessage_Envelope
	//	*Signalv2ClientMessage_ConnectRequest
	Message       isSignalv2ClientMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Signalv2ClientMessage) Reset() {
	*x = Signalv2ClientMessage{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signalv2ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signalv2ClientMessage) ProtoMessage() {}

func (x *Signalv2ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signalv2ClientMessage.ProtoReflect.Descriptor instead.
func (*Signalv2ClientMessage) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{0}
}

func (x *Signalv2ClientMessage) GetMessageId() uint32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *Signalv2ClientMessage) GetLastProcessedRemoteMessageId() uint32 {
	if x != nil {
		return x.LastProcessedRemoteMessageId
	}
	return 0
}

func (x *Signalv2ClientMessage) GetMessage() isSignalv2ClientMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Signalv2ClientMessage) GetFragment() *Fragment {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_Fragment); ok {
			return x.Fragment
		}
	}
	return nil
}

func (x *Signalv2ClientMessage) GetEnvelope() *Signalv2ClientEnvelope {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_Envelope); ok {
			return x.Envelope
		}
	}
	return nil
}

func (x *Signalv2ClientMessage) GetConnectRequest() *ConnectRequest {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ClientMessage_ConnectRequest); ok {
			return x.ConnectRequest
		}
	}
	return nil
}

type isSignalv2ClientMessage_Message interface {
	isSignalv2ClientMessage_Message()
}

type Signalv2ClientMessage_Fragment struct {
	Fragment *Fragment `protobuf:"bytes,3,opt,name=fragment,proto3,oneof"`
}

type Signalv2ClientMessage_Envelope struct {
	Envelope *Signalv2ClientEnvelope `protobuf:"bytes,4,opt,name=envelope,proto3,oneof"`
}

type Signalv2ClientMessage_ConnectRequest struct {
	ConnectRequest *ConnectRequest `protobuf:"bytes,5,opt,name=connect_request,json=connectRequest,proto3,oneof"`
}

func (*Signalv2ClientMessage_Fragment) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_Envelope) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_ConnectRequest) isSignalv2ClientMessage_Message() {}

type Signalv2ClientEnvelope struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// collection of client -> server messages
	ClientMessages []*Signalv2ClientMessage `protobuf:"bytes,1,rep,name=client_messages,json=clientMessages,proto3" json:"client_messages,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Signalv2ClientEnvelope) Reset() {
	*x = Signalv2ClientEnvelope{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signalv2ClientEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signalv2ClientEnvelope) ProtoMessage() {}

func (x *Signalv2ClientEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signalv2ClientEnvelope.ProtoReflect.Descriptor instead.
func (*Signalv2ClientEnvelope) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{1}
}

func (x *Signalv2ClientEnvelope) GetClientMessages() []*Signalv2ClientMessage {
	if x != nil {
		return x.ClientMessages
	}
	return nil
}

type Signalv2ServerMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// monotonically increasing number (by 1) starting at some non-zero number (should not rollover)
	MessageId uint32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// last remote message processed
	LastProcessedRemoteMessageId uint32           `protobuf:"varint,2,opt,name=last_processed_remote_message_id,json=lastProcessedRemoteMessageId,proto3" json:"last_processed_remote_message_id,omitempty"`
	Errors                       []*ErrorResponse `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	// Types that are valid to be assigned to Message:
	//
	//	*Signalv2ServerMessage_Fragment
	//	*Signalv2ServerMessage_Envelope
	//	*Signalv2ServerMessage_ConnectResponse
	Message       isSignalv2ServerMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Signalv2ServerMessage) Reset() {
	*x = Signalv2ServerMessage{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signalv2ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signalv2ServerMessage) ProtoMessage() {}

func (x *Signalv2ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signalv2ServerMessage.ProtoReflect.Descriptor instead.
func (*Signalv2ServerMessage) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{2}
}

func (x *Signalv2ServerMessage) GetMessageId() uint32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *Signalv2ServerMessage) GetLastProcessedRemoteMessageId() uint32 {
	if x != nil {
		return x.LastProcessedRemoteMessageId
	}
	return 0
}

func (x *Signalv2ServerMessage) GetErrors() []*ErrorResponse {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *Signalv2ServerMessage) GetMessage() isSignalv2ServerMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Signalv2ServerMessage) GetFragment() *Fragment {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_Fragment); ok {
			return x.Fragment
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetEnvelope() *Signalv2ServerEnvelope {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_Envelope); ok {
			return x.Envelope
		}
	}
	return nil
}

func (x *Signalv2ServerMessage) GetConnectResponse() *ConnectResponse {
	if x != nil {
		if x, ok := x.Message.(*Signalv2ServerMessage_ConnectResponse); ok {
			return x.ConnectResponse
		}
	}
	return nil
}

type isSignalv2ServerMessage_Message interface {
	isSignalv2ServerMessage_Message()
}

type Signalv2ServerMessage_Fragment struct {
	Fragment *Fragment `protobuf:"bytes,4,opt,name=fragment,proto3,oneof"`
}

type Signalv2ServerMessage_Envelope struct {
	Envelope *Signalv2ServerEnvelope `protobuf:"bytes,5,opt,name=envelope,proto3,oneof"`
}

type Signalv2ServerMessage_ConnectResponse struct {
	ConnectResponse *ConnectResponse `protobuf:"bytes,6,opt,name=connect_response,json=connectResponse,proto3,oneof"`
}

func (*Signalv2ServerMessage_Fragment) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_Envelope) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_ConnectResponse) isSignalv2ServerMessage_Message() {}

type Signalv2ServerEnvelope struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// collection of server -> client messages
	ServerMessages []*Signalv2ServerMessage `protobuf:"bytes,1,rep,name=server_messages,json=serverMessages,proto3" json:"server_messages,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Signalv2ServerEnvelope) Reset() {
	*x = Signalv2ServerEnvelope{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signalv2ServerEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signalv2ServerEnvelope) ProtoMessage() {}

func (x *Signalv2ServerEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signalv2ServerEnvelope.ProtoReflect.Descriptor instead.
func (*Signalv2ServerEnvelope) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{3}
}

func (x *Signalv2ServerEnvelope) GetServerMessages() []*Signalv2ServerMessage {
	if x != nil {
		return x.ServerMessages
	}
	return nil
}

type ConnectionSettings struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	AutoSubscribe        bool                   `protobuf:"varint,1,opt,name=auto_subscribe,json=autoSubscribe,proto3" json:"auto_subscribe,omitempty"`
	AdaptiveStream       bool                   `protobuf:"varint,2,opt,name=adaptive_stream,json=adaptiveStream,proto3" json:"adaptive_stream,omitempty"`
	SubscriberAllowPause *bool                  `protobuf:"varint,3,opt,name=subscriber_allow_pause,json=subscriberAllowPause,proto3,oneof" json:"subscriber_allow_pause,omitempty"`
	DisableIceLite       bool                   `protobuf:"varint,4,opt,name=disable_ice_lite,json=disableIceLite,proto3" json:"disable_ice_lite,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ConnectionSettings) Reset() {
	*x = ConnectionSettings{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionSettings) ProtoMessage() {}

func (x *ConnectionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionSettings.ProtoReflect.Descriptor instead.
func (*ConnectionSettings) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{4}
}

func (x *ConnectionSettings) GetAutoSubscribe() bool {
	if x != nil {
		return x.AutoSubscribe
	}
	return false
}

func (x *ConnectionSettings) GetAdaptiveStream() bool {
	if x != nil {
		return x.AdaptiveStream
	}
	return false
}

func (x *ConnectionSettings) GetSubscriberAllowPause() bool {
	if x != nil && x.SubscriberAllowPause != nil {
		return *x.SubscriberAllowPause
	}
	return false
}

func (x *ConnectionSettings) GetDisableIceLite() bool {
	if x != nil {
		return x.DisableIceLite
	}
	return false
}

type ConnectRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ClientInfo            *ClientInfo            `protobuf:"bytes,1,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
	ConnectionSettings    *ConnectionSettings    `protobuf:"bytes,2,opt,name=connection_settings,json=connectionSettings,proto3" json:"connection_settings,omitempty"`
	ParticipantAttributes map[string]string      `protobuf:"bytes,3,rep,name=participant_attributes,json=participantAttributes,proto3" json:"participant_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{5}
}

func (x *ConnectRequest) GetClientInfo() *ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *ConnectRequest) GetConnectionSettings() *ConnectionSettings {
	if x != nil {
		return x.ConnectionSettings
	}
	return nil
}

func (x *ConnectRequest) GetParticipantAttributes() map[string]string {
	if x != nil {
		return x.ParticipantAttributes
	}
	return nil
}

type ConnectResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Room                *Room                  `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	Participant         *ParticipantInfo       `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
	OtherParticipants   []*ParticipantInfo     `protobuf:"bytes,3,rep,name=other_participants,json=otherParticipants,proto3" json:"other_participants,omitempty"`
	IceServers          []*ICEServer           `protobuf:"bytes,4,rep,name=ice_servers,json=iceServers,proto3" json:"ice_servers,omitempty"`
	ClientConfiguration *ClientConfiguration   `protobuf:"bytes,5,opt,name=client_configuration,json=clientConfiguration,proto3" json:"client_configuration,omitempty"`
	ServerInfo          *ServerInfo            `protobuf:"bytes,6,opt,name=server_info,json=serverInfo,proto3" json:"server_info,omitempty"`
	// Server-Injected-Frame byte trailer, used to identify unencrypted frames when e2ee is enabled
	SifTrailer           []byte              `protobuf:"bytes,7,opt,name=sif_trailer,json=sifTrailer,proto3" json:"sif_trailer,omitempty"`
	EnabledPublishCodecs []*Codec            `protobuf:"bytes,8,rep,name=enabled_publish_codecs,json=enabledPublishCodecs,proto3" json:"enabled_publish_codecs,omitempty"`
	FastPublish          bool                `protobuf:"varint,9,opt,name=fast_publish,json=fastPublish,proto3" json:"fast_publish,omitempty"`
	SubscriberSdp        *SessionDescription `protobuf:"bytes,10,opt,name=subscriber_sdp,json=subscriberSdp,proto3" json:"subscriber_sdp,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ConnectResponse) Reset() {
	*x = ConnectResponse{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse) ProtoMessage() {}

func (x *ConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{6}
}

func (x *ConnectResponse) GetRoom() *Room {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *ConnectResponse) GetParticipant() *ParticipantInfo {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *ConnectResponse) GetOtherParticipants() []*ParticipantInfo {
	if x != nil {
		return x.OtherParticipants
	}
	return nil
}

func (x *ConnectResponse) GetIceServers() []*ICEServer {
	if x != nil {
		return x.IceServers
	}
	return nil
}

func (x *ConnectResponse) GetClientConfiguration() *ClientConfiguration {
	if x != nil {
		return x.ClientConfiguration
	}
	return nil
}

func (x *ConnectResponse) GetServerInfo() *ServerInfo {
	if x != nil {
		return x.ServerInfo
	}
	return nil
}

func (x *ConnectResponse) GetSifTrailer() []byte {
	if x != nil {
		return x.SifTrailer
	}
	return nil
}

func (x *ConnectResponse) GetEnabledPublishCodecs() []*Codec {
	if x != nil {
		return x.EnabledPublishCodecs
	}
	return nil
}

func (x *ConnectResponse) GetFastPublish() bool {
	if x != nil {
		return x.FastPublish
	}
	return false
}

func (x *ConnectResponse) GetSubscriberSdp() *SessionDescription {
	if x != nil {
		return x.SubscriberSdp
	}
	return nil
}

type ErrorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     uint32                 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	mi := &file_livekit_rtc_v2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{7}
}

func (x *ErrorResponse) GetMessageId() uint32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ErrorResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_livekit_rtc_v2_proto protoreflect.FileDescriptor

const file_livekit_rtc_v2_proto_rawDesc = "" +
	"\n" +
	"\x14livekit_rtc_v2.proto\x12\alivekit\x1a\x11livekit_rtc.proto\x1a\x14livekit_models.proto\"\xbd\x02\n" +
	"\x15Signalv2ClientMessage\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\rR\tmessageId\x12F\n" +
	" last_processed_remote_message_id\x18\x02 \x01(\rR\x1clastProcessedRemoteMessageId\x12/\n" +
	"\bfragment\x18\x03 \x01(\v2\x11.livekit.FragmentH\x00R\bfragment\x12=\n" +
	"\benvelope\x18\x04 \x01(\v2\x1f.livekit.Signalv2ClientEnvelopeH\x00R\benvelope\x12B\n" +
	"\x0fconnect_request\x18\x05 \x01(\v2\x17.livekit.ConnectRequestH\x00R\x0econnectRequestB\t\n" +
	"\amessage\"a\n" +
	"\x16Signalv2ClientEnvelope\x12G\n" +
	"\x0fclient_messages\x18\x01 \x03(\v2\x1e.livekit.Signalv2ClientMessageR\x0eclientMessages\"\xf0\x02\n" +
	"\x15Signalv2ServerMessage\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\rR\tmessageId\x12F\n" +
	" last_processed_remote_message_id\x18\x02 \x01(\rR\x1clastProcessedRemoteMessageId\x12.\n" +
	"\x06errors\x18\x03 \x03(\v2\x16.livekit.ErrorResponseR\x06errors\x12/\n" +
	"\bfragment\x18\x04 \x01(\v2\x11.livekit.FragmentH\x00R\bfragment\x12=\n" +
	"\benvelope\x18\x05 \x01(\v2\x1f.livekit.Signalv2ServerEnvelopeH\x00R\benvelope\x12E\n" +
	"\x10connect_response\x18\x06 \x01(\v2\x18.livekit.ConnectResponseH\x00R\x0fconnectResponseB\t\n" +
	"\amessage\"a\n" +
	"\x16Signalv2ServerEnvelope\x12G\n" +
	"\x0fserver_messages\x18\x01 \x03(\v2\x1e.livekit.Signalv2ServerMessageR\x0eserverMessages\"\xe4\x01\n" +
	"\x12ConnectionSettings\x12%\n" +
	"\x0eauto_subscribe\x18\x01 \x01(\bR\rautoSubscribe\x12'\n" +
	"\x0fadaptive_stream\x18\x02 \x01(\bR\x0eadaptiveStream\x129\n" +
	"\x16subscriber_allow_pause\x18\x03 \x01(\bH\x00R\x14subscriberAllowPause\x88\x01\x01\x12(\n" +
	"\x10disable_ice_lite\x18\x04 \x01(\bR\x0edisableIceLiteB\x19\n" +
	"\x17_subscriber_allow_pause\"\xc9\x02\n" +
	"\x0eConnectRequest\x124\n" +
	"\vclient_info\x18\x01 \x01(\v2\x13.livekit.ClientInfoR\n" +
	"clientInfo\x12L\n" +
	"\x13connection_settings\x18\x02 \x01(\v2\x1b.livekit.ConnectionSettingsR\x12connectionSettings\x12i\n" +
	"\x16participant_attributes\x18\x03 \x03(\v22.livekit.ConnectRequest.ParticipantAttributesEntryR\x15participantAttributes\x1aH\n" +
	"\x1aParticipantAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc3\x04\n" +
	"\x0fConnectResponse\x12!\n" +
	"\x04room\x18\x01 \x01(\v2\r.livekit.RoomR\x04room\x12:\n" +
	"\vparticipant\x18\x02 \x01(\v2\x18.livekit.ParticipantInfoR\vparticipant\x12G\n" +
	"\x12other_participants\x18\x03 \x03(\v2\x18.livekit.ParticipantInfoR\x11otherParticipants\x123\n" +
	"\vice_servers\x18\x04 \x03(\v2\x12.livekit.ICEServerR\n" +
	"iceServers\x12O\n" +
	"\x14client_configuration\x18\x05 \x01(\v2\x1c.livekit.ClientConfigurationR\x13clientConfiguration\x124\n" +
	"\vserver_info\x18\x06 \x01(\v2\x13.livekit.ServerInfoR\n" +
	"serverInfo\x12\x1f\n" +
	"\vsif_trailer\x18\a \x01(\fR\n" +
	"sifTrailer\x12D\n" +
	"\x16enabled_publish_codecs\x18\b \x03(\v2\x0e.livekit.CodecR\x14enabledPublishCodecs\x12!\n" +
	"\ffast_publish\x18\t \x01(\bR\vfastPublish\x12B\n" +
	"\x0esubscriber_sdp\x18\n" +
	" \x01(\v2\x1b.livekit.SessionDescriptionR\rsubscriberSdp\"D\n" +
	"\rErrorResponse\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\rR\tmessageId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05errorBFZ#github.com/livekit/protocol/livekit\xaa\x02\rLiveKit.Proto\xea\x02\x0eLiveKit::Protob\x06proto3"

var (
	file_livekit_rtc_v2_proto_rawDescOnce sync.Once
	file_livekit_rtc_v2_proto_rawDescData []byte
)

func file_livekit_rtc_v2_proto_rawDescGZIP() []byte {
	file_livekit_rtc_v2_proto_rawDescOnce.Do(func() {
		file_livekit_rtc_v2_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_livekit_rtc_v2_proto_rawDesc), len(file_livekit_rtc_v2_proto_rawDesc)))
	})
	return file_livekit_rtc_v2_proto_rawDescData
}

var file_livekit_rtc_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_livekit_rtc_v2_proto_goTypes = []any{
	(*Signalv2ClientMessage)(nil),  // 0: livekit.Signalv2ClientMessage
	(*Signalv2ClientEnvelope)(nil), // 1: livekit.Signalv2ClientEnvelope
	(*Signalv2ServerMessage)(nil),  // 2: livekit.Signalv2ServerMessage
	(*Signalv2ServerEnvelope)(nil), // 3: livekit.Signalv2ServerEnvelope
	(*ConnectionSettings)(nil),     // 4: livekit.ConnectionSettings
	(*ConnectRequest)(nil),         // 5: livekit.ConnectRequest
	(*ConnectResponse)(nil),        // 6: livekit.ConnectResponse
	(*ErrorResponse)(nil),          // 7: livekit.ErrorResponse
	nil,                            // 8: livekit.ConnectRequest.ParticipantAttributesEntry
	(*Fragment)(nil),               // 9: livekit.Fragment
	(*ClientInfo)(nil),             // 10: livekit.ClientInfo
	(*Room)(nil),                   // 11: livekit.Room
	(*ParticipantInfo)(nil),        // 12: livekit.ParticipantInfo
	(*ICEServer)(nil),              // 13: livekit.ICEServer
	(*ClientConfiguration)(nil),    // 14: livekit.ClientConfiguration
	(*ServerInfo)(nil),             // 15: livekit.ServerInfo
	(*Codec)(nil),                  // 16: livekit.Codec
	(*SessionDescription)(nil),     // 17: livekit.SessionDescription
}
var file_livekit_rtc_v2_proto_depIdxs = []int32{
	9,  // 0: livekit.Signalv2ClientMessage.fragment:type_name -> livekit.Fragment
	1,  // 1: livekit.Signalv2ClientMessage.envelope:type_name -> livekit.Signalv2ClientEnvelope
	5,  // 2: livekit.Signalv2ClientMessage.connect_request:type_name -> livekit.ConnectRequest
	0,  // 3: livekit.Signalv2ClientEnvelope.client_messages:type_name -> livekit.Signalv2ClientMessage
	7,  // 4: livekit.Signalv2ServerMessage.errors:type_name -> livekit.ErrorResponse
	9,  // 5: livekit.Signalv2ServerMessage.fragment:type_name -> livekit.Fragment
	3,  // 6: livekit.Signalv2ServerMessage.envelope:type_name -> livekit.Signalv2ServerEnvelope
	6,  // 7: livekit.Signalv2ServerMessage.connect_response:type_name -> livekit.ConnectResponse
	2,  // 8: livekit.Signalv2ServerEnvelope.server_messages:type_name -> livekit.Signalv2ServerMessage
	10, // 9: livekit.ConnectRequest.client_info:type_name -> livekit.ClientInfo
	4,  // 10: livekit.ConnectRequest.connection_settings:type_name -> livekit.ConnectionSettings
	8,  // 11: livekit.ConnectRequest.participant_attributes:type_name -> livekit.ConnectRequest.ParticipantAttributesEntry
	11, // 12: livekit.ConnectResponse.room:type_name -> livekit.Room
	12, // 13: livekit.ConnectResponse.participant:type_name -> livekit.ParticipantInfo
	12, // 14: livekit.ConnectResponse.other_participants:type_name -> livekit.ParticipantInfo
	13, // 15: livekit.ConnectResponse.ice_servers:type_name -> livekit.ICEServer
	14, // 16: livekit.ConnectResponse.client_configuration:type_name -> livekit.ClientConfiguration
	15, // 17: livekit.ConnectResponse.server_info:type_name -> livekit.ServerInfo
	16, // 18: livekit.ConnectResponse.enabled_publish_codecs:type_name -> livekit.Codec
	17, // 19: livekit.ConnectResponse.subscriber_sdp:type_name -> livekit.SessionDescription
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_livekit_rtc_v2_proto_init() }
func file_livekit_rtc_v2_proto_init() {
	if File_livekit_rtc_v2_proto != nil {
		return
	}
	file_livekit_rtc_proto_init()
	file_livekit_models_proto_init()
	file_livekit_rtc_v2_proto_msgTypes[0].OneofWrappers = []any{
		(*Signalv2ClientMessage_Fragment)(nil),
		(*Signalv2ClientMessage_Envelope)(nil),
		(*Signalv2ClientMessage_ConnectRequest)(nil),
	}
	file_livekit_rtc_v2_proto_msgTypes[2].OneofWrappers = []any{
		(*Signalv2ServerMessage_Fragment)(nil),
		(*Signalv2ServerMessage_Envelope)(nil),
		(*Signalv2ServerMessage_ConnectResponse)(nil),
	}
	file_livekit_rtc_v2_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_livekit_rtc_v2_proto_rawDesc), len(file_livekit_rtc_v2_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_livekit_rtc_v2_proto_goTypes,
		DependencyIndexes: file_livekit_rtc_v2_proto_depIdxs,
		MessageInfos:      file_livekit_rtc_v2_proto_msgTypes,
	}.Build()
	File_livekit_rtc_v2_proto = out.File
	file_livekit_rtc_v2_proto_goTypes = nil
	file_livekit_rtc_v2_proto_depIdxs = nil
}
