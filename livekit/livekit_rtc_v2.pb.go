// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: livekit_rtc_v2.proto

package livekit

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Signalv2ClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// monotonically increasing number starting at some non-zero number (should not rollover)
	MessageId uint32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// last remote message processed
	LastProcessedRemoteMessageId uint32 `protobuf:"varint,2,opt,name=last_processed_remote_message_id,json=lastProcessedRemoteMessageId,proto3" json:"last_processed_remote_message_id,omitempty"`
	// Types that are assignable to Message:
	//
	//	*Signalv2ClientMessage_ConnectRequest
	//	*Signalv2ClientMessage_ReconnectRequest
	//	*Signalv2ClientMessage_AudioTrack
	//	*Signalv2ClientMessage_VideoTrack
	//	*Signalv2ClientMessage_PublisherSdp
	//	*Signalv2ClientMessage_SubscriberSdp
	//	*Signalv2ClientMessage_IceCandidate
	//	*Signalv2ClientMessage_MuteTrackRequest
	//	*Signalv2ClientMessage_UpdateSubscription
	//	*Signalv2ClientMessage_UpdateTrackSettings
	//	*Signalv2ClientMessage_LeaveRequest
	//	*Signalv2ClientMessage_UpdateSubscriptionPermission
	//	*Signalv2ClientMessage_SimulateScenario
	//	*Signalv2ClientMessage_UpdateParticipantMetadata
	//	*Signalv2ClientMessage_Ping
	//	*Signalv2ClientMessage_UpdateLocalAudioTrack
	//	*Signalv2ClientMessage_UpdateLocalVideoTrack
	Message isSignalv2ClientMessage_Message `protobuf_oneof:"message"`
}

func (x *Signalv2ClientMessage) Reset() {
	*x = Signalv2ClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_rtc_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signalv2ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signalv2ClientMessage) ProtoMessage() {}

func (x *Signalv2ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signalv2ClientMessage.ProtoReflect.Descriptor instead.
func (*Signalv2ClientMessage) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{0}
}

func (x *Signalv2ClientMessage) GetMessageId() uint32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *Signalv2ClientMessage) GetLastProcessedRemoteMessageId() uint32 {
	if x != nil {
		return x.LastProcessedRemoteMessageId
	}
	return 0
}

func (m *Signalv2ClientMessage) GetMessage() isSignalv2ClientMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *Signalv2ClientMessage) GetConnectRequest() *ConnectRequest {
	if x, ok := x.GetMessage().(*Signalv2ClientMessage_ConnectRequest); ok {
		return x.ConnectRequest
	}
	return nil
}

func (x *Signalv2ClientMessage) GetReconnectRequest() *ReconnectRequest {
	if x, ok := x.GetMessage().(*Signalv2ClientMessage_ReconnectRequest); ok {
		return x.ReconnectRequest
	}
	return nil
}

func (x *Signalv2ClientMessage) GetAudioTrack() *AudioTrack {
	if x, ok := x.GetMessage().(*Signalv2ClientMessage_AudioTrack); ok {
		return x.AudioTrack
	}
	return nil
}

func (x *Signalv2ClientMessage) GetVideoTrack() *VideoTrack {
	if x, ok := x.GetMessage().(*Signalv2ClientMessage_VideoTrack); ok {
		return x.VideoTrack
	}
	return nil
}

func (x *Signalv2ClientMessage) GetPublisherSdp() *SessionDescription {
	if x, ok := x.GetMessage().(*Signalv2ClientMessage_PublisherSdp); ok {
		return x.PublisherSdp
	}
	return nil
}

func (x *Signalv2ClientMessage) GetSubscriberSdp() *SessionDescription {
	if x, ok := x.GetMessage().(*Signalv2ClientMessage_SubscriberSdp); ok {
		return x.SubscriberSdp
	}
	return nil
}

func (x *Signalv2ClientMessage) GetIceCandidate() *TrickleRequest {
	if x, ok := x.GetMessage().(*Signalv2ClientMessage_IceCandidate); ok {
		return x.IceCandidate
	}
	return nil
}

func (x *Signalv2ClientMessage) GetMuteTrackRequest() *MuteTrackRequest {
	if x, ok := x.GetMessage().(*Signalv2ClientMessage_MuteTrackRequest); ok {
		return x.MuteTrackRequest
	}
	return nil
}

func (x *Signalv2ClientMessage) GetUpdateSubscription() *UpdateSubscription {
	if x, ok := x.GetMessage().(*Signalv2ClientMessage_UpdateSubscription); ok {
		return x.UpdateSubscription
	}
	return nil
}

func (x *Signalv2ClientMessage) GetUpdateTrackSettings() *UpdateTrackSettings {
	if x, ok := x.GetMessage().(*Signalv2ClientMessage_UpdateTrackSettings); ok {
		return x.UpdateTrackSettings
	}
	return nil
}

func (x *Signalv2ClientMessage) GetLeaveRequest() *LeaveRequest {
	if x, ok := x.GetMessage().(*Signalv2ClientMessage_LeaveRequest); ok {
		return x.LeaveRequest
	}
	return nil
}

func (x *Signalv2ClientMessage) GetUpdateSubscriptionPermission() *SubscriptionPermission {
	if x, ok := x.GetMessage().(*Signalv2ClientMessage_UpdateSubscriptionPermission); ok {
		return x.UpdateSubscriptionPermission
	}
	return nil
}

func (x *Signalv2ClientMessage) GetSimulateScenario() *SimulateScenario {
	if x, ok := x.GetMessage().(*Signalv2ClientMessage_SimulateScenario); ok {
		return x.SimulateScenario
	}
	return nil
}

func (x *Signalv2ClientMessage) GetUpdateParticipantMetadata() *UpdateParticipantMetadata {
	if x, ok := x.GetMessage().(*Signalv2ClientMessage_UpdateParticipantMetadata); ok {
		return x.UpdateParticipantMetadata
	}
	return nil
}

func (x *Signalv2ClientMessage) GetPing() *Ping {
	if x, ok := x.GetMessage().(*Signalv2ClientMessage_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *Signalv2ClientMessage) GetUpdateLocalAudioTrack() *UpdateLocalAudioTrack {
	if x, ok := x.GetMessage().(*Signalv2ClientMessage_UpdateLocalAudioTrack); ok {
		return x.UpdateLocalAudioTrack
	}
	return nil
}

func (x *Signalv2ClientMessage) GetUpdateLocalVideoTrack() *UpdateLocalVideoTrack {
	if x, ok := x.GetMessage().(*Signalv2ClientMessage_UpdateLocalVideoTrack); ok {
		return x.UpdateLocalVideoTrack
	}
	return nil
}

type isSignalv2ClientMessage_Message interface {
	isSignalv2ClientMessage_Message()
}

type Signalv2ClientMessage_ConnectRequest struct {
	ConnectRequest *ConnectRequest `protobuf:"bytes,3,opt,name=connect_request,json=connectRequest,proto3,oneof"`
}

type Signalv2ClientMessage_ReconnectRequest struct {
	ReconnectRequest *ReconnectRequest `protobuf:"bytes,4,opt,name=reconnect_request,json=reconnectRequest,proto3,oneof"`
}

type Signalv2ClientMessage_AudioTrack struct {
	AudioTrack *AudioTrack `protobuf:"bytes,5,opt,name=audio_track,json=audioTrack,proto3,oneof"`
}

type Signalv2ClientMessage_VideoTrack struct {
	VideoTrack *VideoTrack `protobuf:"bytes,6,opt,name=video_track,json=videoTrack,proto3,oneof"`
}

type Signalv2ClientMessage_PublisherSdp struct {
	PublisherSdp *SessionDescription `protobuf:"bytes,7,opt,name=publisher_sdp,json=publisherSdp,proto3,oneof"`
}

type Signalv2ClientMessage_SubscriberSdp struct {
	SubscriberSdp *SessionDescription `protobuf:"bytes,8,opt,name=subscriber_sdp,json=subscriberSdp,proto3,oneof"`
}

type Signalv2ClientMessage_IceCandidate struct {
	IceCandidate *TrickleRequest `protobuf:"bytes,9,opt,name=ice_candidate,json=iceCandidate,proto3,oneof"`
}

type Signalv2ClientMessage_MuteTrackRequest struct {
	MuteTrackRequest *MuteTrackRequest `protobuf:"bytes,10,opt,name=mute_track_request,json=muteTrackRequest,proto3,oneof"`
}

type Signalv2ClientMessage_UpdateSubscription struct {
	UpdateSubscription *UpdateSubscription `protobuf:"bytes,11,opt,name=update_subscription,json=updateSubscription,proto3,oneof"`
}

type Signalv2ClientMessage_UpdateTrackSettings struct {
	UpdateTrackSettings *UpdateTrackSettings `protobuf:"bytes,12,opt,name=update_track_settings,json=updateTrackSettings,proto3,oneof"`
}

type Signalv2ClientMessage_LeaveRequest struct {
	LeaveRequest *LeaveRequest `protobuf:"bytes,13,opt,name=leave_request,json=leaveRequest,proto3,oneof"`
}

type Signalv2ClientMessage_UpdateSubscriptionPermission struct {
	UpdateSubscriptionPermission *SubscriptionPermission `protobuf:"bytes,14,opt,name=update_subscription_permission,json=updateSubscriptionPermission,proto3,oneof"`
}

type Signalv2ClientMessage_SimulateScenario struct {
	SimulateScenario *SimulateScenario `protobuf:"bytes,15,opt,name=simulate_scenario,json=simulateScenario,proto3,oneof"`
}

type Signalv2ClientMessage_UpdateParticipantMetadata struct {
	UpdateParticipantMetadata *UpdateParticipantMetadata `protobuf:"bytes,16,opt,name=update_participant_metadata,json=updateParticipantMetadata,proto3,oneof"`
}

type Signalv2ClientMessage_Ping struct {
	Ping *Ping `protobuf:"bytes,17,opt,name=ping,proto3,oneof"`
}

type Signalv2ClientMessage_UpdateLocalAudioTrack struct {
	UpdateLocalAudioTrack *UpdateLocalAudioTrack `protobuf:"bytes,18,opt,name=update_local_audio_track,json=updateLocalAudioTrack,proto3,oneof"`
}

type Signalv2ClientMessage_UpdateLocalVideoTrack struct {
	UpdateLocalVideoTrack *UpdateLocalVideoTrack `protobuf:"bytes,19,opt,name=update_local_video_track,json=updateLocalVideoTrack,proto3,oneof"`
}

func (*Signalv2ClientMessage_ConnectRequest) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_ReconnectRequest) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_AudioTrack) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_VideoTrack) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_PublisherSdp) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_SubscriberSdp) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_IceCandidate) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_MuteTrackRequest) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_UpdateSubscription) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_UpdateTrackSettings) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_LeaveRequest) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_UpdateSubscriptionPermission) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_SimulateScenario) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_UpdateParticipantMetadata) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_Ping) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_UpdateLocalAudioTrack) isSignalv2ClientMessage_Message() {}

func (*Signalv2ClientMessage_UpdateLocalVideoTrack) isSignalv2ClientMessage_Message() {}

type Signalv2ClientEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection of client -> server messages
	ClientMessages []*Signalv2ClientMessage `protobuf:"bytes,1,rep,name=client_messages,json=clientMessages,proto3" json:"client_messages,omitempty"`
}

func (x *Signalv2ClientEnvelope) Reset() {
	*x = Signalv2ClientEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_rtc_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signalv2ClientEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signalv2ClientEnvelope) ProtoMessage() {}

func (x *Signalv2ClientEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signalv2ClientEnvelope.ProtoReflect.Descriptor instead.
func (*Signalv2ClientEnvelope) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{1}
}

func (x *Signalv2ClientEnvelope) GetClientMessages() []*Signalv2ClientMessage {
	if x != nil {
		return x.ClientMessages
	}
	return nil
}

type Signalv2ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// monotonically increasing number starting at some non-zero number (should not rollover)
	MessageId uint32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// last remote message processed
	LastProcessedRemoteMessageId uint32           `protobuf:"varint,2,opt,name=last_processed_remote_message_id,json=lastProcessedRemoteMessageId,proto3" json:"last_processed_remote_message_id,omitempty"`
	Errors                       []*ErrorResponse `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	// Types that are assignable to Message:
	//
	//	*Signalv2ServerMessage_ConnectResponse
	//	*Signalv2ServerMessage_ReconnectResponse
	//	*Signalv2ServerMessage_RoomUpdate
	//	*Signalv2ServerMessage_ParticipantUpdate
	//	*Signalv2ServerMessage_PublisherSdp
	//	*Signalv2ServerMessage_SubscriberSdp
	//	*Signalv2ServerMessage_LeaveRequest
	//	*Signalv2ServerMessage_MuteTrackRequest
	//	*Signalv2ServerMessage_SpeakersChanged
	//	*Signalv2ServerMessage_ConnectionQualityUpdate
	//	*Signalv2ServerMessage_StreamStateUpdate
	//	*Signalv2ServerMessage_SubscribedQualityUpdate
	//	*Signalv2ServerMessage_RefreshToken
	//	*Signalv2ServerMessage_TrackUnpublished
	//	*Signalv2ServerMessage_Pong
	//	*Signalv2ServerMessage_SubscriptionResponse
	//	*Signalv2ServerMessage_RequestResponse
	//	*Signalv2ServerMessage_TrackSubscribed
	//	*Signalv2ServerMessage_RoomMovedResponse
	Message isSignalv2ServerMessage_Message `protobuf_oneof:"message"`
}

func (x *Signalv2ServerMessage) Reset() {
	*x = Signalv2ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_rtc_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signalv2ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signalv2ServerMessage) ProtoMessage() {}

func (x *Signalv2ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signalv2ServerMessage.ProtoReflect.Descriptor instead.
func (*Signalv2ServerMessage) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{2}
}

func (x *Signalv2ServerMessage) GetMessageId() uint32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *Signalv2ServerMessage) GetLastProcessedRemoteMessageId() uint32 {
	if x != nil {
		return x.LastProcessedRemoteMessageId
	}
	return 0
}

func (x *Signalv2ServerMessage) GetErrors() []*ErrorResponse {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (m *Signalv2ServerMessage) GetMessage() isSignalv2ServerMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *Signalv2ServerMessage) GetConnectResponse() *ConnectResponse {
	if x, ok := x.GetMessage().(*Signalv2ServerMessage_ConnectResponse); ok {
		return x.ConnectResponse
	}
	return nil
}

func (x *Signalv2ServerMessage) GetReconnectResponse() *ReconnectResponse {
	if x, ok := x.GetMessage().(*Signalv2ServerMessage_ReconnectResponse); ok {
		return x.ReconnectResponse
	}
	return nil
}

func (x *Signalv2ServerMessage) GetRoomUpdate() *Room {
	if x, ok := x.GetMessage().(*Signalv2ServerMessage_RoomUpdate); ok {
		return x.RoomUpdate
	}
	return nil
}

func (x *Signalv2ServerMessage) GetParticipantUpdate() *ParticipantUpdate {
	if x, ok := x.GetMessage().(*Signalv2ServerMessage_ParticipantUpdate); ok {
		return x.ParticipantUpdate
	}
	return nil
}

func (x *Signalv2ServerMessage) GetPublisherSdp() *SessionDescription {
	if x, ok := x.GetMessage().(*Signalv2ServerMessage_PublisherSdp); ok {
		return x.PublisherSdp
	}
	return nil
}

func (x *Signalv2ServerMessage) GetSubscriberSdp() *SessionDescription {
	if x, ok := x.GetMessage().(*Signalv2ServerMessage_SubscriberSdp); ok {
		return x.SubscriberSdp
	}
	return nil
}

func (x *Signalv2ServerMessage) GetLeaveRequest() *LeaveRequest {
	if x, ok := x.GetMessage().(*Signalv2ServerMessage_LeaveRequest); ok {
		return x.LeaveRequest
	}
	return nil
}

func (x *Signalv2ServerMessage) GetMuteTrackRequest() *MuteTrackRequest {
	if x, ok := x.GetMessage().(*Signalv2ServerMessage_MuteTrackRequest); ok {
		return x.MuteTrackRequest
	}
	return nil
}

func (x *Signalv2ServerMessage) GetSpeakersChanged() *SpeakersChanged {
	if x, ok := x.GetMessage().(*Signalv2ServerMessage_SpeakersChanged); ok {
		return x.SpeakersChanged
	}
	return nil
}

func (x *Signalv2ServerMessage) GetConnectionQualityUpdate() *ConnectionQualityUpdate {
	if x, ok := x.GetMessage().(*Signalv2ServerMessage_ConnectionQualityUpdate); ok {
		return x.ConnectionQualityUpdate
	}
	return nil
}

func (x *Signalv2ServerMessage) GetStreamStateUpdate() *StreamStateUpdate {
	if x, ok := x.GetMessage().(*Signalv2ServerMessage_StreamStateUpdate); ok {
		return x.StreamStateUpdate
	}
	return nil
}

func (x *Signalv2ServerMessage) GetSubscribedQualityUpdate() *SubscribedQualityUpdate {
	if x, ok := x.GetMessage().(*Signalv2ServerMessage_SubscribedQualityUpdate); ok {
		return x.SubscribedQualityUpdate
	}
	return nil
}

func (x *Signalv2ServerMessage) GetRefreshToken() string {
	if x, ok := x.GetMessage().(*Signalv2ServerMessage_RefreshToken); ok {
		return x.RefreshToken
	}
	return ""
}

func (x *Signalv2ServerMessage) GetTrackUnpublished() *TrackUnpublishedResponse {
	if x, ok := x.GetMessage().(*Signalv2ServerMessage_TrackUnpublished); ok {
		return x.TrackUnpublished
	}
	return nil
}

func (x *Signalv2ServerMessage) GetPong() *Pong {
	if x, ok := x.GetMessage().(*Signalv2ServerMessage_Pong); ok {
		return x.Pong
	}
	return nil
}

func (x *Signalv2ServerMessage) GetSubscriptionResponse() *SubscriptionResponse {
	if x, ok := x.GetMessage().(*Signalv2ServerMessage_SubscriptionResponse); ok {
		return x.SubscriptionResponse
	}
	return nil
}

func (x *Signalv2ServerMessage) GetRequestResponse() *RequestResponse {
	if x, ok := x.GetMessage().(*Signalv2ServerMessage_RequestResponse); ok {
		return x.RequestResponse
	}
	return nil
}

func (x *Signalv2ServerMessage) GetTrackSubscribed() *TrackSubscribed {
	if x, ok := x.GetMessage().(*Signalv2ServerMessage_TrackSubscribed); ok {
		return x.TrackSubscribed
	}
	return nil
}

func (x *Signalv2ServerMessage) GetRoomMovedResponse() *RoomMovedResponse {
	if x, ok := x.GetMessage().(*Signalv2ServerMessage_RoomMovedResponse); ok {
		return x.RoomMovedResponse
	}
	return nil
}

type isSignalv2ServerMessage_Message interface {
	isSignalv2ServerMessage_Message()
}

type Signalv2ServerMessage_ConnectResponse struct {
	ConnectResponse *ConnectResponse `protobuf:"bytes,4,opt,name=connect_response,json=connectResponse,proto3,oneof"`
}

type Signalv2ServerMessage_ReconnectResponse struct {
	ReconnectResponse *ReconnectResponse `protobuf:"bytes,5,opt,name=reconnect_response,json=reconnectResponse,proto3,oneof"`
}

type Signalv2ServerMessage_RoomUpdate struct {
	RoomUpdate *Room `protobuf:"bytes,6,opt,name=room_update,json=roomUpdate,proto3,oneof"`
}

type Signalv2ServerMessage_ParticipantUpdate struct {
	ParticipantUpdate *ParticipantUpdate `protobuf:"bytes,7,opt,name=participant_update,json=participantUpdate,proto3,oneof"`
}

type Signalv2ServerMessage_PublisherSdp struct {
	PublisherSdp *SessionDescription `protobuf:"bytes,8,opt,name=publisher_sdp,json=publisherSdp,proto3,oneof"`
}

type Signalv2ServerMessage_SubscriberSdp struct {
	SubscriberSdp *SessionDescription `protobuf:"bytes,9,opt,name=subscriber_sdp,json=subscriberSdp,proto3,oneof"`
}

type Signalv2ServerMessage_LeaveRequest struct {
	LeaveRequest *LeaveRequest `protobuf:"bytes,10,opt,name=leave_request,json=leaveRequest,proto3,oneof"`
}

type Signalv2ServerMessage_MuteTrackRequest struct {
	MuteTrackRequest *MuteTrackRequest `protobuf:"bytes,11,opt,name=mute_track_request,json=muteTrackRequest,proto3,oneof"`
}

type Signalv2ServerMessage_SpeakersChanged struct {
	SpeakersChanged *SpeakersChanged `protobuf:"bytes,12,opt,name=speakers_changed,json=speakersChanged,proto3,oneof"`
}

type Signalv2ServerMessage_ConnectionQualityUpdate struct {
	ConnectionQualityUpdate *ConnectionQualityUpdate `protobuf:"bytes,13,opt,name=connection_quality_update,json=connectionQualityUpdate,proto3,oneof"`
}

type Signalv2ServerMessage_StreamStateUpdate struct {
	StreamStateUpdate *StreamStateUpdate `protobuf:"bytes,14,opt,name=stream_state_update,json=streamStateUpdate,proto3,oneof"`
}

type Signalv2ServerMessage_SubscribedQualityUpdate struct {
	SubscribedQualityUpdate *SubscribedQualityUpdate `protobuf:"bytes,15,opt,name=subscribed_quality_update,json=subscribedQualityUpdate,proto3,oneof"`
}

type Signalv2ServerMessage_RefreshToken struct {
	RefreshToken string `protobuf:"bytes,16,opt,name=refresh_token,json=refreshToken,proto3,oneof"`
}

type Signalv2ServerMessage_TrackUnpublished struct {
	TrackUnpublished *TrackUnpublishedResponse `protobuf:"bytes,17,opt,name=track_unpublished,json=trackUnpublished,proto3,oneof"`
}

type Signalv2ServerMessage_Pong struct {
	Pong *Pong `protobuf:"bytes,18,opt,name=pong,proto3,oneof"`
}

type Signalv2ServerMessage_SubscriptionResponse struct {
	SubscriptionResponse *SubscriptionResponse `protobuf:"bytes,19,opt,name=subscription_response,json=subscriptionResponse,proto3,oneof"`
}

type Signalv2ServerMessage_RequestResponse struct {
	RequestResponse *RequestResponse `protobuf:"bytes,20,opt,name=request_response,json=requestResponse,proto3,oneof"`
}

type Signalv2ServerMessage_TrackSubscribed struct {
	TrackSubscribed *TrackSubscribed `protobuf:"bytes,21,opt,name=track_subscribed,json=trackSubscribed,proto3,oneof"`
}

type Signalv2ServerMessage_RoomMovedResponse struct {
	RoomMovedResponse *RoomMovedResponse `protobuf:"bytes,22,opt,name=room_moved_response,json=roomMovedResponse,proto3,oneof"`
}

func (*Signalv2ServerMessage_ConnectResponse) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_ReconnectResponse) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_RoomUpdate) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_ParticipantUpdate) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_PublisherSdp) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_SubscriberSdp) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_LeaveRequest) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_MuteTrackRequest) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_SpeakersChanged) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_ConnectionQualityUpdate) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_StreamStateUpdate) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_SubscribedQualityUpdate) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_RefreshToken) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_TrackUnpublished) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_Pong) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_SubscriptionResponse) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_RequestResponse) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_TrackSubscribed) isSignalv2ServerMessage_Message() {}

func (*Signalv2ServerMessage_RoomMovedResponse) isSignalv2ServerMessage_Message() {}

type Signalv2ServerEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// collection of server -> client messages
	ServerMessages []*Signalv2ServerMessage `protobuf:"bytes,1,rep,name=server_messages,json=serverMessages,proto3" json:"server_messages,omitempty"`
}

func (x *Signalv2ServerEnvelope) Reset() {
	*x = Signalv2ServerEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_rtc_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signalv2ServerEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signalv2ServerEnvelope) ProtoMessage() {}

func (x *Signalv2ServerEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signalv2ServerEnvelope.ProtoReflect.Descriptor instead.
func (*Signalv2ServerEnvelope) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{3}
}

func (x *Signalv2ServerEnvelope) GetServerMessages() []*Signalv2ServerMessage {
	if x != nil {
		return x.ServerMessages
	}
	return nil
}

type ConnectionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoSubscribe        bool `protobuf:"varint,1,opt,name=auto_subscribe,json=autoSubscribe,proto3" json:"auto_subscribe,omitempty"`
	AdaptiveStream       bool `protobuf:"varint,2,opt,name=adaptive_stream,json=adaptiveStream,proto3" json:"adaptive_stream,omitempty"`
	SubscriberAllowPause bool `protobuf:"varint,3,opt,name=subscriber_allow_pause,json=subscriberAllowPause,proto3" json:"subscriber_allow_pause,omitempty"`
	DisableIceLite       bool `protobuf:"varint,4,opt,name=disable_ice_lite,json=disableIceLite,proto3" json:"disable_ice_lite,omitempty"`
}

func (x *ConnectionSettings) Reset() {
	*x = ConnectionSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_rtc_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionSettings) ProtoMessage() {}

func (x *ConnectionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionSettings.ProtoReflect.Descriptor instead.
func (*ConnectionSettings) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{4}
}

func (x *ConnectionSettings) GetAutoSubscribe() bool {
	if x != nil {
		return x.AutoSubscribe
	}
	return false
}

func (x *ConnectionSettings) GetAdaptiveStream() bool {
	if x != nil {
		return x.AdaptiveStream
	}
	return false
}

func (x *ConnectionSettings) GetSubscriberAllowPause() bool {
	if x != nil {
		return x.SubscriberAllowPause
	}
	return false
}

func (x *ConnectionSettings) GetDisableIceLite() bool {
	if x != nil {
		return x.DisableIceLite
	}
	return false
}

type TrackSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid        string          `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Name       string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Source     TrackSource     `protobuf:"varint,3,opt,name=source,proto3,enum=livekit.TrackSource" json:"source,omitempty"`
	Muted      bool            `protobuf:"varint,4,opt,name=muted,proto3" json:"muted,omitempty"`
	Encryption Encryption_Type `protobuf:"varint,5,opt,name=encryption,proto3,enum=livekit.Encryption_Type" json:"encryption,omitempty"`
	Sid        *string         `protobuf:"bytes,6,opt,name=sid,proto3,oneof" json:"sid,omitempty"`
}

func (x *TrackSettings) Reset() {
	*x = TrackSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_rtc_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackSettings) ProtoMessage() {}

func (x *TrackSettings) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackSettings.ProtoReflect.Descriptor instead.
func (*TrackSettings) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{5}
}

func (x *TrackSettings) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *TrackSettings) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrackSettings) GetSource() TrackSource {
	if x != nil {
		return x.Source
	}
	return TrackSource_UNKNOWN
}

func (x *TrackSettings) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

func (x *TrackSettings) GetEncryption() Encryption_Type {
	if x != nil {
		return x.Encryption
	}
	return Encryption_NONE
}

func (x *TrackSettings) GetSid() string {
	if x != nil && x.Sid != nil {
		return *x.Sid
	}
	return ""
}

type AudioTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackSettings *TrackSettings      `protobuf:"bytes,1,opt,name=track_settings,json=trackSettings,proto3" json:"track_settings,omitempty"`
	AudioFeatures []AudioTrackFeature `protobuf:"varint,5,rep,packed,name=audio_features,json=audioFeatures,proto3,enum=livekit.AudioTrackFeature" json:"audio_features,omitempty"`
	DisableRed    bool                `protobuf:"varint,6,opt,name=disable_red,json=disableRed,proto3" json:"disable_red,omitempty"`
}

func (x *AudioTrack) Reset() {
	*x = AudioTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_rtc_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioTrack) ProtoMessage() {}

func (x *AudioTrack) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioTrack.ProtoReflect.Descriptor instead.
func (*AudioTrack) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{6}
}

func (x *AudioTrack) GetTrackSettings() *TrackSettings {
	if x != nil {
		return x.TrackSettings
	}
	return nil
}

func (x *AudioTrack) GetAudioFeatures() []AudioTrackFeature {
	if x != nil {
		return x.AudioFeatures
	}
	return nil
}

func (x *AudioTrack) GetDisableRed() bool {
	if x != nil {
		return x.DisableRed
	}
	return false
}

type VideoTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackSettings     *TrackSettings    `protobuf:"bytes,1,opt,name=track_settings,json=trackSettings,proto3" json:"track_settings,omitempty"`
	SimulcastCodecs   []*SimulcastCodec `protobuf:"bytes,2,rep,name=simulcast_codecs,json=simulcastCodecs,proto3" json:"simulcast_codecs,omitempty"`
	BackupCodecPolicy BackupCodecPolicy `protobuf:"varint,3,opt,name=backup_codec_policy,json=backupCodecPolicy,proto3,enum=livekit.BackupCodecPolicy" json:"backup_codec_policy,omitempty"`
}

func (x *VideoTrack) Reset() {
	*x = VideoTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_rtc_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTrack) ProtoMessage() {}

func (x *VideoTrack) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTrack.ProtoReflect.Descriptor instead.
func (*VideoTrack) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{7}
}

func (x *VideoTrack) GetTrackSettings() *TrackSettings {
	if x != nil {
		return x.TrackSettings
	}
	return nil
}

func (x *VideoTrack) GetSimulcastCodecs() []*SimulcastCodec {
	if x != nil {
		return x.SimulcastCodecs
	}
	return nil
}

func (x *VideoTrack) GetBackupCodecPolicy() BackupCodecPolicy {
	if x != nil {
		return x.BackupCodecPolicy
	}
	return BackupCodecPolicy_PREFER_REGRESSION
}

type ConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientInfo         *ClientInfo         `protobuf:"bytes,1,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
	PublisherSdp       *SessionDescription `protobuf:"bytes,2,opt,name=publisher_sdp,json=publisherSdp,proto3" json:"publisher_sdp,omitempty"`
	ConnectionSettings *ConnectionSettings `protobuf:"bytes,3,opt,name=connection_settings,json=connectionSettings,proto3" json:"connection_settings,omitempty"`
	AudioTracks        []*AudioTrack       `protobuf:"bytes,4,rep,name=audio_tracks,json=audioTracks,proto3" json:"audio_tracks,omitempty"`
	VideoTracks        []*VideoTrack       `protobuf:"bytes,5,rep,name=video_tracks,json=videoTracks,proto3" json:"video_tracks,omitempty"`
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_rtc_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{8}
}

func (x *ConnectRequest) GetClientInfo() *ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *ConnectRequest) GetPublisherSdp() *SessionDescription {
	if x != nil {
		return x.PublisherSdp
	}
	return nil
}

func (x *ConnectRequest) GetConnectionSettings() *ConnectionSettings {
	if x != nil {
		return x.ConnectionSettings
	}
	return nil
}

func (x *ConnectRequest) GetAudioTracks() []*AudioTrack {
	if x != nil {
		return x.AudioTracks
	}
	return nil
}

func (x *ConnectRequest) GetVideoTracks() []*VideoTrack {
	if x != nil {
		return x.VideoTracks
	}
	return nil
}

type ReconnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantSid  string          `protobuf:"bytes,1,opt,name=participant_sid,json=participantSid,proto3" json:"participant_sid,omitempty"`
	ReconnectReason ReconnectReason `protobuf:"varint,2,opt,name=reconnect_reason,json=reconnectReason,proto3,enum=livekit.ReconnectReason" json:"reconnect_reason,omitempty"`
	SyncState       *SyncState      `protobuf:"bytes,3,opt,name=sync_state,json=syncState,proto3" json:"sync_state,omitempty"`
}

func (x *ReconnectRequest) Reset() {
	*x = ReconnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_rtc_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconnectRequest) ProtoMessage() {}

func (x *ReconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconnectRequest.ProtoReflect.Descriptor instead.
func (*ReconnectRequest) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{9}
}

func (x *ReconnectRequest) GetParticipantSid() string {
	if x != nil {
		return x.ParticipantSid
	}
	return ""
}

func (x *ReconnectRequest) GetReconnectReason() ReconnectReason {
	if x != nil {
		return x.ReconnectReason
	}
	return ReconnectReason_RR_UNKNOWN
}

func (x *ReconnectRequest) GetSyncState() *SyncState {
	if x != nil {
		return x.SyncState
	}
	return nil
}

type ConnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room                *Room                `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	Participant         *ParticipantInfo     `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
	OtherParticipants   []*ParticipantInfo   `protobuf:"bytes,3,rep,name=other_participants,json=otherParticipants,proto3" json:"other_participants,omitempty"`
	IceServers          []*ICEServer         `protobuf:"bytes,4,rep,name=ice_servers,json=iceServers,proto3" json:"ice_servers,omitempty"`
	ClientConfiguration *ClientConfiguration `protobuf:"bytes,5,opt,name=client_configuration,json=clientConfiguration,proto3" json:"client_configuration,omitempty"`
	PingTimeout         int32                `protobuf:"varint,6,opt,name=ping_timeout,json=pingTimeout,proto3" json:"ping_timeout,omitempty"`
	PingInterval        int32                `protobuf:"varint,7,opt,name=ping_interval,json=pingInterval,proto3" json:"ping_interval,omitempty"`
	ServerInfo          *ServerInfo          `protobuf:"bytes,8,opt,name=server_info,json=serverInfo,proto3" json:"server_info,omitempty"`
	// Server-Injected-Frame byte trailer, used to identify unencrypted frames when e2ee is enabled
	SifTrailer           []byte              `protobuf:"bytes,9,opt,name=sif_trailer,json=sifTrailer,proto3" json:"sif_trailer,omitempty"`
	EnabledPublishCodecs []*Codec            `protobuf:"bytes,10,rep,name=enabled_publish_codecs,json=enabledPublishCodecs,proto3" json:"enabled_publish_codecs,omitempty"`
	PublisherSdp         *SessionDescription `protobuf:"bytes,11,opt,name=publisher_sdp,json=publisherSdp,proto3" json:"publisher_sdp,omitempty"`
	SubscriberSdp        *SessionDescription `protobuf:"bytes,12,opt,name=subscriber_sdp,json=subscriberSdp,proto3" json:"subscriber_sdp,omitempty"`
}

func (x *ConnectResponse) Reset() {
	*x = ConnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_rtc_v2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse) ProtoMessage() {}

func (x *ConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{10}
}

func (x *ConnectResponse) GetRoom() *Room {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *ConnectResponse) GetParticipant() *ParticipantInfo {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *ConnectResponse) GetOtherParticipants() []*ParticipantInfo {
	if x != nil {
		return x.OtherParticipants
	}
	return nil
}

func (x *ConnectResponse) GetIceServers() []*ICEServer {
	if x != nil {
		return x.IceServers
	}
	return nil
}

func (x *ConnectResponse) GetClientConfiguration() *ClientConfiguration {
	if x != nil {
		return x.ClientConfiguration
	}
	return nil
}

func (x *ConnectResponse) GetPingTimeout() int32 {
	if x != nil {
		return x.PingTimeout
	}
	return 0
}

func (x *ConnectResponse) GetPingInterval() int32 {
	if x != nil {
		return x.PingInterval
	}
	return 0
}

func (x *ConnectResponse) GetServerInfo() *ServerInfo {
	if x != nil {
		return x.ServerInfo
	}
	return nil
}

func (x *ConnectResponse) GetSifTrailer() []byte {
	if x != nil {
		return x.SifTrailer
	}
	return nil
}

func (x *ConnectResponse) GetEnabledPublishCodecs() []*Codec {
	if x != nil {
		return x.EnabledPublishCodecs
	}
	return nil
}

func (x *ConnectResponse) GetPublisherSdp() *SessionDescription {
	if x != nil {
		return x.PublisherSdp
	}
	return nil
}

func (x *ConnectResponse) GetSubscriberSdp() *SessionDescription {
	if x != nil {
		return x.SubscriberSdp
	}
	return nil
}

type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId uint32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Error     string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_livekit_rtc_v2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_rtc_v2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_livekit_rtc_v2_proto_rawDescGZIP(), []int{11}
}

func (x *ErrorResponse) GetMessageId() uint32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ErrorResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_livekit_rtc_v2_proto protoreflect.FileDescriptor

var file_livekit_rtc_v2_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x5f, 0x72, 0x74, 0x63, 0x5f, 0x76, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x1a,
	0x11, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x5f, 0x72, 0x74, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x0a, 0x0a, 0x15, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x76, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x46, 0x0a, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12,
	0x36, 0x0a, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x42, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x64, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x64, 0x70, 0x12, 0x44, 0x0a, 0x0e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x64, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x53, 0x64,
	0x70, 0x12, 0x3e, 0x0a, 0x0d, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x49, 0x0a, 0x12, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x75, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x13,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x15,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x13, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x3c, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67,
	0x0a, 0x1e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x73, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x48, 0x00, 0x52,
	0x10, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x12, 0x64, 0x0a, 0x1b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x19, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a, 0x18,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x00,
	0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x59, 0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x15, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a,
	0x16, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x76, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x76, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x84, 0x0c, 0x0a, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x76, 0x32, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x45, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x6f, 0x6f,
	0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x5f, 0x73, 0x64, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x64, 0x70, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x64, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x53, 0x64, 0x70, 0x12, 0x3c,
	0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x12,
	0x6d, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x4d, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x5e,
	0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4c,
	0x0a, 0x13, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x19,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x17, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x50, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x6e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x6e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x50, 0x6f,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x15, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x4c,
	0x0a, 0x13, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x72, 0x6f, 0x6f, 0x6d, 0x4d,
	0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x76, 0x32, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x12, 0x47, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x76, 0x32, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x12, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x63, 0x65, 0x4c, 0x69, 0x74,
	0x65, 0x22, 0xd2, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a,
	0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x73, 0x69, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x3d, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x0a, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x3d, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c,
	0x63, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x0f, 0x73, 0x69, 0x6d, 0x75, 0x6c,
	0x63, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xc6, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x40, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x64, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x64,
	0x70, 0x12, 0x4c, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x36, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x52, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22,
	0xb3, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x64, 0x12, 0x43, 0x0a,
	0x10, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xaa, 0x05, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x72, 0x6f, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x3a, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x12, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x12, 0x33, 0x0a, 0x0b, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x49, 0x43, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x34, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x66, 0x5f, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x66, 0x54,
	0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x12, 0x40, 0x0a, 0x0d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x64, 0x70, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x64, 0x70, 0x12, 0x42,
	0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x64, 0x70,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x53,
	0x64, 0x70, 0x22, 0x44, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x46, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0xaa,
	0x02, 0x0d, 0x4c, 0x69, 0x76, 0x65, 0x4b, 0x69, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0xea,
	0x02, 0x0e, 0x4c, 0x69, 0x76, 0x65, 0x4b, 0x69, 0x74, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_livekit_rtc_v2_proto_rawDescOnce sync.Once
	file_livekit_rtc_v2_proto_rawDescData = file_livekit_rtc_v2_proto_rawDesc
)

func file_livekit_rtc_v2_proto_rawDescGZIP() []byte {
	file_livekit_rtc_v2_proto_rawDescOnce.Do(func() {
		file_livekit_rtc_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_livekit_rtc_v2_proto_rawDescData)
	})
	return file_livekit_rtc_v2_proto_rawDescData
}

var file_livekit_rtc_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_livekit_rtc_v2_proto_goTypes = []interface{}{
	(*Signalv2ClientMessage)(nil),     // 0: livekit.Signalv2ClientMessage
	(*Signalv2ClientEnvelope)(nil),    // 1: livekit.Signalv2ClientEnvelope
	(*Signalv2ServerMessage)(nil),     // 2: livekit.Signalv2ServerMessage
	(*Signalv2ServerEnvelope)(nil),    // 3: livekit.Signalv2ServerEnvelope
	(*ConnectionSettings)(nil),        // 4: livekit.ConnectionSettings
	(*TrackSettings)(nil),             // 5: livekit.TrackSettings
	(*AudioTrack)(nil),                // 6: livekit.AudioTrack
	(*VideoTrack)(nil),                // 7: livekit.VideoTrack
	(*ConnectRequest)(nil),            // 8: livekit.ConnectRequest
	(*ReconnectRequest)(nil),          // 9: livekit.ReconnectRequest
	(*ConnectResponse)(nil),           // 10: livekit.ConnectResponse
	(*ErrorResponse)(nil),             // 11: livekit.ErrorResponse
	(*SessionDescription)(nil),        // 12: livekit.SessionDescription
	(*TrickleRequest)(nil),            // 13: livekit.TrickleRequest
	(*MuteTrackRequest)(nil),          // 14: livekit.MuteTrackRequest
	(*UpdateSubscription)(nil),        // 15: livekit.UpdateSubscription
	(*UpdateTrackSettings)(nil),       // 16: livekit.UpdateTrackSettings
	(*LeaveRequest)(nil),              // 17: livekit.LeaveRequest
	(*SubscriptionPermission)(nil),    // 18: livekit.SubscriptionPermission
	(*SimulateScenario)(nil),          // 19: livekit.SimulateScenario
	(*UpdateParticipantMetadata)(nil), // 20: livekit.UpdateParticipantMetadata
	(*Ping)(nil),                      // 21: livekit.Ping
	(*UpdateLocalAudioTrack)(nil),     // 22: livekit.UpdateLocalAudioTrack
	(*UpdateLocalVideoTrack)(nil),     // 23: livekit.UpdateLocalVideoTrack
	(*ReconnectResponse)(nil),         // 24: livekit.ReconnectResponse
	(*Room)(nil),                      // 25: livekit.Room
	(*ParticipantUpdate)(nil),         // 26: livekit.ParticipantUpdate
	(*SpeakersChanged)(nil),           // 27: livekit.SpeakersChanged
	(*ConnectionQualityUpdate)(nil),   // 28: livekit.ConnectionQualityUpdate
	(*StreamStateUpdate)(nil),         // 29: livekit.StreamStateUpdate
	(*SubscribedQualityUpdate)(nil),   // 30: livekit.SubscribedQualityUpdate
	(*TrackUnpublishedResponse)(nil),  // 31: livekit.TrackUnpublishedResponse
	(*Pong)(nil),                      // 32: livekit.Pong
	(*SubscriptionResponse)(nil),      // 33: livekit.SubscriptionResponse
	(*RequestResponse)(nil),           // 34: livekit.RequestResponse
	(*TrackSubscribed)(nil),           // 35: livekit.TrackSubscribed
	(*RoomMovedResponse)(nil),         // 36: livekit.RoomMovedResponse
	(TrackSource)(0),                  // 37: livekit.TrackSource
	(Encryption_Type)(0),              // 38: livekit.Encryption.Type
	(AudioTrackFeature)(0),            // 39: livekit.AudioTrackFeature
	(*SimulcastCodec)(nil),            // 40: livekit.SimulcastCodec
	(BackupCodecPolicy)(0),            // 41: livekit.BackupCodecPolicy
	(*ClientInfo)(nil),                // 42: livekit.ClientInfo
	(ReconnectReason)(0),              // 43: livekit.ReconnectReason
	(*SyncState)(nil),                 // 44: livekit.SyncState
	(*ParticipantInfo)(nil),           // 45: livekit.ParticipantInfo
	(*ICEServer)(nil),                 // 46: livekit.ICEServer
	(*ClientConfiguration)(nil),       // 47: livekit.ClientConfiguration
	(*ServerInfo)(nil),                // 48: livekit.ServerInfo
	(*Codec)(nil),                     // 49: livekit.Codec
}
var file_livekit_rtc_v2_proto_depIdxs = []int32{
	8,  // 0: livekit.Signalv2ClientMessage.connect_request:type_name -> livekit.ConnectRequest
	9,  // 1: livekit.Signalv2ClientMessage.reconnect_request:type_name -> livekit.ReconnectRequest
	6,  // 2: livekit.Signalv2ClientMessage.audio_track:type_name -> livekit.AudioTrack
	7,  // 3: livekit.Signalv2ClientMessage.video_track:type_name -> livekit.VideoTrack
	12, // 4: livekit.Signalv2ClientMessage.publisher_sdp:type_name -> livekit.SessionDescription
	12, // 5: livekit.Signalv2ClientMessage.subscriber_sdp:type_name -> livekit.SessionDescription
	13, // 6: livekit.Signalv2ClientMessage.ice_candidate:type_name -> livekit.TrickleRequest
	14, // 7: livekit.Signalv2ClientMessage.mute_track_request:type_name -> livekit.MuteTrackRequest
	15, // 8: livekit.Signalv2ClientMessage.update_subscription:type_name -> livekit.UpdateSubscription
	16, // 9: livekit.Signalv2ClientMessage.update_track_settings:type_name -> livekit.UpdateTrackSettings
	17, // 10: livekit.Signalv2ClientMessage.leave_request:type_name -> livekit.LeaveRequest
	18, // 11: livekit.Signalv2ClientMessage.update_subscription_permission:type_name -> livekit.SubscriptionPermission
	19, // 12: livekit.Signalv2ClientMessage.simulate_scenario:type_name -> livekit.SimulateScenario
	20, // 13: livekit.Signalv2ClientMessage.update_participant_metadata:type_name -> livekit.UpdateParticipantMetadata
	21, // 14: livekit.Signalv2ClientMessage.ping:type_name -> livekit.Ping
	22, // 15: livekit.Signalv2ClientMessage.update_local_audio_track:type_name -> livekit.UpdateLocalAudioTrack
	23, // 16: livekit.Signalv2ClientMessage.update_local_video_track:type_name -> livekit.UpdateLocalVideoTrack
	0,  // 17: livekit.Signalv2ClientEnvelope.client_messages:type_name -> livekit.Signalv2ClientMessage
	11, // 18: livekit.Signalv2ServerMessage.errors:type_name -> livekit.ErrorResponse
	10, // 19: livekit.Signalv2ServerMessage.connect_response:type_name -> livekit.ConnectResponse
	24, // 20: livekit.Signalv2ServerMessage.reconnect_response:type_name -> livekit.ReconnectResponse
	25, // 21: livekit.Signalv2ServerMessage.room_update:type_name -> livekit.Room
	26, // 22: livekit.Signalv2ServerMessage.participant_update:type_name -> livekit.ParticipantUpdate
	12, // 23: livekit.Signalv2ServerMessage.publisher_sdp:type_name -> livekit.SessionDescription
	12, // 24: livekit.Signalv2ServerMessage.subscriber_sdp:type_name -> livekit.SessionDescription
	17, // 25: livekit.Signalv2ServerMessage.leave_request:type_name -> livekit.LeaveRequest
	14, // 26: livekit.Signalv2ServerMessage.mute_track_request:type_name -> livekit.MuteTrackRequest
	27, // 27: livekit.Signalv2ServerMessage.speakers_changed:type_name -> livekit.SpeakersChanged
	28, // 28: livekit.Signalv2ServerMessage.connection_quality_update:type_name -> livekit.ConnectionQualityUpdate
	29, // 29: livekit.Signalv2ServerMessage.stream_state_update:type_name -> livekit.StreamStateUpdate
	30, // 30: livekit.Signalv2ServerMessage.subscribed_quality_update:type_name -> livekit.SubscribedQualityUpdate
	31, // 31: livekit.Signalv2ServerMessage.track_unpublished:type_name -> livekit.TrackUnpublishedResponse
	32, // 32: livekit.Signalv2ServerMessage.pong:type_name -> livekit.Pong
	33, // 33: livekit.Signalv2ServerMessage.subscription_response:type_name -> livekit.SubscriptionResponse
	34, // 34: livekit.Signalv2ServerMessage.request_response:type_name -> livekit.RequestResponse
	35, // 35: livekit.Signalv2ServerMessage.track_subscribed:type_name -> livekit.TrackSubscribed
	36, // 36: livekit.Signalv2ServerMessage.room_moved_response:type_name -> livekit.RoomMovedResponse
	2,  // 37: livekit.Signalv2ServerEnvelope.server_messages:type_name -> livekit.Signalv2ServerMessage
	37, // 38: livekit.TrackSettings.source:type_name -> livekit.TrackSource
	38, // 39: livekit.TrackSettings.encryption:type_name -> livekit.Encryption.Type
	5,  // 40: livekit.AudioTrack.track_settings:type_name -> livekit.TrackSettings
	39, // 41: livekit.AudioTrack.audio_features:type_name -> livekit.AudioTrackFeature
	5,  // 42: livekit.VideoTrack.track_settings:type_name -> livekit.TrackSettings
	40, // 43: livekit.VideoTrack.simulcast_codecs:type_name -> livekit.SimulcastCodec
	41, // 44: livekit.VideoTrack.backup_codec_policy:type_name -> livekit.BackupCodecPolicy
	42, // 45: livekit.ConnectRequest.client_info:type_name -> livekit.ClientInfo
	12, // 46: livekit.ConnectRequest.publisher_sdp:type_name -> livekit.SessionDescription
	4,  // 47: livekit.ConnectRequest.connection_settings:type_name -> livekit.ConnectionSettings
	6,  // 48: livekit.ConnectRequest.audio_tracks:type_name -> livekit.AudioTrack
	7,  // 49: livekit.ConnectRequest.video_tracks:type_name -> livekit.VideoTrack
	43, // 50: livekit.ReconnectRequest.reconnect_reason:type_name -> livekit.ReconnectReason
	44, // 51: livekit.ReconnectRequest.sync_state:type_name -> livekit.SyncState
	25, // 52: livekit.ConnectResponse.room:type_name -> livekit.Room
	45, // 53: livekit.ConnectResponse.participant:type_name -> livekit.ParticipantInfo
	45, // 54: livekit.ConnectResponse.other_participants:type_name -> livekit.ParticipantInfo
	46, // 55: livekit.ConnectResponse.ice_servers:type_name -> livekit.ICEServer
	47, // 56: livekit.ConnectResponse.client_configuration:type_name -> livekit.ClientConfiguration
	48, // 57: livekit.ConnectResponse.server_info:type_name -> livekit.ServerInfo
	49, // 58: livekit.ConnectResponse.enabled_publish_codecs:type_name -> livekit.Codec
	12, // 59: livekit.ConnectResponse.publisher_sdp:type_name -> livekit.SessionDescription
	12, // 60: livekit.ConnectResponse.subscriber_sdp:type_name -> livekit.SessionDescription
	61, // [61:61] is the sub-list for method output_type
	61, // [61:61] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_livekit_rtc_v2_proto_init() }
func file_livekit_rtc_v2_proto_init() {
	if File_livekit_rtc_v2_proto != nil {
		return
	}
	file_livekit_rtc_proto_init()
	file_livekit_models_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_livekit_rtc_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signalv2ClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_rtc_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signalv2ClientEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_rtc_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signalv2ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_rtc_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signalv2ServerEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_rtc_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_rtc_v2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_rtc_v2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_rtc_v2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_rtc_v2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_rtc_v2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_rtc_v2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_livekit_rtc_v2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_livekit_rtc_v2_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Signalv2ClientMessage_ConnectRequest)(nil),
		(*Signalv2ClientMessage_ReconnectRequest)(nil),
		(*Signalv2ClientMessage_AudioTrack)(nil),
		(*Signalv2ClientMessage_VideoTrack)(nil),
		(*Signalv2ClientMessage_PublisherSdp)(nil),
		(*Signalv2ClientMessage_SubscriberSdp)(nil),
		(*Signalv2ClientMessage_IceCandidate)(nil),
		(*Signalv2ClientMessage_MuteTrackRequest)(nil),
		(*Signalv2ClientMessage_UpdateSubscription)(nil),
		(*Signalv2ClientMessage_UpdateTrackSettings)(nil),
		(*Signalv2ClientMessage_LeaveRequest)(nil),
		(*Signalv2ClientMessage_UpdateSubscriptionPermission)(nil),
		(*Signalv2ClientMessage_SimulateScenario)(nil),
		(*Signalv2ClientMessage_UpdateParticipantMetadata)(nil),
		(*Signalv2ClientMessage_Ping)(nil),
		(*Signalv2ClientMessage_UpdateLocalAudioTrack)(nil),
		(*Signalv2ClientMessage_UpdateLocalVideoTrack)(nil),
	}
	file_livekit_rtc_v2_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Signalv2ServerMessage_ConnectResponse)(nil),
		(*Signalv2ServerMessage_ReconnectResponse)(nil),
		(*Signalv2ServerMessage_RoomUpdate)(nil),
		(*Signalv2ServerMessage_ParticipantUpdate)(nil),
		(*Signalv2ServerMessage_PublisherSdp)(nil),
		(*Signalv2ServerMessage_SubscriberSdp)(nil),
		(*Signalv2ServerMessage_LeaveRequest)(nil),
		(*Signalv2ServerMessage_MuteTrackRequest)(nil),
		(*Signalv2ServerMessage_SpeakersChanged)(nil),
		(*Signalv2ServerMessage_ConnectionQualityUpdate)(nil),
		(*Signalv2ServerMessage_StreamStateUpdate)(nil),
		(*Signalv2ServerMessage_SubscribedQualityUpdate)(nil),
		(*Signalv2ServerMessage_RefreshToken)(nil),
		(*Signalv2ServerMessage_TrackUnpublished)(nil),
		(*Signalv2ServerMessage_Pong)(nil),
		(*Signalv2ServerMessage_SubscriptionResponse)(nil),
		(*Signalv2ServerMessage_RequestResponse)(nil),
		(*Signalv2ServerMessage_TrackSubscribed)(nil),
		(*Signalv2ServerMessage_RoomMovedResponse)(nil),
	}
	file_livekit_rtc_v2_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_livekit_rtc_v2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_livekit_rtc_v2_proto_goTypes,
		DependencyIndexes: file_livekit_rtc_v2_proto_depIdxs,
		MessageInfos:      file_livekit_rtc_v2_proto_msgTypes,
	}.Build()
	File_livekit_rtc_v2_proto = out.File
	file_livekit_rtc_v2_proto_rawDesc = nil
	file_livekit_rtc_v2_proto_goTypes = nil
	file_livekit_rtc_v2_proto_depIdxs = nil
}
