// Code generated by protoc-gen-twirp v8.1.0, DO NOT EDIT.
// source: livekit_recording.proto

package livekit

import context "context"
import fmt "fmt"
import http "net/http"
import ioutil "io/ioutil"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

import google_protobuf "google.golang.org/protobuf/types/known/emptypb"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ==========================
// RecordingService Interface
// ==========================

// Recording service that can be performed on any node
// they are Twirp-based HTTP req/responses
type RecordingService interface {
	// Starts a room
	StartRecording(context.Context, *StartRecordingRequest) (*StartRecordingResponse, error)

	// Adds an rtmp output to a live recording
	AddOutput(context.Context, *AddOutputRequest) (*google_protobuf.Empty, error)

	// Removes an rtmp output from a live recording
	RemoveOutput(context.Context, *RemoveOutputRequest) (*google_protobuf.Empty, error)

	// Ends a recording
	EndRecording(context.Context, *EndRecordingRequest) (*google_protobuf.Empty, error)
}

// ================================
// RecordingService Protobuf Client
// ================================

type recordingServiceProtobufClient struct {
	client      HTTPClient
	urls        [4]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewRecordingServiceProtobufClient creates a Protobuf client that implements the RecordingService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewRecordingServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) RecordingService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "livekit", "RecordingService")
	urls := [4]string{
		serviceURL + "StartRecording",
		serviceURL + "AddOutput",
		serviceURL + "RemoveOutput",
		serviceURL + "EndRecording",
	}

	return &recordingServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *recordingServiceProtobufClient) StartRecording(ctx context.Context, in *StartRecordingRequest) (*StartRecordingResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "RecordingService")
	ctx = ctxsetters.WithMethodName(ctx, "StartRecording")
	caller := c.callStartRecording
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *StartRecordingRequest) (*StartRecordingResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StartRecordingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StartRecordingRequest) when calling interceptor")
					}
					return c.callStartRecording(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StartRecordingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StartRecordingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *recordingServiceProtobufClient) callStartRecording(ctx context.Context, in *StartRecordingRequest) (*StartRecordingResponse, error) {
	out := new(StartRecordingResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *recordingServiceProtobufClient) AddOutput(ctx context.Context, in *AddOutputRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "RecordingService")
	ctx = ctxsetters.WithMethodName(ctx, "AddOutput")
	caller := c.callAddOutput
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AddOutputRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddOutputRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddOutputRequest) when calling interceptor")
					}
					return c.callAddOutput(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *recordingServiceProtobufClient) callAddOutput(ctx context.Context, in *AddOutputRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *recordingServiceProtobufClient) RemoveOutput(ctx context.Context, in *RemoveOutputRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "RecordingService")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveOutput")
	caller := c.callRemoveOutput
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RemoveOutputRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveOutputRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveOutputRequest) when calling interceptor")
					}
					return c.callRemoveOutput(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *recordingServiceProtobufClient) callRemoveOutput(ctx context.Context, in *RemoveOutputRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *recordingServiceProtobufClient) EndRecording(ctx context.Context, in *EndRecordingRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "RecordingService")
	ctx = ctxsetters.WithMethodName(ctx, "EndRecording")
	caller := c.callEndRecording
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *EndRecordingRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EndRecordingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EndRecordingRequest) when calling interceptor")
					}
					return c.callEndRecording(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *recordingServiceProtobufClient) callEndRecording(ctx context.Context, in *EndRecordingRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ============================
// RecordingService JSON Client
// ============================

type recordingServiceJSONClient struct {
	client      HTTPClient
	urls        [4]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewRecordingServiceJSONClient creates a JSON client that implements the RecordingService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewRecordingServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) RecordingService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "livekit", "RecordingService")
	urls := [4]string{
		serviceURL + "StartRecording",
		serviceURL + "AddOutput",
		serviceURL + "RemoveOutput",
		serviceURL + "EndRecording",
	}

	return &recordingServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *recordingServiceJSONClient) StartRecording(ctx context.Context, in *StartRecordingRequest) (*StartRecordingResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "RecordingService")
	ctx = ctxsetters.WithMethodName(ctx, "StartRecording")
	caller := c.callStartRecording
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *StartRecordingRequest) (*StartRecordingResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StartRecordingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StartRecordingRequest) when calling interceptor")
					}
					return c.callStartRecording(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StartRecordingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StartRecordingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *recordingServiceJSONClient) callStartRecording(ctx context.Context, in *StartRecordingRequest) (*StartRecordingResponse, error) {
	out := new(StartRecordingResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *recordingServiceJSONClient) AddOutput(ctx context.Context, in *AddOutputRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "RecordingService")
	ctx = ctxsetters.WithMethodName(ctx, "AddOutput")
	caller := c.callAddOutput
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AddOutputRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddOutputRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddOutputRequest) when calling interceptor")
					}
					return c.callAddOutput(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *recordingServiceJSONClient) callAddOutput(ctx context.Context, in *AddOutputRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *recordingServiceJSONClient) RemoveOutput(ctx context.Context, in *RemoveOutputRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "RecordingService")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveOutput")
	caller := c.callRemoveOutput
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RemoveOutputRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveOutputRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveOutputRequest) when calling interceptor")
					}
					return c.callRemoveOutput(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *recordingServiceJSONClient) callRemoveOutput(ctx context.Context, in *RemoveOutputRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *recordingServiceJSONClient) EndRecording(ctx context.Context, in *EndRecordingRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "RecordingService")
	ctx = ctxsetters.WithMethodName(ctx, "EndRecording")
	caller := c.callEndRecording
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *EndRecordingRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EndRecordingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EndRecordingRequest) when calling interceptor")
					}
					return c.callEndRecording(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *recordingServiceJSONClient) callEndRecording(ctx context.Context, in *EndRecordingRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===============================
// RecordingService Server Handler
// ===============================

type recordingServiceServer struct {
	RecordingService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewRecordingServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewRecordingServiceServer(svc RecordingService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &recordingServiceServer{
		RecordingService: svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *recordingServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *recordingServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// RecordingServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const RecordingServicePathPrefix = "/twirp/livekit.RecordingService/"

func (s *recordingServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "RecordingService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "livekit.RecordingService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "StartRecording":
		s.serveStartRecording(ctx, resp, req)
		return
	case "AddOutput":
		s.serveAddOutput(ctx, resp, req)
		return
	case "RemoveOutput":
		s.serveRemoveOutput(ctx, resp, req)
		return
	case "EndRecording":
		s.serveEndRecording(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *recordingServiceServer) serveStartRecording(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveStartRecordingJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveStartRecordingProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *recordingServiceServer) serveStartRecordingJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StartRecording")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(StartRecordingRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.RecordingService.StartRecording
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *StartRecordingRequest) (*StartRecordingResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StartRecordingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StartRecordingRequest) when calling interceptor")
					}
					return s.RecordingService.StartRecording(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StartRecordingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StartRecordingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StartRecordingResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StartRecordingResponse and nil error while calling StartRecording. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *recordingServiceServer) serveStartRecordingProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StartRecording")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(StartRecordingRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.RecordingService.StartRecording
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *StartRecordingRequest) (*StartRecordingResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StartRecordingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StartRecordingRequest) when calling interceptor")
					}
					return s.RecordingService.StartRecording(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StartRecordingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StartRecordingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StartRecordingResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StartRecordingResponse and nil error while calling StartRecording. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *recordingServiceServer) serveAddOutput(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAddOutputJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAddOutputProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *recordingServiceServer) serveAddOutputJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddOutput")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(AddOutputRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.RecordingService.AddOutput
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AddOutputRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddOutputRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddOutputRequest) when calling interceptor")
					}
					return s.RecordingService.AddOutput(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling AddOutput. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *recordingServiceServer) serveAddOutputProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddOutput")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(AddOutputRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.RecordingService.AddOutput
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AddOutputRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddOutputRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddOutputRequest) when calling interceptor")
					}
					return s.RecordingService.AddOutput(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling AddOutput. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *recordingServiceServer) serveRemoveOutput(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoveOutputJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveOutputProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *recordingServiceServer) serveRemoveOutputJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveOutput")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(RemoveOutputRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.RecordingService.RemoveOutput
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RemoveOutputRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveOutputRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveOutputRequest) when calling interceptor")
					}
					return s.RecordingService.RemoveOutput(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling RemoveOutput. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *recordingServiceServer) serveRemoveOutputProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveOutput")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(RemoveOutputRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.RecordingService.RemoveOutput
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RemoveOutputRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RemoveOutputRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RemoveOutputRequest) when calling interceptor")
					}
					return s.RecordingService.RemoveOutput(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling RemoveOutput. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *recordingServiceServer) serveEndRecording(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveEndRecordingJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveEndRecordingProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *recordingServiceServer) serveEndRecordingJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "EndRecording")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(EndRecordingRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.RecordingService.EndRecording
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *EndRecordingRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EndRecordingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EndRecordingRequest) when calling interceptor")
					}
					return s.RecordingService.EndRecording(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling EndRecording. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *recordingServiceServer) serveEndRecordingProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "EndRecording")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(EndRecordingRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.RecordingService.EndRecording
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *EndRecordingRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*EndRecordingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*EndRecordingRequest) when calling interceptor")
					}
					return s.RecordingService.EndRecording(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling EndRecording. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *recordingServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor1, 0
}

func (s *recordingServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.0"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *recordingServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "livekit", "RecordingService")
}

var twirpFileDescriptor1 = []byte{
	// 828 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x41, 0x73, 0xe3, 0x34,
	0x14, 0xae, 0xed, 0x38, 0xb1, 0x5f, 0xdb, 0x6c, 0x50, 0xa1, 0x78, 0xb3, 0x05, 0x82, 0xf7, 0xb0,
	0x85, 0x83, 0xdb, 0x69, 0x67, 0x76, 0x76, 0x96, 0x13, 0x85, 0x86, 0x74, 0xb6, 0xd3, 0x16, 0x95,
	0x72, 0xe0, 0xe2, 0x71, 0x62, 0x25, 0xd1, 0x60, 0x5b, 0x46, 0x96, 0xb3, 0xd3, 0x7f, 0xc0, 0x6f,
	0xe1, 0xca, 0x95, 0x2b, 0x7f, 0x86, 0x1f, 0xc0, 0x99, 0x91, 0x64, 0x3b, 0x21, 0x59, 0x5a, 0x0e,
	0x7b, 0xf3, 0xfb, 0xf4, 0xbd, 0xcf, 0x7a, 0x7a, 0xdf, 0x93, 0xe0, 0xe3, 0x84, 0x2e, 0xc8, 0xcf,
	0x54, 0x84, 0x9c, 0x4c, 0x18, 0x8f, 0x69, 0x36, 0x0b, 0x72, 0xce, 0x04, 0x43, 0x9d, 0x6a, 0xa1,
	0xff, 0x6c, 0xc6, 0xd8, 0x2c, 0x21, 0x47, 0x0a, 0x1e, 0x97, 0xd3, 0x23, 0x92, 0xe6, 0xe2, 0x5e,
	0xb3, 0xfc, 0xbf, 0x0d, 0xf8, 0xe8, 0x56, 0x44, 0x5c, 0xe0, 0x3a, 0x1d, 0x93, 0x5f, 0x4a, 0x52,
	0x08, 0x84, 0xc0, 0x2a, 0x79, 0xe2, 0x19, 0x03, 0xe3, 0xd0, 0x1d, 0x6d, 0x61, 0x19, 0xa0, 0x57,
	0xe0, 0x08, 0x92, 0xe6, 0x49, 0x24, 0x88, 0x67, 0x0e, 0x8c, 0xc3, 0xed, 0x93, 0x7e, 0x50, 0xfd,
	0x26, 0x68, 0x04, 0x7e, 0xa8, 0x18, 0xa3, 0x2d, 0xdc, 0xb0, 0xd1, 0x17, 0xd0, 0xe2, 0x22, 0xcd,
	0x3d, 0x4b, 0x65, 0xed, 0x2d, 0xb3, 0x44, 0x9a, 0x5f, 0x97, 0x22, 0x2f, 0xc5, 0xc8, 0xc0, 0x8a,
	0x82, 0x0e, 0xc0, 0x99, 0xd2, 0x84, 0xe4, 0x91, 0x98, 0x7b, 0x2d, 0xf5, 0x77, 0x03, 0x37, 0x08,
	0x3a, 0x85, 0x0e, 0xcb, 0x05, 0x65, 0x59, 0xe1, 0xd9, 0x4a, 0xeb, 0xe9, 0xe6, 0x0e, 0xae, 0x35,
	0x01, 0xd7, 0xcc, 0xb3, 0x0e, 0xd8, 0x34, 0xcb, 0x4b, 0x71, 0xe6, 0x40, 0x9b, 0xa9, 0xbf, 0xf9,
	0x13, 0xf8, 0x60, 0x63, 0xc7, 0x68, 0x1f, 0xda, 0x49, 0x74, 0xcf, 0x4a, 0xa1, 0xcb, 0xc6, 0x55,
	0x84, 0x9e, 0x81, 0xcb, 0x19, 0x4b, 0xc3, 0x2c, 0x4a, 0x75, 0xe1, 0x2e, 0x76, 0x24, 0x70, 0x15,
	0xa5, 0x04, 0x3d, 0x05, 0x67, 0x1c, 0x15, 0x24, 0x94, 0xa7, 0x65, 0xa9, 0xb5, 0x8e, 0x8c, 0xef,
	0x78, 0xe2, 0x0f, 0x00, 0x96, 0x05, 0x22, 0x04, 0xad, 0x92, 0x27, 0x85, 0x67, 0x0c, 0xac, 0x43,
	0x17, 0xab, 0x6f, 0xff, 0x77, 0x13, 0x7a, 0xeb, 0xfb, 0x46, 0xc7, 0xd0, 0xce, 0x39, 0x29, 0x88,
	0xde, 0x46, 0xf7, 0xc4, 0xdb, 0x2c, 0xf1, 0x46, 0xad, 0xe3, 0x8a, 0x87, 0x3e, 0x04, 0xfb, 0x2d,
	0x8d, 0xc5, 0x5c, 0x6d, 0xce, 0xc6, 0x3a, 0x90, 0xe5, 0xcc, 0x09, 0x9d, 0xcd, 0x85, 0xda, 0x97,
	0x8d, 0xab, 0x48, 0xb2, 0x63, 0x92, 0x57, 0xc7, 0x6b, 0x63, 0x1d, 0xa0, 0x03, 0x70, 0xa7, 0x3c,
	0x4a, 0x09, 0x97, 0xdd, 0xb5, 0xd5, 0xca, 0x12, 0x40, 0xcf, 0x61, 0x37, 0x2a, 0x63, 0xca, 0xc2,
	0x31, 0x15, 0x8a, 0xd1, 0x56, 0x8c, 0x1d, 0x05, 0x9e, 0x69, 0x0c, 0xbd, 0x80, 0x27, 0x9a, 0x34,
	0xe5, 0xd2, 0x45, 0xd9, 0xe4, 0xde, 0xeb, 0x28, 0x5a, 0x57, 0xc1, 0xc3, 0x1a, 0x95, 0x6a, 0x0b,
	0x1a, 0x93, 0xa5, 0x9a, 0xa3, 0xd5, 0x14, 0x58, 0xab, 0x79, 0xd0, 0xc9, 0x39, 0x93, 0x9d, 0xf7,
	0x5c, 0x7d, 0xae, 0x55, 0xe8, 0x7f, 0x05, 0xfb, 0xeb, 0xa6, 0x2d, 0x72, 0x96, 0x15, 0x04, 0x7d,
	0x0e, 0x3b, 0xcd, 0x20, 0x84, 0x34, 0xae, 0xfa, 0xb8, 0xdd, 0x60, 0x17, 0xb1, 0x7f, 0x03, 0xbd,
	0xaf, 0xe3, 0x58, 0xf7, 0xa4, 0x36, 0xfb, 0xe3, 0x69, 0xb2, 0xcd, 0xd2, 0x9e, 0xaa, 0xcd, 0xda,
	0x02, 0x1d, 0x19, 0xcb, 0x36, 0xdf, 0xc2, 0x1e, 0x26, 0x29, 0x5b, 0x90, 0xf7, 0x29, 0xfa, 0x0a,
	0xf6, 0xce, 0xb3, 0x78, 0x63, 0x2c, 0xff, 0x47, 0x81, 0x7f, 0x18, 0xb0, 0xdb, 0xe4, 0x5d, 0x64,
	0x53, 0x86, 0xba, 0x60, 0x36, 0x54, 0x93, 0xc6, 0x0f, 0xfb, 0x79, 0x1f, 0xda, 0xd1, 0x44, 0xd0,
	0x05, 0x51, 0xae, 0x71, 0x70, 0x15, 0x49, 0xd7, 0x10, 0xce, 0x19, 0xd7, 0x43, 0x89, 0x75, 0x80,
	0x5e, 0x40, 0x4b, 0x75, 0xc8, 0x5e, 0x1b, 0xec, 0x21, 0x4d, 0x08, 0x26, 0x45, 0x99, 0x08, 0xac,
	0x08, 0x92, 0xa8, 0x6e, 0x80, 0xf6, 0xc0, 0xda, 0xb8, 0x01, 0x6a, 0xa2, 0x24, 0xf8, 0x6f, 0x00,
	0x96, 0xc9, 0xb2, 0xde, 0x98, 0xbd, 0xcd, 0x12, 0x16, 0xc5, 0x61, 0x73, 0x1f, 0xe1, 0xed, 0x1a,
	0xbb, 0xe3, 0x09, 0xea, 0x83, 0x13, 0x97, 0x3c, 0x92, 0xb3, 0xa3, 0x8a, 0xb1, 0x70, 0x13, 0xfb,
	0xdf, 0xe9, 0x09, 0xac, 0xc4, 0x3e, 0x01, 0x28, 0x04, 0x27, 0x51, 0xba, 0x22, 0xe5, 0x6a, 0xe4,
	0x11, 0xa1, 0x2f, 0xbf, 0x87, 0x27, 0x6b, 0xc3, 0x87, 0x1c, 0x68, 0x5d, 0x5d, 0x5f, 0x9d, 0xf7,
	0xb6, 0x90, 0x0b, 0xf6, 0xe8, 0xdb, 0xf0, 0xf4, 0xb8, 0x67, 0x54, 0x9f, 0x2f, 0x8f, 0x7b, 0x26,
	0xea, 0x02, 0x0c, 0xef, 0x2e, 0x2f, 0x43, 0xbd, 0x64, 0xad, 0xc6, 0x2f, 0x8f, 0x7b, 0xad, 0x93,
	0x3f, 0x57, 0x67, 0xff, 0x96, 0xf0, 0x05, 0x9d, 0x10, 0xf4, 0x23, 0x74, 0xff, 0x6d, 0x6d, 0xf4,
	0x69, 0x73, 0x54, 0xef, 0xbc, 0xa8, 0xfb, 0x9f, 0xfd, 0xe7, 0xba, 0x9e, 0x09, 0xdf, 0xfa, 0xd5,
	0x34, 0xd0, 0x37, 0xe0, 0x36, 0xae, 0x47, 0xcb, 0x3b, 0x73, 0x7d, 0x12, 0xfa, 0xfb, 0x81, 0x7e,
	0x2e, 0x82, 0xfa, 0xb9, 0x08, 0xce, 0xe5, 0x73, 0xa1, 0x45, 0x2e, 0x60, 0x67, 0xd5, 0xe8, 0xe8,
	0x60, 0xe5, 0x62, 0xda, 0xf0, 0xff, 0xa3, 0x52, 0xab, 0xf6, 0x5e, 0x91, 0x7a, 0x87, 0xeb, 0x1f,
	0x94, 0x3a, 0x1b, 0xfe, 0xf4, 0x7c, 0x46, 0xc5, 0xbc, 0x1c, 0x07, 0x13, 0x96, 0x1e, 0x55, 0x32,
	0xfa, 0xb9, 0x9b, 0xb0, 0xa4, 0x06, 0x7e, 0x33, 0x77, 0x2f, 0xe9, 0x82, 0xbc, 0xa1, 0x22, 0xb8,
	0x91, 0x4b, 0x7f, 0x99, 0xdd, 0x2a, 0x7e, 0xfd, 0x5a, 0x01, 0xe3, 0xb6, 0x4a, 0x39, 0xfd, 0x27,
	0x00, 0x00, 0xff, 0xff, 0xb9, 0xa6, 0x50, 0xd9, 0x53, 0x07, 0x00, 0x00,
}
