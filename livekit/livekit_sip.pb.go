// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v4.23.4
// source: livekit_sip.proto

package livekit

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SIPTransport int32

const (
	SIPTransport_SIP_TRANSPORT_AUTO SIPTransport = 0
	SIPTransport_SIP_TRANSPORT_UDP  SIPTransport = 1
	SIPTransport_SIP_TRANSPORT_TCP  SIPTransport = 2
	SIPTransport_SIP_TRANSPORT_TLS  SIPTransport = 3
)

// Enum value maps for SIPTransport.
var (
	SIPTransport_name = map[int32]string{
		0: "SIP_TRANSPORT_AUTO",
		1: "SIP_TRANSPORT_UDP",
		2: "SIP_TRANSPORT_TCP",
		3: "SIP_TRANSPORT_TLS",
	}
	SIPTransport_value = map[string]int32{
		"SIP_TRANSPORT_AUTO": 0,
		"SIP_TRANSPORT_UDP":  1,
		"SIP_TRANSPORT_TCP":  2,
		"SIP_TRANSPORT_TLS":  3,
	}
)

func (x SIPTransport) Enum() *SIPTransport {
	p := new(SIPTransport)
	*p = x
	return p
}

func (x SIPTransport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SIPTransport) Descriptor() protoreflect.EnumDescriptor {
	return file_livekit_sip_proto_enumTypes[0].Descriptor()
}

func (SIPTransport) Type() protoreflect.EnumType {
	return &file_livekit_sip_proto_enumTypes[0]
}

func (x SIPTransport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SIPTransport.Descriptor instead.
func (SIPTransport) EnumDescriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{0}
}

type SIPHeaderOptions int32

const (
	SIPHeaderOptions_SIP_NO_HEADERS  SIPHeaderOptions = 0 // do not map any headers, except ones mapped explicitly
	SIPHeaderOptions_SIP_X_HEADERS   SIPHeaderOptions = 1 // map all X-* headers to sip.h.x-* attributes
	SIPHeaderOptions_SIP_ALL_HEADERS SIPHeaderOptions = 2 // map all headers to sip.h.* attributes
)

// Enum value maps for SIPHeaderOptions.
var (
	SIPHeaderOptions_name = map[int32]string{
		0: "SIP_NO_HEADERS",
		1: "SIP_X_HEADERS",
		2: "SIP_ALL_HEADERS",
	}
	SIPHeaderOptions_value = map[string]int32{
		"SIP_NO_HEADERS":  0,
		"SIP_X_HEADERS":   1,
		"SIP_ALL_HEADERS": 2,
	}
)

func (x SIPHeaderOptions) Enum() *SIPHeaderOptions {
	p := new(SIPHeaderOptions)
	*p = x
	return p
}

func (x SIPHeaderOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SIPHeaderOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_livekit_sip_proto_enumTypes[1].Descriptor()
}

func (SIPHeaderOptions) Type() protoreflect.EnumType {
	return &file_livekit_sip_proto_enumTypes[1]
}

func (x SIPHeaderOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SIPHeaderOptions.Descriptor instead.
func (SIPHeaderOptions) EnumDescriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{1}
}

type SIPMediaEncryption int32

const (
	SIPMediaEncryption_SIP_MEDIA_ENCRYPT_DISABLE SIPMediaEncryption = 0 // do not enable encryption
	SIPMediaEncryption_SIP_MEDIA_ENCRYPT_ALLOW   SIPMediaEncryption = 1 // use encryption if available
	SIPMediaEncryption_SIP_MEDIA_ENCRYPT_REQUIRE SIPMediaEncryption = 2 // require encryption
)

// Enum value maps for SIPMediaEncryption.
var (
	SIPMediaEncryption_name = map[int32]string{
		0: "SIP_MEDIA_ENCRYPT_DISABLE",
		1: "SIP_MEDIA_ENCRYPT_ALLOW",
		2: "SIP_MEDIA_ENCRYPT_REQUIRE",
	}
	SIPMediaEncryption_value = map[string]int32{
		"SIP_MEDIA_ENCRYPT_DISABLE": 0,
		"SIP_MEDIA_ENCRYPT_ALLOW":   1,
		"SIP_MEDIA_ENCRYPT_REQUIRE": 2,
	}
)

func (x SIPMediaEncryption) Enum() *SIPMediaEncryption {
	p := new(SIPMediaEncryption)
	*p = x
	return p
}

func (x SIPMediaEncryption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SIPMediaEncryption) Descriptor() protoreflect.EnumDescriptor {
	return file_livekit_sip_proto_enumTypes[2].Descriptor()
}

func (SIPMediaEncryption) Type() protoreflect.EnumType {
	return &file_livekit_sip_proto_enumTypes[2]
}

func (x SIPMediaEncryption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SIPMediaEncryption.Descriptor instead.
func (SIPMediaEncryption) EnumDescriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{2}
}

type SIPCallStatus int32

const (
	SIPCallStatus_SCS_CALL_INCOMING      SIPCallStatus = 0 // Incoming call is being handled by the SIP service. The SIP participant hasn't joined a LiveKit room yet
	SIPCallStatus_SCS_PARTICIPANT_JOINED SIPCallStatus = 1 // SIP participant for outgoing call has been created. The SIP outgoing call is being established
	SIPCallStatus_SCS_ACTIVE             SIPCallStatus = 2 // Call is ongoing. SIP participant is active in the LiveKit room
	SIPCallStatus_SCS_DISCONNECTED       SIPCallStatus = 3 // Call has ended
	SIPCallStatus_SCS_ERROR              SIPCallStatus = 4 // Call has ended or never succeeded because of an error
)

// Enum value maps for SIPCallStatus.
var (
	SIPCallStatus_name = map[int32]string{
		0: "SCS_CALL_INCOMING",
		1: "SCS_PARTICIPANT_JOINED",
		2: "SCS_ACTIVE",
		3: "SCS_DISCONNECTED",
		4: "SCS_ERROR",
	}
	SIPCallStatus_value = map[string]int32{
		"SCS_CALL_INCOMING":      0,
		"SCS_PARTICIPANT_JOINED": 1,
		"SCS_ACTIVE":             2,
		"SCS_DISCONNECTED":       3,
		"SCS_ERROR":              4,
	}
)

func (x SIPCallStatus) Enum() *SIPCallStatus {
	p := new(SIPCallStatus)
	*p = x
	return p
}

func (x SIPCallStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SIPCallStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_livekit_sip_proto_enumTypes[3].Descriptor()
}

func (SIPCallStatus) Type() protoreflect.EnumType {
	return &file_livekit_sip_proto_enumTypes[3]
}

func (x SIPCallStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SIPCallStatus.Descriptor instead.
func (SIPCallStatus) EnumDescriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{3}
}

type SIPFeature int32

const (
	SIPFeature_NONE          SIPFeature = 0
	SIPFeature_KRISP_ENABLED SIPFeature = 1
)

// Enum value maps for SIPFeature.
var (
	SIPFeature_name = map[int32]string{
		0: "NONE",
		1: "KRISP_ENABLED",
	}
	SIPFeature_value = map[string]int32{
		"NONE":          0,
		"KRISP_ENABLED": 1,
	}
)

func (x SIPFeature) Enum() *SIPFeature {
	p := new(SIPFeature)
	*p = x
	return p
}

func (x SIPFeature) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SIPFeature) Descriptor() protoreflect.EnumDescriptor {
	return file_livekit_sip_proto_enumTypes[4].Descriptor()
}

func (SIPFeature) Type() protoreflect.EnumType {
	return &file_livekit_sip_proto_enumTypes[4]
}

func (x SIPFeature) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SIPFeature.Descriptor instead.
func (SIPFeature) EnumDescriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{4}
}

type SIPTrunkInfo_TrunkKind int32

const (
	SIPTrunkInfo_TRUNK_LEGACY   SIPTrunkInfo_TrunkKind = 0
	SIPTrunkInfo_TRUNK_INBOUND  SIPTrunkInfo_TrunkKind = 1
	SIPTrunkInfo_TRUNK_OUTBOUND SIPTrunkInfo_TrunkKind = 2
)

// Enum value maps for SIPTrunkInfo_TrunkKind.
var (
	SIPTrunkInfo_TrunkKind_name = map[int32]string{
		0: "TRUNK_LEGACY",
		1: "TRUNK_INBOUND",
		2: "TRUNK_OUTBOUND",
	}
	SIPTrunkInfo_TrunkKind_value = map[string]int32{
		"TRUNK_LEGACY":   0,
		"TRUNK_INBOUND":  1,
		"TRUNK_OUTBOUND": 2,
	}
)

func (x SIPTrunkInfo_TrunkKind) Enum() *SIPTrunkInfo_TrunkKind {
	p := new(SIPTrunkInfo_TrunkKind)
	*p = x
	return p
}

func (x SIPTrunkInfo_TrunkKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SIPTrunkInfo_TrunkKind) Descriptor() protoreflect.EnumDescriptor {
	return file_livekit_sip_proto_enumTypes[5].Descriptor()
}

func (SIPTrunkInfo_TrunkKind) Type() protoreflect.EnumType {
	return &file_livekit_sip_proto_enumTypes[5]
}

func (x SIPTrunkInfo_TrunkKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SIPTrunkInfo_TrunkKind.Descriptor instead.
func (SIPTrunkInfo_TrunkKind) EnumDescriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{1, 0}
}

// Deprecated: Marked as deprecated in livekit_sip.proto.
type CreateSIPTrunkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CIDR or IPs that traffic is accepted from
	// An empty list means all inbound traffic is accepted.
	InboundAddresses []string `protobuf:"bytes,1,rep,name=inbound_addresses,json=inboundAddresses,proto3" json:"inbound_addresses,omitempty"`
	// IP that SIP INVITE is sent too
	OutboundAddress string `protobuf:"bytes,2,opt,name=outbound_address,json=outboundAddress,proto3" json:"outbound_address,omitempty"`
	// Number used to make outbound calls
	OutboundNumber string `protobuf:"bytes,3,opt,name=outbound_number,json=outboundNumber,proto3" json:"outbound_number,omitempty"`
	// Deprecated: Marked as deprecated in livekit_sip.proto.
	InboundNumbersRegex []string `protobuf:"bytes,4,rep,name=inbound_numbers_regex,json=inboundNumbersRegex,proto3" json:"inbound_numbers_regex,omitempty"`
	// Accepted `To` values. This Trunk will only accept a call made to
	// these numbers. This allows you to have distinct Trunks for different phone
	// numbers at the same provider.
	InboundNumbers []string `protobuf:"bytes,9,rep,name=inbound_numbers,json=inboundNumbers,proto3" json:"inbound_numbers,omitempty"`
	// Username and password used to authenticate inbound and outbound SIP invites
	// May be empty to have no Authentication
	InboundUsername  string `protobuf:"bytes,5,opt,name=inbound_username,json=inboundUsername,proto3" json:"inbound_username,omitempty"`
	InboundPassword  string `protobuf:"bytes,6,opt,name=inbound_password,json=inboundPassword,proto3" json:"inbound_password,omitempty"`
	OutboundUsername string `protobuf:"bytes,7,opt,name=outbound_username,json=outboundUsername,proto3" json:"outbound_username,omitempty"`
	OutboundPassword string `protobuf:"bytes,8,opt,name=outbound_password,json=outboundPassword,proto3" json:"outbound_password,omitempty"`
	// Optional human-readable name for the Trunk.
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// Optional user-defined metadata for the Trunk.
	Metadata      string `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSIPTrunkRequest) Reset() {
	*x = CreateSIPTrunkRequest{}
	mi := &file_livekit_sip_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSIPTrunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSIPTrunkRequest) ProtoMessage() {}

func (x *CreateSIPTrunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSIPTrunkRequest.ProtoReflect.Descriptor instead.
func (*CreateSIPTrunkRequest) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSIPTrunkRequest) GetInboundAddresses() []string {
	if x != nil {
		return x.InboundAddresses
	}
	return nil
}

func (x *CreateSIPTrunkRequest) GetOutboundAddress() string {
	if x != nil {
		return x.OutboundAddress
	}
	return ""
}

func (x *CreateSIPTrunkRequest) GetOutboundNumber() string {
	if x != nil {
		return x.OutboundNumber
	}
	return ""
}

// Deprecated: Marked as deprecated in livekit_sip.proto.
func (x *CreateSIPTrunkRequest) GetInboundNumbersRegex() []string {
	if x != nil {
		return x.InboundNumbersRegex
	}
	return nil
}

func (x *CreateSIPTrunkRequest) GetInboundNumbers() []string {
	if x != nil {
		return x.InboundNumbers
	}
	return nil
}

func (x *CreateSIPTrunkRequest) GetInboundUsername() string {
	if x != nil {
		return x.InboundUsername
	}
	return ""
}

func (x *CreateSIPTrunkRequest) GetInboundPassword() string {
	if x != nil {
		return x.InboundPassword
	}
	return ""
}

func (x *CreateSIPTrunkRequest) GetOutboundUsername() string {
	if x != nil {
		return x.OutboundUsername
	}
	return ""
}

func (x *CreateSIPTrunkRequest) GetOutboundPassword() string {
	if x != nil {
		return x.OutboundPassword
	}
	return ""
}

func (x *CreateSIPTrunkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSIPTrunkRequest) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

// Deprecated: Marked as deprecated in livekit_sip.proto.
type SIPTrunkInfo struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	SipTrunkId string                 `protobuf:"bytes,1,opt,name=sip_trunk_id,json=sipTrunkId,proto3" json:"sip_trunk_id,omitempty"`
	Kind       SIPTrunkInfo_TrunkKind `protobuf:"varint,14,opt,name=kind,proto3,enum=livekit.SIPTrunkInfo_TrunkKind" json:"kind,omitempty"`
	// CIDR or IPs that traffic is accepted from
	// An empty list means all inbound traffic is accepted.
	InboundAddresses []string `protobuf:"bytes,2,rep,name=inbound_addresses,json=inboundAddresses,proto3" json:"inbound_addresses,omitempty"`
	// IP that SIP INVITE is sent too
	OutboundAddress string `protobuf:"bytes,3,opt,name=outbound_address,json=outboundAddress,proto3" json:"outbound_address,omitempty"`
	// Number used to make outbound calls
	OutboundNumber string `protobuf:"bytes,4,opt,name=outbound_number,json=outboundNumber,proto3" json:"outbound_number,omitempty"`
	// Transport used for inbound and outbound calls.
	Transport SIPTransport `protobuf:"varint,13,opt,name=transport,proto3,enum=livekit.SIPTransport" json:"transport,omitempty"`
	// Deprecated: Marked as deprecated in livekit_sip.proto.
	InboundNumbersRegex []string `protobuf:"bytes,5,rep,name=inbound_numbers_regex,json=inboundNumbersRegex,proto3" json:"inbound_numbers_regex,omitempty"`
	// Accepted `To` values. This Trunk will only accept a call made to
	// these numbers. This allows you to have distinct Trunks for different phone
	// numbers at the same provider.
	InboundNumbers []string `protobuf:"bytes,10,rep,name=inbound_numbers,json=inboundNumbers,proto3" json:"inbound_numbers,omitempty"`
	// Username and password used to authenticate inbound and outbound SIP invites
	// May be empty to have no Authentication
	InboundUsername  string `protobuf:"bytes,6,opt,name=inbound_username,json=inboundUsername,proto3" json:"inbound_username,omitempty"`
	InboundPassword  string `protobuf:"bytes,7,opt,name=inbound_password,json=inboundPassword,proto3" json:"inbound_password,omitempty"`
	OutboundUsername string `protobuf:"bytes,8,opt,name=outbound_username,json=outboundUsername,proto3" json:"outbound_username,omitempty"`
	OutboundPassword string `protobuf:"bytes,9,opt,name=outbound_password,json=outboundPassword,proto3" json:"outbound_password,omitempty"`
	// Human-readable name for the Trunk.
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// User-defined metadata for the Trunk.
	Metadata      string `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SIPTrunkInfo) Reset() {
	*x = SIPTrunkInfo{}
	mi := &file_livekit_sip_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SIPTrunkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SIPTrunkInfo) ProtoMessage() {}

func (x *SIPTrunkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SIPTrunkInfo.ProtoReflect.Descriptor instead.
func (*SIPTrunkInfo) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{1}
}

func (x *SIPTrunkInfo) GetSipTrunkId() string {
	if x != nil {
		return x.SipTrunkId
	}
	return ""
}

func (x *SIPTrunkInfo) GetKind() SIPTrunkInfo_TrunkKind {
	if x != nil {
		return x.Kind
	}
	return SIPTrunkInfo_TRUNK_LEGACY
}

func (x *SIPTrunkInfo) GetInboundAddresses() []string {
	if x != nil {
		return x.InboundAddresses
	}
	return nil
}

func (x *SIPTrunkInfo) GetOutboundAddress() string {
	if x != nil {
		return x.OutboundAddress
	}
	return ""
}

func (x *SIPTrunkInfo) GetOutboundNumber() string {
	if x != nil {
		return x.OutboundNumber
	}
	return ""
}

func (x *SIPTrunkInfo) GetTransport() SIPTransport {
	if x != nil {
		return x.Transport
	}
	return SIPTransport_SIP_TRANSPORT_AUTO
}

// Deprecated: Marked as deprecated in livekit_sip.proto.
func (x *SIPTrunkInfo) GetInboundNumbersRegex() []string {
	if x != nil {
		return x.InboundNumbersRegex
	}
	return nil
}

func (x *SIPTrunkInfo) GetInboundNumbers() []string {
	if x != nil {
		return x.InboundNumbers
	}
	return nil
}

func (x *SIPTrunkInfo) GetInboundUsername() string {
	if x != nil {
		return x.InboundUsername
	}
	return ""
}

func (x *SIPTrunkInfo) GetInboundPassword() string {
	if x != nil {
		return x.InboundPassword
	}
	return ""
}

func (x *SIPTrunkInfo) GetOutboundUsername() string {
	if x != nil {
		return x.OutboundUsername
	}
	return ""
}

func (x *SIPTrunkInfo) GetOutboundPassword() string {
	if x != nil {
		return x.OutboundPassword
	}
	return ""
}

func (x *SIPTrunkInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SIPTrunkInfo) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type CreateSIPInboundTrunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trunk         *SIPInboundTrunkInfo   `protobuf:"bytes,1,opt,name=trunk,proto3" json:"trunk,omitempty"` // Trunk ID is ignored
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSIPInboundTrunkRequest) Reset() {
	*x = CreateSIPInboundTrunkRequest{}
	mi := &file_livekit_sip_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSIPInboundTrunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSIPInboundTrunkRequest) ProtoMessage() {}

func (x *CreateSIPInboundTrunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSIPInboundTrunkRequest.ProtoReflect.Descriptor instead.
func (*CreateSIPInboundTrunkRequest) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSIPInboundTrunkRequest) GetTrunk() *SIPInboundTrunkInfo {
	if x != nil {
		return x.Trunk
	}
	return nil
}

type SIPInboundTrunkInfo struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	SipTrunkId string                 `protobuf:"bytes,1,opt,name=sip_trunk_id,json=sipTrunkId,proto3" json:"sip_trunk_id,omitempty"`
	// Human-readable name for the Trunk.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// User-defined metadata for the Trunk.
	Metadata string `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Numbers associated with LiveKit SIP. The Trunk will only accept calls made to these numbers.
	// Creating multiple Trunks with different phone numbers allows having different rules for a single provider.
	Numbers []string `protobuf:"bytes,4,rep,name=numbers,proto3" json:"numbers,omitempty"`
	// CIDR or IPs that traffic is accepted from.
	// An empty list means all inbound traffic is accepted.
	AllowedAddresses []string `protobuf:"bytes,5,rep,name=allowed_addresses,json=allowedAddresses,proto3" json:"allowed_addresses,omitempty"`
	// Numbers that are allowed to make calls to this Trunk.
	// An empty list means calls from any phone number is accepted.
	AllowedNumbers []string `protobuf:"bytes,6,rep,name=allowed_numbers,json=allowedNumbers,proto3" json:"allowed_numbers,omitempty"`
	// Username and password used to authenticate inbound SIP invites.
	// May be empty to have no authentication.
	AuthUsername string `protobuf:"bytes,7,opt,name=auth_username,json=authUsername,proto3" json:"auth_username,omitempty"`
	AuthPassword string `protobuf:"bytes,8,opt,name=auth_password,json=authPassword,proto3" json:"auth_password,omitempty"`
	// Include these SIP X-* headers in 200 OK responses.
	Headers map[string]string `protobuf:"bytes,9,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Map SIP X-* headers from INVITE to SIP participant attributes.
	HeadersToAttributes map[string]string `protobuf:"bytes,10,rep,name=headers_to_attributes,json=headersToAttributes,proto3" json:"headers_to_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Map LiveKit attributes to SIP X-* headers when sending BYE or REFER requests.
	// Keys are the names of attributes and values are the names of X-* headers they will be mapped to.
	AttributesToHeaders map[string]string `protobuf:"bytes,14,rep,name=attributes_to_headers,json=attributesToHeaders,proto3" json:"attributes_to_headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Map SIP headers from INVITE to sip.h.* participant attributes automatically.
	//
	// When the names of required headers is known, using headers_to_attributes is strongly recommended.
	//
	// When mapping INVITE headers to response headers with attributes_to_headers map,
	// lowercase header names should be used, for example: sip.h.x-custom-header.
	IncludeHeaders SIPHeaderOptions `protobuf:"varint,15,opt,name=include_headers,json=includeHeaders,proto3,enum=livekit.SIPHeaderOptions" json:"include_headers,omitempty"`
	// Max time for the caller to wait for track subscription.
	RingingTimeout *durationpb.Duration `protobuf:"bytes,11,opt,name=ringing_timeout,json=ringingTimeout,proto3" json:"ringing_timeout,omitempty"`
	// Max call duration.
	MaxCallDuration *durationpb.Duration `protobuf:"bytes,12,opt,name=max_call_duration,json=maxCallDuration,proto3" json:"max_call_duration,omitempty"`
	KrispEnabled    bool                 `protobuf:"varint,13,opt,name=krisp_enabled,json=krispEnabled,proto3" json:"krisp_enabled,omitempty"`
	MediaEncryption SIPMediaEncryption   `protobuf:"varint,16,opt,name=media_encryption,json=mediaEncryption,proto3,enum=livekit.SIPMediaEncryption" json:"media_encryption,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SIPInboundTrunkInfo) Reset() {
	*x = SIPInboundTrunkInfo{}
	mi := &file_livekit_sip_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SIPInboundTrunkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SIPInboundTrunkInfo) ProtoMessage() {}

func (x *SIPInboundTrunkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SIPInboundTrunkInfo.ProtoReflect.Descriptor instead.
func (*SIPInboundTrunkInfo) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{3}
}

func (x *SIPInboundTrunkInfo) GetSipTrunkId() string {
	if x != nil {
		return x.SipTrunkId
	}
	return ""
}

func (x *SIPInboundTrunkInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SIPInboundTrunkInfo) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *SIPInboundTrunkInfo) GetNumbers() []string {
	if x != nil {
		return x.Numbers
	}
	return nil
}

func (x *SIPInboundTrunkInfo) GetAllowedAddresses() []string {
	if x != nil {
		return x.AllowedAddresses
	}
	return nil
}

func (x *SIPInboundTrunkInfo) GetAllowedNumbers() []string {
	if x != nil {
		return x.AllowedNumbers
	}
	return nil
}

func (x *SIPInboundTrunkInfo) GetAuthUsername() string {
	if x != nil {
		return x.AuthUsername
	}
	return ""
}

func (x *SIPInboundTrunkInfo) GetAuthPassword() string {
	if x != nil {
		return x.AuthPassword
	}
	return ""
}

func (x *SIPInboundTrunkInfo) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *SIPInboundTrunkInfo) GetHeadersToAttributes() map[string]string {
	if x != nil {
		return x.HeadersToAttributes
	}
	return nil
}

func (x *SIPInboundTrunkInfo) GetAttributesToHeaders() map[string]string {
	if x != nil {
		return x.AttributesToHeaders
	}
	return nil
}

func (x *SIPInboundTrunkInfo) GetIncludeHeaders() SIPHeaderOptions {
	if x != nil {
		return x.IncludeHeaders
	}
	return SIPHeaderOptions_SIP_NO_HEADERS
}

func (x *SIPInboundTrunkInfo) GetRingingTimeout() *durationpb.Duration {
	if x != nil {
		return x.RingingTimeout
	}
	return nil
}

func (x *SIPInboundTrunkInfo) GetMaxCallDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxCallDuration
	}
	return nil
}

func (x *SIPInboundTrunkInfo) GetKrispEnabled() bool {
	if x != nil {
		return x.KrispEnabled
	}
	return false
}

func (x *SIPInboundTrunkInfo) GetMediaEncryption() SIPMediaEncryption {
	if x != nil {
		return x.MediaEncryption
	}
	return SIPMediaEncryption_SIP_MEDIA_ENCRYPT_DISABLE
}

type CreateSIPOutboundTrunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trunk         *SIPOutboundTrunkInfo  `protobuf:"bytes,1,opt,name=trunk,proto3" json:"trunk,omitempty"` // Trunk ID is ignored
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSIPOutboundTrunkRequest) Reset() {
	*x = CreateSIPOutboundTrunkRequest{}
	mi := &file_livekit_sip_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSIPOutboundTrunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSIPOutboundTrunkRequest) ProtoMessage() {}

func (x *CreateSIPOutboundTrunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSIPOutboundTrunkRequest.ProtoReflect.Descriptor instead.
func (*CreateSIPOutboundTrunkRequest) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{4}
}

func (x *CreateSIPOutboundTrunkRequest) GetTrunk() *SIPOutboundTrunkInfo {
	if x != nil {
		return x.Trunk
	}
	return nil
}

type SIPOutboundTrunkInfo struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	SipTrunkId string                 `protobuf:"bytes,1,opt,name=sip_trunk_id,json=sipTrunkId,proto3" json:"sip_trunk_id,omitempty"`
	// Human-readable name for the Trunk.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// User-defined metadata for the Trunk.
	Metadata string `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Hostname or IP that SIP INVITE is sent too.
	// Note that this is not a SIP URI and should not contain the 'sip:' protocol prefix.
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// SIP Transport used for outbound call.
	Transport SIPTransport `protobuf:"varint,5,opt,name=transport,proto3,enum=livekit.SIPTransport" json:"transport,omitempty"`
	// Numbers used to make the calls. Random one from this list will be selected.
	Numbers []string `protobuf:"bytes,6,rep,name=numbers,proto3" json:"numbers,omitempty"`
	// Username and password used to authenticate with SIP server.
	// May be empty to have no authentication.
	AuthUsername string `protobuf:"bytes,7,opt,name=auth_username,json=authUsername,proto3" json:"auth_username,omitempty"`
	AuthPassword string `protobuf:"bytes,8,opt,name=auth_password,json=authPassword,proto3" json:"auth_password,omitempty"`
	// Include these SIP X-* headers in INVITE request.
	// These headers are sent as-is and may help identify this call as coming from LiveKit for the other SIP endpoint.
	Headers map[string]string `protobuf:"bytes,9,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Map SIP X-* headers from 200 OK to SIP participant attributes.
	// Keys are the names of X-* headers and values are the names of attributes they will be mapped to.
	HeadersToAttributes map[string]string `protobuf:"bytes,10,rep,name=headers_to_attributes,json=headersToAttributes,proto3" json:"headers_to_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Map LiveKit attributes to SIP X-* headers when sending BYE or REFER requests.
	// Keys are the names of attributes and values are the names of X-* headers they will be mapped to.
	AttributesToHeaders map[string]string `protobuf:"bytes,11,rep,name=attributes_to_headers,json=attributesToHeaders,proto3" json:"attributes_to_headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Map SIP headers from 200 OK to sip.h.* participant attributes automatically.
	//
	// When the names of required headers is known, using headers_to_attributes is strongly recommended.
	//
	// When mapping 200 OK headers to follow-up request headers with attributes_to_headers map,
	// lowercase header names should be used, for example: sip.h.x-custom-header.
	IncludeHeaders  SIPHeaderOptions   `protobuf:"varint,12,opt,name=include_headers,json=includeHeaders,proto3,enum=livekit.SIPHeaderOptions" json:"include_headers,omitempty"`
	MediaEncryption SIPMediaEncryption `protobuf:"varint,13,opt,name=media_encryption,json=mediaEncryption,proto3,enum=livekit.SIPMediaEncryption" json:"media_encryption,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SIPOutboundTrunkInfo) Reset() {
	*x = SIPOutboundTrunkInfo{}
	mi := &file_livekit_sip_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SIPOutboundTrunkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SIPOutboundTrunkInfo) ProtoMessage() {}

func (x *SIPOutboundTrunkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SIPOutboundTrunkInfo.ProtoReflect.Descriptor instead.
func (*SIPOutboundTrunkInfo) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{5}
}

func (x *SIPOutboundTrunkInfo) GetSipTrunkId() string {
	if x != nil {
		return x.SipTrunkId
	}
	return ""
}

func (x *SIPOutboundTrunkInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SIPOutboundTrunkInfo) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *SIPOutboundTrunkInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SIPOutboundTrunkInfo) GetTransport() SIPTransport {
	if x != nil {
		return x.Transport
	}
	return SIPTransport_SIP_TRANSPORT_AUTO
}

func (x *SIPOutboundTrunkInfo) GetNumbers() []string {
	if x != nil {
		return x.Numbers
	}
	return nil
}

func (x *SIPOutboundTrunkInfo) GetAuthUsername() string {
	if x != nil {
		return x.AuthUsername
	}
	return ""
}

func (x *SIPOutboundTrunkInfo) GetAuthPassword() string {
	if x != nil {
		return x.AuthPassword
	}
	return ""
}

func (x *SIPOutboundTrunkInfo) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *SIPOutboundTrunkInfo) GetHeadersToAttributes() map[string]string {
	if x != nil {
		return x.HeadersToAttributes
	}
	return nil
}

func (x *SIPOutboundTrunkInfo) GetAttributesToHeaders() map[string]string {
	if x != nil {
		return x.AttributesToHeaders
	}
	return nil
}

func (x *SIPOutboundTrunkInfo) GetIncludeHeaders() SIPHeaderOptions {
	if x != nil {
		return x.IncludeHeaders
	}
	return SIPHeaderOptions_SIP_NO_HEADERS
}

func (x *SIPOutboundTrunkInfo) GetMediaEncryption() SIPMediaEncryption {
	if x != nil {
		return x.MediaEncryption
	}
	return SIPMediaEncryption_SIP_MEDIA_ENCRYPT_DISABLE
}

type GetSIPInboundTrunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SipTrunkId    string                 `protobuf:"bytes,1,opt,name=sip_trunk_id,json=sipTrunkId,proto3" json:"sip_trunk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSIPInboundTrunkRequest) Reset() {
	*x = GetSIPInboundTrunkRequest{}
	mi := &file_livekit_sip_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSIPInboundTrunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSIPInboundTrunkRequest) ProtoMessage() {}

func (x *GetSIPInboundTrunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSIPInboundTrunkRequest.ProtoReflect.Descriptor instead.
func (*GetSIPInboundTrunkRequest) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{6}
}

func (x *GetSIPInboundTrunkRequest) GetSipTrunkId() string {
	if x != nil {
		return x.SipTrunkId
	}
	return ""
}

type GetSIPInboundTrunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trunk         *SIPInboundTrunkInfo   `protobuf:"bytes,1,opt,name=trunk,proto3" json:"trunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSIPInboundTrunkResponse) Reset() {
	*x = GetSIPInboundTrunkResponse{}
	mi := &file_livekit_sip_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSIPInboundTrunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSIPInboundTrunkResponse) ProtoMessage() {}

func (x *GetSIPInboundTrunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSIPInboundTrunkResponse.ProtoReflect.Descriptor instead.
func (*GetSIPInboundTrunkResponse) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{7}
}

func (x *GetSIPInboundTrunkResponse) GetTrunk() *SIPInboundTrunkInfo {
	if x != nil {
		return x.Trunk
	}
	return nil
}

type GetSIPOutboundTrunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SipTrunkId    string                 `protobuf:"bytes,1,opt,name=sip_trunk_id,json=sipTrunkId,proto3" json:"sip_trunk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSIPOutboundTrunkRequest) Reset() {
	*x = GetSIPOutboundTrunkRequest{}
	mi := &file_livekit_sip_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSIPOutboundTrunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSIPOutboundTrunkRequest) ProtoMessage() {}

func (x *GetSIPOutboundTrunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSIPOutboundTrunkRequest.ProtoReflect.Descriptor instead.
func (*GetSIPOutboundTrunkRequest) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{8}
}

func (x *GetSIPOutboundTrunkRequest) GetSipTrunkId() string {
	if x != nil {
		return x.SipTrunkId
	}
	return ""
}

type GetSIPOutboundTrunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trunk         *SIPOutboundTrunkInfo  `protobuf:"bytes,1,opt,name=trunk,proto3" json:"trunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSIPOutboundTrunkResponse) Reset() {
	*x = GetSIPOutboundTrunkResponse{}
	mi := &file_livekit_sip_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSIPOutboundTrunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSIPOutboundTrunkResponse) ProtoMessage() {}

func (x *GetSIPOutboundTrunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSIPOutboundTrunkResponse.ProtoReflect.Descriptor instead.
func (*GetSIPOutboundTrunkResponse) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{9}
}

func (x *GetSIPOutboundTrunkResponse) GetTrunk() *SIPOutboundTrunkInfo {
	if x != nil {
		return x.Trunk
	}
	return nil
}

// Deprecated: Marked as deprecated in livekit_sip.proto.
type ListSIPTrunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSIPTrunkRequest) Reset() {
	*x = ListSIPTrunkRequest{}
	mi := &file_livekit_sip_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSIPTrunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSIPTrunkRequest) ProtoMessage() {}

func (x *ListSIPTrunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSIPTrunkRequest.ProtoReflect.Descriptor instead.
func (*ListSIPTrunkRequest) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{10}
}

// Deprecated: Marked as deprecated in livekit_sip.proto.
type ListSIPTrunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*SIPTrunkInfo        `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSIPTrunkResponse) Reset() {
	*x = ListSIPTrunkResponse{}
	mi := &file_livekit_sip_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSIPTrunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSIPTrunkResponse) ProtoMessage() {}

func (x *ListSIPTrunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSIPTrunkResponse.ProtoReflect.Descriptor instead.
func (*ListSIPTrunkResponse) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{11}
}

func (x *ListSIPTrunkResponse) GetItems() []*SIPTrunkInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

// ListSIPInboundTrunkRequest lists inbound trunks for given filters. If no filters are set, all trunks are listed.
type ListSIPInboundTrunkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Trunk IDs to list. If this option is set, the response will contains trunks in the same order.
	// If any of the trunks is missing, a nil item in that position will be sent in the response.
	TrunkIds []string `protobuf:"bytes,1,rep,name=trunk_ids,json=trunkIds,proto3" json:"trunk_ids,omitempty"`
	// Only list trunks that contain one of the numbers, including wildcard trunks.
	Numbers       []string `protobuf:"bytes,2,rep,name=numbers,proto3" json:"numbers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSIPInboundTrunkRequest) Reset() {
	*x = ListSIPInboundTrunkRequest{}
	mi := &file_livekit_sip_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSIPInboundTrunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSIPInboundTrunkRequest) ProtoMessage() {}

func (x *ListSIPInboundTrunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSIPInboundTrunkRequest.ProtoReflect.Descriptor instead.
func (*ListSIPInboundTrunkRequest) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{12}
}

func (x *ListSIPInboundTrunkRequest) GetTrunkIds() []string {
	if x != nil {
		return x.TrunkIds
	}
	return nil
}

func (x *ListSIPInboundTrunkRequest) GetNumbers() []string {
	if x != nil {
		return x.Numbers
	}
	return nil
}

type ListSIPInboundTrunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*SIPInboundTrunkInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSIPInboundTrunkResponse) Reset() {
	*x = ListSIPInboundTrunkResponse{}
	mi := &file_livekit_sip_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSIPInboundTrunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSIPInboundTrunkResponse) ProtoMessage() {}

func (x *ListSIPInboundTrunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSIPInboundTrunkResponse.ProtoReflect.Descriptor instead.
func (*ListSIPInboundTrunkResponse) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{13}
}

func (x *ListSIPInboundTrunkResponse) GetItems() []*SIPInboundTrunkInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

// ListSIPOutboundTrunkRequest lists outbound trunks for given filters. If no filters are set, all trunks are listed.
type ListSIPOutboundTrunkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Trunk IDs to list. If this option is set, the response will contains trunks in the same order.
	// If any of the trunks is missing, a nil item in that position will be sent in the response.
	TrunkIds []string `protobuf:"bytes,1,rep,name=trunk_ids,json=trunkIds,proto3" json:"trunk_ids,omitempty"`
	// Only list trunks that contain one of the numbers, including wildcard trunks.
	Numbers       []string `protobuf:"bytes,2,rep,name=numbers,proto3" json:"numbers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSIPOutboundTrunkRequest) Reset() {
	*x = ListSIPOutboundTrunkRequest{}
	mi := &file_livekit_sip_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSIPOutboundTrunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSIPOutboundTrunkRequest) ProtoMessage() {}

func (x *ListSIPOutboundTrunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSIPOutboundTrunkRequest.ProtoReflect.Descriptor instead.
func (*ListSIPOutboundTrunkRequest) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{14}
}

func (x *ListSIPOutboundTrunkRequest) GetTrunkIds() []string {
	if x != nil {
		return x.TrunkIds
	}
	return nil
}

func (x *ListSIPOutboundTrunkRequest) GetNumbers() []string {
	if x != nil {
		return x.Numbers
	}
	return nil
}

type ListSIPOutboundTrunkResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Items         []*SIPOutboundTrunkInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSIPOutboundTrunkResponse) Reset() {
	*x = ListSIPOutboundTrunkResponse{}
	mi := &file_livekit_sip_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSIPOutboundTrunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSIPOutboundTrunkResponse) ProtoMessage() {}

func (x *ListSIPOutboundTrunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSIPOutboundTrunkResponse.ProtoReflect.Descriptor instead.
func (*ListSIPOutboundTrunkResponse) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{15}
}

func (x *ListSIPOutboundTrunkResponse) GetItems() []*SIPOutboundTrunkInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type DeleteSIPTrunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SipTrunkId    string                 `protobuf:"bytes,1,opt,name=sip_trunk_id,json=sipTrunkId,proto3" json:"sip_trunk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSIPTrunkRequest) Reset() {
	*x = DeleteSIPTrunkRequest{}
	mi := &file_livekit_sip_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSIPTrunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSIPTrunkRequest) ProtoMessage() {}

func (x *DeleteSIPTrunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSIPTrunkRequest.ProtoReflect.Descriptor instead.
func (*DeleteSIPTrunkRequest) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteSIPTrunkRequest) GetSipTrunkId() string {
	if x != nil {
		return x.SipTrunkId
	}
	return ""
}

type SIPDispatchRuleDirect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// What room should call be directed into
	RoomName string `protobuf:"bytes,1,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	// Optional pin required to enter room
	Pin           string `protobuf:"bytes,2,opt,name=pin,proto3" json:"pin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SIPDispatchRuleDirect) Reset() {
	*x = SIPDispatchRuleDirect{}
	mi := &file_livekit_sip_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SIPDispatchRuleDirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SIPDispatchRuleDirect) ProtoMessage() {}

func (x *SIPDispatchRuleDirect) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SIPDispatchRuleDirect.ProtoReflect.Descriptor instead.
func (*SIPDispatchRuleDirect) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{17}
}

func (x *SIPDispatchRuleDirect) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *SIPDispatchRuleDirect) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

type SIPDispatchRuleIndividual struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Prefix used on new room name
	RoomPrefix string `protobuf:"bytes,1,opt,name=room_prefix,json=roomPrefix,proto3" json:"room_prefix,omitempty"`
	// Optional pin required to enter room
	Pin           string `protobuf:"bytes,2,opt,name=pin,proto3" json:"pin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SIPDispatchRuleIndividual) Reset() {
	*x = SIPDispatchRuleIndividual{}
	mi := &file_livekit_sip_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SIPDispatchRuleIndividual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SIPDispatchRuleIndividual) ProtoMessage() {}

func (x *SIPDispatchRuleIndividual) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SIPDispatchRuleIndividual.ProtoReflect.Descriptor instead.
func (*SIPDispatchRuleIndividual) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{18}
}

func (x *SIPDispatchRuleIndividual) GetRoomPrefix() string {
	if x != nil {
		return x.RoomPrefix
	}
	return ""
}

func (x *SIPDispatchRuleIndividual) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

type SIPDispatchRuleCallee struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Prefix used on new room name
	RoomPrefix string `protobuf:"bytes,1,opt,name=room_prefix,json=roomPrefix,proto3" json:"room_prefix,omitempty"`
	// Optional pin required to enter room
	Pin string `protobuf:"bytes,2,opt,name=pin,proto3" json:"pin,omitempty"`
	// Optionally append random suffix
	Randomize     bool `protobuf:"varint,3,opt,name=randomize,proto3" json:"randomize,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SIPDispatchRuleCallee) Reset() {
	*x = SIPDispatchRuleCallee{}
	mi := &file_livekit_sip_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SIPDispatchRuleCallee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SIPDispatchRuleCallee) ProtoMessage() {}

func (x *SIPDispatchRuleCallee) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SIPDispatchRuleCallee.ProtoReflect.Descriptor instead.
func (*SIPDispatchRuleCallee) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{19}
}

func (x *SIPDispatchRuleCallee) GetRoomPrefix() string {
	if x != nil {
		return x.RoomPrefix
	}
	return ""
}

func (x *SIPDispatchRuleCallee) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *SIPDispatchRuleCallee) GetRandomize() bool {
	if x != nil {
		return x.Randomize
	}
	return false
}

type SIPDispatchRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Rule:
	//
	//	*SIPDispatchRule_DispatchRuleDirect
	//	*SIPDispatchRule_DispatchRuleIndividual
	//	*SIPDispatchRule_DispatchRuleCallee
	Rule          isSIPDispatchRule_Rule `protobuf_oneof:"rule"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SIPDispatchRule) Reset() {
	*x = SIPDispatchRule{}
	mi := &file_livekit_sip_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SIPDispatchRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SIPDispatchRule) ProtoMessage() {}

func (x *SIPDispatchRule) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SIPDispatchRule.ProtoReflect.Descriptor instead.
func (*SIPDispatchRule) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{20}
}

func (x *SIPDispatchRule) GetRule() isSIPDispatchRule_Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *SIPDispatchRule) GetDispatchRuleDirect() *SIPDispatchRuleDirect {
	if x != nil {
		if x, ok := x.Rule.(*SIPDispatchRule_DispatchRuleDirect); ok {
			return x.DispatchRuleDirect
		}
	}
	return nil
}

func (x *SIPDispatchRule) GetDispatchRuleIndividual() *SIPDispatchRuleIndividual {
	if x != nil {
		if x, ok := x.Rule.(*SIPDispatchRule_DispatchRuleIndividual); ok {
			return x.DispatchRuleIndividual
		}
	}
	return nil
}

func (x *SIPDispatchRule) GetDispatchRuleCallee() *SIPDispatchRuleCallee {
	if x != nil {
		if x, ok := x.Rule.(*SIPDispatchRule_DispatchRuleCallee); ok {
			return x.DispatchRuleCallee
		}
	}
	return nil
}

type isSIPDispatchRule_Rule interface {
	isSIPDispatchRule_Rule()
}

type SIPDispatchRule_DispatchRuleDirect struct {
	// SIPDispatchRuleDirect is a `SIP Dispatch Rule` that puts a user directly into a room
	// This places users into an existing room. Optionally you can require a pin before a user can
	// enter the room
	DispatchRuleDirect *SIPDispatchRuleDirect `protobuf:"bytes,1,opt,name=dispatch_rule_direct,json=dispatchRuleDirect,proto3,oneof"`
}

type SIPDispatchRule_DispatchRuleIndividual struct {
	// SIPDispatchRuleIndividual is a `SIP Dispatch Rule` that creates a new room for each caller.
	DispatchRuleIndividual *SIPDispatchRuleIndividual `protobuf:"bytes,2,opt,name=dispatch_rule_individual,json=dispatchRuleIndividual,proto3,oneof"`
}

type SIPDispatchRule_DispatchRuleCallee struct {
	// SIPDispatchRuleCallee is a `SIP Dispatch Rule` that creates a new room for each callee.
	DispatchRuleCallee *SIPDispatchRuleCallee `protobuf:"bytes,3,opt,name=dispatch_rule_callee,json=dispatchRuleCallee,proto3,oneof"`
}

func (*SIPDispatchRule_DispatchRuleDirect) isSIPDispatchRule_Rule() {}

func (*SIPDispatchRule_DispatchRuleIndividual) isSIPDispatchRule_Rule() {}

func (*SIPDispatchRule_DispatchRuleCallee) isSIPDispatchRule_Rule() {}

type CreateSIPDispatchRuleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Rule  *SIPDispatchRule       `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	// What trunks are accepted for this dispatch rule
	// If empty all trunks will match this dispatch rule
	TrunkIds []string `protobuf:"bytes,2,rep,name=trunk_ids,json=trunkIds,proto3" json:"trunk_ids,omitempty"`
	// By default the From value (Phone number) is used for participant name/identity and added to attributes.
	// If true, a random value for identity will be used and numbers will be omitted from attributes.
	HidePhoneNumber bool `protobuf:"varint,3,opt,name=hide_phone_number,json=hidePhoneNumber,proto3" json:"hide_phone_number,omitempty"`
	// Dispatch Rule will only accept a call made to these numbers (if set).
	InboundNumbers []string `protobuf:"bytes,6,rep,name=inbound_numbers,json=inboundNumbers,proto3" json:"inbound_numbers,omitempty"`
	// Optional human-readable name for the Dispatch Rule.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// User-defined metadata for the Dispatch Rule.
	// Participants created by this rule will inherit this metadata.
	Metadata string `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// User-defined attributes for the Dispatch Rule.
	// Participants created by this rule will inherit these attributes.
	Attributes map[string]string `protobuf:"bytes,7,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Cloud-only, config preset to use
	RoomPreset string `protobuf:"bytes,8,opt,name=room_preset,json=roomPreset,proto3" json:"room_preset,omitempty"`
	// RoomConfiguration to use if the participant initiates the room
	RoomConfig    *RoomConfiguration `protobuf:"bytes,9,opt,name=room_config,json=roomConfig,proto3" json:"room_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSIPDispatchRuleRequest) Reset() {
	*x = CreateSIPDispatchRuleRequest{}
	mi := &file_livekit_sip_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSIPDispatchRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSIPDispatchRuleRequest) ProtoMessage() {}

func (x *CreateSIPDispatchRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSIPDispatchRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateSIPDispatchRuleRequest) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{21}
}

func (x *CreateSIPDispatchRuleRequest) GetRule() *SIPDispatchRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *CreateSIPDispatchRuleRequest) GetTrunkIds() []string {
	if x != nil {
		return x.TrunkIds
	}
	return nil
}

func (x *CreateSIPDispatchRuleRequest) GetHidePhoneNumber() bool {
	if x != nil {
		return x.HidePhoneNumber
	}
	return false
}

func (x *CreateSIPDispatchRuleRequest) GetInboundNumbers() []string {
	if x != nil {
		return x.InboundNumbers
	}
	return nil
}

func (x *CreateSIPDispatchRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSIPDispatchRuleRequest) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *CreateSIPDispatchRuleRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CreateSIPDispatchRuleRequest) GetRoomPreset() string {
	if x != nil {
		return x.RoomPreset
	}
	return ""
}

func (x *CreateSIPDispatchRuleRequest) GetRoomConfig() *RoomConfiguration {
	if x != nil {
		return x.RoomConfig
	}
	return nil
}

type SIPDispatchRuleInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SipDispatchRuleId string                 `protobuf:"bytes,1,opt,name=sip_dispatch_rule_id,json=sipDispatchRuleId,proto3" json:"sip_dispatch_rule_id,omitempty"`
	Rule              *SIPDispatchRule       `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
	TrunkIds          []string               `protobuf:"bytes,3,rep,name=trunk_ids,json=trunkIds,proto3" json:"trunk_ids,omitempty"`
	HidePhoneNumber   bool                   `protobuf:"varint,4,opt,name=hide_phone_number,json=hidePhoneNumber,proto3" json:"hide_phone_number,omitempty"`
	// Dispatch Rule will only accept a call made to these numbers (if set).
	InboundNumbers []string `protobuf:"bytes,7,rep,name=inbound_numbers,json=inboundNumbers,proto3" json:"inbound_numbers,omitempty"`
	// Human-readable name for the Dispatch Rule.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// User-defined metadata for the Dispatch Rule.
	// Participants created by this rule will inherit this metadata.
	Metadata string `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// User-defined attributes for the Dispatch Rule.
	// Participants created by this rule will inherit these attributes.
	Attributes map[string]string `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Cloud-only, config preset to use
	RoomPreset string `protobuf:"bytes,9,opt,name=room_preset,json=roomPreset,proto3" json:"room_preset,omitempty"`
	// RoomConfiguration to use if the participant initiates the room
	RoomConfig      *RoomConfiguration `protobuf:"bytes,10,opt,name=room_config,json=roomConfig,proto3" json:"room_config,omitempty"`
	KrispEnabled    bool               `protobuf:"varint,11,opt,name=krisp_enabled,json=krispEnabled,proto3" json:"krisp_enabled,omitempty"`
	MediaEncryption SIPMediaEncryption `protobuf:"varint,12,opt,name=media_encryption,json=mediaEncryption,proto3,enum=livekit.SIPMediaEncryption" json:"media_encryption,omitempty"` // NEXT ID: 13
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SIPDispatchRuleInfo) Reset() {
	*x = SIPDispatchRuleInfo{}
	mi := &file_livekit_sip_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SIPDispatchRuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SIPDispatchRuleInfo) ProtoMessage() {}

func (x *SIPDispatchRuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SIPDispatchRuleInfo.ProtoReflect.Descriptor instead.
func (*SIPDispatchRuleInfo) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{22}
}

func (x *SIPDispatchRuleInfo) GetSipDispatchRuleId() string {
	if x != nil {
		return x.SipDispatchRuleId
	}
	return ""
}

func (x *SIPDispatchRuleInfo) GetRule() *SIPDispatchRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *SIPDispatchRuleInfo) GetTrunkIds() []string {
	if x != nil {
		return x.TrunkIds
	}
	return nil
}

func (x *SIPDispatchRuleInfo) GetHidePhoneNumber() bool {
	if x != nil {
		return x.HidePhoneNumber
	}
	return false
}

func (x *SIPDispatchRuleInfo) GetInboundNumbers() []string {
	if x != nil {
		return x.InboundNumbers
	}
	return nil
}

func (x *SIPDispatchRuleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SIPDispatchRuleInfo) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *SIPDispatchRuleInfo) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *SIPDispatchRuleInfo) GetRoomPreset() string {
	if x != nil {
		return x.RoomPreset
	}
	return ""
}

func (x *SIPDispatchRuleInfo) GetRoomConfig() *RoomConfiguration {
	if x != nil {
		return x.RoomConfig
	}
	return nil
}

func (x *SIPDispatchRuleInfo) GetKrispEnabled() bool {
	if x != nil {
		return x.KrispEnabled
	}
	return false
}

func (x *SIPDispatchRuleInfo) GetMediaEncryption() SIPMediaEncryption {
	if x != nil {
		return x.MediaEncryption
	}
	return SIPMediaEncryption_SIP_MEDIA_ENCRYPT_DISABLE
}

// ListSIPDispatchRuleRequest lists dispatch rules for given filters. If no filters are set, all rules are listed.
type ListSIPDispatchRuleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Rule IDs to list. If this option is set, the response will contains rules in the same order.
	// If any of the rules is missing, a nil item in that position will be sent in the response.
	DispatchRuleIds []string `protobuf:"bytes,1,rep,name=dispatch_rule_ids,json=dispatchRuleIds,proto3" json:"dispatch_rule_ids,omitempty"`
	// Only list rules that contain one of the Trunk IDs, including wildcard rules.
	TrunkIds      []string `protobuf:"bytes,2,rep,name=trunk_ids,json=trunkIds,proto3" json:"trunk_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSIPDispatchRuleRequest) Reset() {
	*x = ListSIPDispatchRuleRequest{}
	mi := &file_livekit_sip_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSIPDispatchRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSIPDispatchRuleRequest) ProtoMessage() {}

func (x *ListSIPDispatchRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSIPDispatchRuleRequest.ProtoReflect.Descriptor instead.
func (*ListSIPDispatchRuleRequest) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{23}
}

func (x *ListSIPDispatchRuleRequest) GetDispatchRuleIds() []string {
	if x != nil {
		return x.DispatchRuleIds
	}
	return nil
}

func (x *ListSIPDispatchRuleRequest) GetTrunkIds() []string {
	if x != nil {
		return x.TrunkIds
	}
	return nil
}

type ListSIPDispatchRuleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*SIPDispatchRuleInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSIPDispatchRuleResponse) Reset() {
	*x = ListSIPDispatchRuleResponse{}
	mi := &file_livekit_sip_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSIPDispatchRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSIPDispatchRuleResponse) ProtoMessage() {}

func (x *ListSIPDispatchRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSIPDispatchRuleResponse.ProtoReflect.Descriptor instead.
func (*ListSIPDispatchRuleResponse) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{24}
}

func (x *ListSIPDispatchRuleResponse) GetItems() []*SIPDispatchRuleInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type DeleteSIPDispatchRuleRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SipDispatchRuleId string                 `protobuf:"bytes,1,opt,name=sip_dispatch_rule_id,json=sipDispatchRuleId,proto3" json:"sip_dispatch_rule_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DeleteSIPDispatchRuleRequest) Reset() {
	*x = DeleteSIPDispatchRuleRequest{}
	mi := &file_livekit_sip_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSIPDispatchRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSIPDispatchRuleRequest) ProtoMessage() {}

func (x *DeleteSIPDispatchRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSIPDispatchRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteSIPDispatchRuleRequest) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteSIPDispatchRuleRequest) GetSipDispatchRuleId() string {
	if x != nil {
		return x.SipDispatchRuleId
	}
	return ""
}

// A SIP Participant is a singular SIP session connected to a LiveKit room via
// a SIP Trunk into a SIP DispatchRule
type CreateSIPParticipantRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// What SIP Trunk should be used to dial the user
	SipTrunkId string `protobuf:"bytes,1,opt,name=sip_trunk_id,json=sipTrunkId,proto3" json:"sip_trunk_id,omitempty"`
	// What number should be dialed via SIP
	SipCallTo string `protobuf:"bytes,2,opt,name=sip_call_to,json=sipCallTo,proto3" json:"sip_call_to,omitempty"`
	// Optional SIP From number to use. If empty, trunk number is used.
	SipNumber string `protobuf:"bytes,15,opt,name=sip_number,json=sipNumber,proto3" json:"sip_number,omitempty"`
	// What LiveKit room should this participant be connected too
	RoomName string `protobuf:"bytes,3,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	// Optional identity of the participant in LiveKit room
	ParticipantIdentity string `protobuf:"bytes,4,opt,name=participant_identity,json=participantIdentity,proto3" json:"participant_identity,omitempty"`
	// Optional name of the participant in LiveKit room
	ParticipantName string `protobuf:"bytes,7,opt,name=participant_name,json=participantName,proto3" json:"participant_name,omitempty"`
	// Optional user-defined metadata. Will be attached to a created Participant in the room.
	ParticipantMetadata string `protobuf:"bytes,8,opt,name=participant_metadata,json=participantMetadata,proto3" json:"participant_metadata,omitempty"`
	// Optional user-defined attributes. Will be attached to a created Participant in the room.
	ParticipantAttributes map[string]string `protobuf:"bytes,9,rep,name=participant_attributes,json=participantAttributes,proto3" json:"participant_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Optionally send following DTMF digits (extension codes) when making a call.
	// Character 'w' can be used to add a 0.5 sec delay.
	Dtmf string `protobuf:"bytes,5,opt,name=dtmf,proto3" json:"dtmf,omitempty"`
	// Optionally play dialtone in the room as an audible indicator for existing participants. The `play_ringtone` option is deprectated but has the same effect.
	//
	// Deprecated: Marked as deprecated in livekit_sip.proto.
	PlayRingtone bool `protobuf:"varint,6,opt,name=play_ringtone,json=playRingtone,proto3" json:"play_ringtone,omitempty"`
	PlayDialtone bool `protobuf:"varint,13,opt,name=play_dialtone,json=playDialtone,proto3" json:"play_dialtone,omitempty"`
	// By default the From value (Phone number) is used for participant name/identity (if not set) and added to attributes.
	// If true, a random value for identity will be used and numbers will be omitted from attributes.
	HidePhoneNumber bool `protobuf:"varint,10,opt,name=hide_phone_number,json=hidePhoneNumber,proto3" json:"hide_phone_number,omitempty"`
	// These headers are sent as-is and may help identify this call as coming from LiveKit for the other SIP endpoint.
	Headers map[string]string `protobuf:"bytes,16,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Map SIP headers from 200 OK to sip.h.* participant attributes automatically.
	//
	// When the names of required headers is known, using headers_to_attributes is strongly recommended.
	//
	// When mapping 200 OK headers to follow-up request headers with attributes_to_headers map,
	// lowercase header names should be used, for example: sip.h.x-custom-header.
	IncludeHeaders SIPHeaderOptions `protobuf:"varint,17,opt,name=include_headers,json=includeHeaders,proto3,enum=livekit.SIPHeaderOptions" json:"include_headers,omitempty"`
	// Max time for the callee to answer the call.
	RingingTimeout *durationpb.Duration `protobuf:"bytes,11,opt,name=ringing_timeout,json=ringingTimeout,proto3" json:"ringing_timeout,omitempty"`
	// Max call duration.
	MaxCallDuration *durationpb.Duration `protobuf:"bytes,12,opt,name=max_call_duration,json=maxCallDuration,proto3" json:"max_call_duration,omitempty"`
	// Enable voice isolation for the callee.
	KrispEnabled    bool               `protobuf:"varint,14,opt,name=krisp_enabled,json=krispEnabled,proto3" json:"krisp_enabled,omitempty"`
	MediaEncryption SIPMediaEncryption `protobuf:"varint,18,opt,name=media_encryption,json=mediaEncryption,proto3,enum=livekit.SIPMediaEncryption" json:"media_encryption,omitempty"` // NEXT ID: 19
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateSIPParticipantRequest) Reset() {
	*x = CreateSIPParticipantRequest{}
	mi := &file_livekit_sip_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSIPParticipantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSIPParticipantRequest) ProtoMessage() {}

func (x *CreateSIPParticipantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSIPParticipantRequest.ProtoReflect.Descriptor instead.
func (*CreateSIPParticipantRequest) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{26}
}

func (x *CreateSIPParticipantRequest) GetSipTrunkId() string {
	if x != nil {
		return x.SipTrunkId
	}
	return ""
}

func (x *CreateSIPParticipantRequest) GetSipCallTo() string {
	if x != nil {
		return x.SipCallTo
	}
	return ""
}

func (x *CreateSIPParticipantRequest) GetSipNumber() string {
	if x != nil {
		return x.SipNumber
	}
	return ""
}

func (x *CreateSIPParticipantRequest) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *CreateSIPParticipantRequest) GetParticipantIdentity() string {
	if x != nil {
		return x.ParticipantIdentity
	}
	return ""
}

func (x *CreateSIPParticipantRequest) GetParticipantName() string {
	if x != nil {
		return x.ParticipantName
	}
	return ""
}

func (x *CreateSIPParticipantRequest) GetParticipantMetadata() string {
	if x != nil {
		return x.ParticipantMetadata
	}
	return ""
}

func (x *CreateSIPParticipantRequest) GetParticipantAttributes() map[string]string {
	if x != nil {
		return x.ParticipantAttributes
	}
	return nil
}

func (x *CreateSIPParticipantRequest) GetDtmf() string {
	if x != nil {
		return x.Dtmf
	}
	return ""
}

// Deprecated: Marked as deprecated in livekit_sip.proto.
func (x *CreateSIPParticipantRequest) GetPlayRingtone() bool {
	if x != nil {
		return x.PlayRingtone
	}
	return false
}

func (x *CreateSIPParticipantRequest) GetPlayDialtone() bool {
	if x != nil {
		return x.PlayDialtone
	}
	return false
}

func (x *CreateSIPParticipantRequest) GetHidePhoneNumber() bool {
	if x != nil {
		return x.HidePhoneNumber
	}
	return false
}

func (x *CreateSIPParticipantRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *CreateSIPParticipantRequest) GetIncludeHeaders() SIPHeaderOptions {
	if x != nil {
		return x.IncludeHeaders
	}
	return SIPHeaderOptions_SIP_NO_HEADERS
}

func (x *CreateSIPParticipantRequest) GetRingingTimeout() *durationpb.Duration {
	if x != nil {
		return x.RingingTimeout
	}
	return nil
}

func (x *CreateSIPParticipantRequest) GetMaxCallDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxCallDuration
	}
	return nil
}

func (x *CreateSIPParticipantRequest) GetKrispEnabled() bool {
	if x != nil {
		return x.KrispEnabled
	}
	return false
}

func (x *CreateSIPParticipantRequest) GetMediaEncryption() SIPMediaEncryption {
	if x != nil {
		return x.MediaEncryption
	}
	return SIPMediaEncryption_SIP_MEDIA_ENCRYPT_DISABLE
}

type SIPParticipantInfo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ParticipantId       string                 `protobuf:"bytes,1,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	ParticipantIdentity string                 `protobuf:"bytes,2,opt,name=participant_identity,json=participantIdentity,proto3" json:"participant_identity,omitempty"`
	RoomName            string                 `protobuf:"bytes,3,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	SipCallId           string                 `protobuf:"bytes,4,opt,name=sip_call_id,json=sipCallId,proto3" json:"sip_call_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SIPParticipantInfo) Reset() {
	*x = SIPParticipantInfo{}
	mi := &file_livekit_sip_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SIPParticipantInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SIPParticipantInfo) ProtoMessage() {}

func (x *SIPParticipantInfo) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SIPParticipantInfo.ProtoReflect.Descriptor instead.
func (*SIPParticipantInfo) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{27}
}

func (x *SIPParticipantInfo) GetParticipantId() string {
	if x != nil {
		return x.ParticipantId
	}
	return ""
}

func (x *SIPParticipantInfo) GetParticipantIdentity() string {
	if x != nil {
		return x.ParticipantIdentity
	}
	return ""
}

func (x *SIPParticipantInfo) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *SIPParticipantInfo) GetSipCallId() string {
	if x != nil {
		return x.SipCallId
	}
	return ""
}

type TransferSIPParticipantRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ParticipantIdentity string                 `protobuf:"bytes,1,opt,name=participant_identity,json=participantIdentity,proto3" json:"participant_identity,omitempty"`
	RoomName            string                 `protobuf:"bytes,2,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	TransferTo          string                 `protobuf:"bytes,3,opt,name=transfer_to,json=transferTo,proto3" json:"transfer_to,omitempty"`
	// Optionally play dialtone to the SIP participant as an audible indicator of being transferred
	PlayDialtone bool `protobuf:"varint,4,opt,name=play_dialtone,json=playDialtone,proto3" json:"play_dialtone,omitempty"`
	// Add the following headers to the REFER SIP request.
	Headers       map[string]string `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferSIPParticipantRequest) Reset() {
	*x = TransferSIPParticipantRequest{}
	mi := &file_livekit_sip_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferSIPParticipantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferSIPParticipantRequest) ProtoMessage() {}

func (x *TransferSIPParticipantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferSIPParticipantRequest.ProtoReflect.Descriptor instead.
func (*TransferSIPParticipantRequest) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{28}
}

func (x *TransferSIPParticipantRequest) GetParticipantIdentity() string {
	if x != nil {
		return x.ParticipantIdentity
	}
	return ""
}

func (x *TransferSIPParticipantRequest) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *TransferSIPParticipantRequest) GetTransferTo() string {
	if x != nil {
		return x.TransferTo
	}
	return ""
}

func (x *TransferSIPParticipantRequest) GetPlayDialtone() bool {
	if x != nil {
		return x.PlayDialtone
	}
	return false
}

func (x *TransferSIPParticipantRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

type SIPCallInfo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	CallId              string                 `protobuf:"bytes,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	TrunkId             string                 `protobuf:"bytes,2,opt,name=trunk_id,json=trunkId,proto3" json:"trunk_id,omitempty"`
	RoomName            string                 `protobuf:"bytes,3,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	RoomId              string                 `protobuf:"bytes,4,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // ID of the current/previous room published to
	ParticipantIdentity string                 `protobuf:"bytes,5,opt,name=participant_identity,json=participantIdentity,proto3" json:"participant_identity,omitempty"`
	FromUri             *SIPUri                `protobuf:"bytes,6,opt,name=from_uri,json=fromUri,proto3" json:"from_uri,omitempty"`
	ToUri               *SIPUri                `protobuf:"bytes,7,opt,name=to_uri,json=toUri,proto3" json:"to_uri,omitempty"`
	EnabledFeatures     []SIPFeature           `protobuf:"varint,14,rep,packed,name=enabled_features,json=enabledFeatures,proto3,enum=livekit.SIPFeature" json:"enabled_features,omitempty"`
	CallStatus          SIPCallStatus          `protobuf:"varint,8,opt,name=call_status,json=callStatus,proto3,enum=livekit.SIPCallStatus" json:"call_status,omitempty"`
	CreatedAt           int64                  `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	StartedAt           int64                  `protobuf:"varint,10,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt             int64                  `protobuf:"varint,11,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	DisconnectReason    DisconnectReason       `protobuf:"varint,12,opt,name=disconnect_reason,json=disconnectReason,proto3,enum=livekit.DisconnectReason" json:"disconnect_reason,omitempty"`
	Error               string                 `protobuf:"bytes,13,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SIPCallInfo) Reset() {
	*x = SIPCallInfo{}
	mi := &file_livekit_sip_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SIPCallInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SIPCallInfo) ProtoMessage() {}

func (x *SIPCallInfo) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SIPCallInfo.ProtoReflect.Descriptor instead.
func (*SIPCallInfo) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{29}
}

func (x *SIPCallInfo) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

func (x *SIPCallInfo) GetTrunkId() string {
	if x != nil {
		return x.TrunkId
	}
	return ""
}

func (x *SIPCallInfo) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *SIPCallInfo) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *SIPCallInfo) GetParticipantIdentity() string {
	if x != nil {
		return x.ParticipantIdentity
	}
	return ""
}

func (x *SIPCallInfo) GetFromUri() *SIPUri {
	if x != nil {
		return x.FromUri
	}
	return nil
}

func (x *SIPCallInfo) GetToUri() *SIPUri {
	if x != nil {
		return x.ToUri
	}
	return nil
}

func (x *SIPCallInfo) GetEnabledFeatures() []SIPFeature {
	if x != nil {
		return x.EnabledFeatures
	}
	return nil
}

func (x *SIPCallInfo) GetCallStatus() SIPCallStatus {
	if x != nil {
		return x.CallStatus
	}
	return SIPCallStatus_SCS_CALL_INCOMING
}

func (x *SIPCallInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SIPCallInfo) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *SIPCallInfo) GetEndedAt() int64 {
	if x != nil {
		return x.EndedAt
	}
	return 0
}

func (x *SIPCallInfo) GetDisconnectReason() DisconnectReason {
	if x != nil {
		return x.DisconnectReason
	}
	return DisconnectReason_UNKNOWN_REASON
}

func (x *SIPCallInfo) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SIPUri struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          string                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Host          string                 `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Ip            string                 `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Port          uint32                 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Transport     SIPTransport           `protobuf:"varint,5,opt,name=transport,proto3,enum=livekit.SIPTransport" json:"transport,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SIPUri) Reset() {
	*x = SIPUri{}
	mi := &file_livekit_sip_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SIPUri) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SIPUri) ProtoMessage() {}

func (x *SIPUri) ProtoReflect() protoreflect.Message {
	mi := &file_livekit_sip_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SIPUri.ProtoReflect.Descriptor instead.
func (*SIPUri) Descriptor() ([]byte, []int) {
	return file_livekit_sip_proto_rawDescGZIP(), []int{30}
}

func (x *SIPUri) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SIPUri) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SIPUri) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SIPUri) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SIPUri) GetTransport() SIPTransport {
	if x != nil {
		return x.Transport
	}
	return SIPTransport_SIP_TRANSPORT_AUTO
}

var File_livekit_sip_proto protoreflect.FileDescriptor

var file_livekit_sip_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x5f, 0x73, 0x69, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x03, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x49,
	0x50, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x11, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x15, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x13, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a,
	0x02, 0x18, 0x01, 0x22, 0xa6, 0x05, 0x0a, 0x0c, 0x53, 0x49, 0x50, 0x54, 0x72, 0x75, 0x6e, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x69, 0x70, 0x5f, 0x74, 0x72, 0x75, 0x6e,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x70, 0x54,
	0x72, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53,
	0x49, 0x50, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x72, 0x75, 0x6e,
	0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x36, 0x0a, 0x15, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x44, 0x0a, 0x09, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x5f, 0x4f, 0x55,
	0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x52, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05,
	0x74, 0x72, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x72, 0x75, 0x6e, 0x6b,
	0x22, 0xc4, 0x08, 0x0a, 0x13, 0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54,
	0x72, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x69, 0x70, 0x5f,
	0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x69, 0x70, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x69, 0x0a, 0x15, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x15, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49,
	0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x42, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x45, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6d,
	0x61, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x6b, 0x72, 0x69, 0x73, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6b, 0x72, 0x69, 0x73, 0x70, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3a, 0x0a, 0x0c, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x54, 0x6f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x46, 0x0a, 0x18, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x54, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x49, 0x50, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x72, 0x75, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x53, 0x49, 0x50, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x22, 0x91, 0x07,
	0x0a, 0x14, 0x53, 0x49, 0x50, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x69, 0x70, 0x5f, 0x74, 0x72,
	0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69,
	0x70, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x53, 0x49, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x44, 0x0a, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x6a, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x54, 0x6f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x6a, 0x0a,
	0x15, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a,
	0x10, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x53, 0x49, 0x50, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x46, 0x0a, 0x18, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x3d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0c, 0x73, 0x69, 0x70, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x70, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x64,
	0x22, 0x50, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x72, 0x75,
	0x6e, 0x6b, 0x22, 0x3e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x49, 0x50, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x73, 0x69, 0x70, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x70, 0x54, 0x72, 0x75, 0x6e, 0x6b,
	0x49, 0x64, 0x22, 0x52, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x49, 0x50, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x22, 0x19, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49,
	0x50, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x02, 0x18,
	0x01, 0x22, 0x47, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x54, 0x72, 0x75, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b,
	0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x53, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e,
	0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x75,
	0x6e, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22,
	0x51, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x54, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x53, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x49, 0x50, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x53, 0x49, 0x50, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x39, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x49, 0x50, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x69, 0x70, 0x5f, 0x74, 0x72,
	0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69,
	0x70, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x15, 0x53, 0x49, 0x50, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e,
	0x22, 0x4e, 0x0a, 0x19, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e,
	0x22, 0x68, 0x0a, 0x15, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x75, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x6f, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x22, 0xa1, 0x02, 0x0a, 0x0f, 0x53,
	0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x52,
	0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x12,
	0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x12, 0x5e, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53,
	0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x64, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75,
	0x61, 0x6c, 0x12, 0x52, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x65,
	0x48, 0x00, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0xe2,
	0x03, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x69,
	0x64, 0x65, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x55, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x6f,
	0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xee, 0x04, 0x0a, 0x13, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x14, 0x73,
	0x69, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x69, 0x70, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72,
	0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x72, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x69, 0x64, 0x65, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x6f,
	0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x72, 0x69, 0x73,
	0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x6b, 0x72, 0x69, 0x73, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x46, 0x0a,
	0x10, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x53, 0x49, 0x50, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x73, 0x22, 0x51, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x4f,
	0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x14, 0x73, 0x69, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x69,
	0x70, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0xc1, 0x08, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x49, 0x50, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0c, 0x73, 0x69, 0x70, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x70, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x69, 0x70, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x54,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x76,
	0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x49, 0x50, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x74, 0x6d, 0x66, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x74, 0x6d, 0x66, 0x12, 0x27, 0x0a, 0x0d, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x69, 0x6e, 0x67, 0x74,
	0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x69, 0x61, 0x6c,
	0x74, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79,
	0x44, 0x69, 0x61, 0x6c, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x69, 0x64, 0x65,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x49, 0x50, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x42, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x69, 0x6e, 0x67, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x45, 0x0a, 0x11, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x72, 0x69, 0x73, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6b, 0x72, 0x69, 0x73, 0x70, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x48, 0x0a,
	0x1a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xab, 0x01, 0x0a, 0x12, 0x53, 0x49, 0x50, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x69, 0x70, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x49,
	0x64, 0x22, 0xc0, 0x02, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x49,
	0x50, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x69, 0x61,
	0x6c, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x79, 0x44, 0x69, 0x61, 0x6c, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x49, 0x50,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x04, 0x0a, 0x0b, 0x53, 0x49, 0x50, 0x43, 0x61, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x2a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49,
	0x50, 0x55, 0x72, 0x69, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x72, 0x69, 0x12, 0x26, 0x0a,
	0x06, 0x74, 0x6f, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x55, 0x72, 0x69, 0x52, 0x05,
	0x74, 0x6f, 0x55, 0x72, 0x69, 0x12, 0x3e, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x76,
	0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x10, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x89, 0x01, 0x0a, 0x06, 0x53, 0x49, 0x50, 0x55, 0x72, 0x69,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x2a, 0x6b, 0x0a, 0x0c, 0x53, 0x49, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x49, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x49, 0x50,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x44, 0x50, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x49, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x49, 0x50, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x4c, 0x53, 0x10, 0x03, 0x2a, 0x4e,
	0x0a, 0x10, 0x53, 0x49, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x49, 0x50, 0x5f, 0x4e, 0x4f, 0x5f, 0x48, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x49, 0x50, 0x5f, 0x58, 0x5f,
	0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x49, 0x50,
	0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x53, 0x10, 0x02, 0x2a, 0x6f,
	0x0a, 0x12, 0x53, 0x49, 0x50, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x49, 0x50, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x49, 0x50, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x53, 0x49, 0x50, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x45, 0x4e,
	0x43, 0x52, 0x59, 0x50, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x10, 0x02, 0x2a,
	0x77, 0x0a, 0x0d, 0x53, 0x49, 0x50, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x43, 0x53, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x43,
	0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43, 0x53, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x43, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0x29, 0x0a, 0x0a, 0x53, 0x49, 0x50, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x52, 0x49, 0x53, 0x50, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x01, 0x32, 0xba, 0x09, 0x0a, 0x03, 0x53, 0x49, 0x50, 0x12, 0x50, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x12, 0x1c, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x54, 0x72, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x5c, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x12, 0x25, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5f, 0x0a, 0x16, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x49, 0x50, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x72, 0x75, 0x6e, 0x6b, 0x12, 0x26, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x49, 0x50, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x12, 0x22, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x53, 0x49, 0x50, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x12, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x49, 0x50, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x49, 0x50, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54,
	0x72, 0x75, 0x6e, 0x6b, 0x12, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x63, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x12, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x49,
	0x50, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x12, 0x1e, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x49, 0x50, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x53, 0x49, 0x50, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5c, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x60, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x23, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x49, 0x50, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x49, 0x50, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x6b, 0x69, 0x74, 0x2e, 0x53, 0x49, 0x50, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x53, 0x49, 0x50, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x12, 0x26, 0x2e, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x53, 0x49, 0x50, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x42, 0x46, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c,
	0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0xaa, 0x02, 0x0d, 0x4c, 0x69, 0x76, 0x65, 0x4b, 0x69,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0xea, 0x02, 0x0e, 0x4c, 0x69, 0x76, 0x65, 0x4b, 0x69,
	0x74, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_livekit_sip_proto_rawDescOnce sync.Once
	file_livekit_sip_proto_rawDescData = file_livekit_sip_proto_rawDesc
)

func file_livekit_sip_proto_rawDescGZIP() []byte {
	file_livekit_sip_proto_rawDescOnce.Do(func() {
		file_livekit_sip_proto_rawDescData = protoimpl.X.CompressGZIP(file_livekit_sip_proto_rawDescData)
	})
	return file_livekit_sip_proto_rawDescData
}

var file_livekit_sip_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_livekit_sip_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_livekit_sip_proto_goTypes = []any{
	(SIPTransport)(0),                     // 0: livekit.SIPTransport
	(SIPHeaderOptions)(0),                 // 1: livekit.SIPHeaderOptions
	(SIPMediaEncryption)(0),               // 2: livekit.SIPMediaEncryption
	(SIPCallStatus)(0),                    // 3: livekit.SIPCallStatus
	(SIPFeature)(0),                       // 4: livekit.SIPFeature
	(SIPTrunkInfo_TrunkKind)(0),           // 5: livekit.SIPTrunkInfo.TrunkKind
	(*CreateSIPTrunkRequest)(nil),         // 6: livekit.CreateSIPTrunkRequest
	(*SIPTrunkInfo)(nil),                  // 7: livekit.SIPTrunkInfo
	(*CreateSIPInboundTrunkRequest)(nil),  // 8: livekit.CreateSIPInboundTrunkRequest
	(*SIPInboundTrunkInfo)(nil),           // 9: livekit.SIPInboundTrunkInfo
	(*CreateSIPOutboundTrunkRequest)(nil), // 10: livekit.CreateSIPOutboundTrunkRequest
	(*SIPOutboundTrunkInfo)(nil),          // 11: livekit.SIPOutboundTrunkInfo
	(*GetSIPInboundTrunkRequest)(nil),     // 12: livekit.GetSIPInboundTrunkRequest
	(*GetSIPInboundTrunkResponse)(nil),    // 13: livekit.GetSIPInboundTrunkResponse
	(*GetSIPOutboundTrunkRequest)(nil),    // 14: livekit.GetSIPOutboundTrunkRequest
	(*GetSIPOutboundTrunkResponse)(nil),   // 15: livekit.GetSIPOutboundTrunkResponse
	(*ListSIPTrunkRequest)(nil),           // 16: livekit.ListSIPTrunkRequest
	(*ListSIPTrunkResponse)(nil),          // 17: livekit.ListSIPTrunkResponse
	(*ListSIPInboundTrunkRequest)(nil),    // 18: livekit.ListSIPInboundTrunkRequest
	(*ListSIPInboundTrunkResponse)(nil),   // 19: livekit.ListSIPInboundTrunkResponse
	(*ListSIPOutboundTrunkRequest)(nil),   // 20: livekit.ListSIPOutboundTrunkRequest
	(*ListSIPOutboundTrunkResponse)(nil),  // 21: livekit.ListSIPOutboundTrunkResponse
	(*DeleteSIPTrunkRequest)(nil),         // 22: livekit.DeleteSIPTrunkRequest
	(*SIPDispatchRuleDirect)(nil),         // 23: livekit.SIPDispatchRuleDirect
	(*SIPDispatchRuleIndividual)(nil),     // 24: livekit.SIPDispatchRuleIndividual
	(*SIPDispatchRuleCallee)(nil),         // 25: livekit.SIPDispatchRuleCallee
	(*SIPDispatchRule)(nil),               // 26: livekit.SIPDispatchRule
	(*CreateSIPDispatchRuleRequest)(nil),  // 27: livekit.CreateSIPDispatchRuleRequest
	(*SIPDispatchRuleInfo)(nil),           // 28: livekit.SIPDispatchRuleInfo
	(*ListSIPDispatchRuleRequest)(nil),    // 29: livekit.ListSIPDispatchRuleRequest
	(*ListSIPDispatchRuleResponse)(nil),   // 30: livekit.ListSIPDispatchRuleResponse
	(*DeleteSIPDispatchRuleRequest)(nil),  // 31: livekit.DeleteSIPDispatchRuleRequest
	(*CreateSIPParticipantRequest)(nil),   // 32: livekit.CreateSIPParticipantRequest
	(*SIPParticipantInfo)(nil),            // 33: livekit.SIPParticipantInfo
	(*TransferSIPParticipantRequest)(nil), // 34: livekit.TransferSIPParticipantRequest
	(*SIPCallInfo)(nil),                   // 35: livekit.SIPCallInfo
	(*SIPUri)(nil),                        // 36: livekit.SIPUri
	nil,                                   // 37: livekit.SIPInboundTrunkInfo.HeadersEntry
	nil,                                   // 38: livekit.SIPInboundTrunkInfo.HeadersToAttributesEntry
	nil,                                   // 39: livekit.SIPInboundTrunkInfo.AttributesToHeadersEntry
	nil,                                   // 40: livekit.SIPOutboundTrunkInfo.HeadersEntry
	nil,                                   // 41: livekit.SIPOutboundTrunkInfo.HeadersToAttributesEntry
	nil,                                   // 42: livekit.SIPOutboundTrunkInfo.AttributesToHeadersEntry
	nil,                                   // 43: livekit.CreateSIPDispatchRuleRequest.AttributesEntry
	nil,                                   // 44: livekit.SIPDispatchRuleInfo.AttributesEntry
	nil,                                   // 45: livekit.CreateSIPParticipantRequest.ParticipantAttributesEntry
	nil,                                   // 46: livekit.CreateSIPParticipantRequest.HeadersEntry
	nil,                                   // 47: livekit.TransferSIPParticipantRequest.HeadersEntry
	(*durationpb.Duration)(nil),           // 48: google.protobuf.Duration
	(*RoomConfiguration)(nil),             // 49: livekit.RoomConfiguration
	(DisconnectReason)(0),                 // 50: livekit.DisconnectReason
	(*emptypb.Empty)(nil),                 // 51: google.protobuf.Empty
}
var file_livekit_sip_proto_depIdxs = []int32{
	5,  // 0: livekit.SIPTrunkInfo.kind:type_name -> livekit.SIPTrunkInfo.TrunkKind
	0,  // 1: livekit.SIPTrunkInfo.transport:type_name -> livekit.SIPTransport
	9,  // 2: livekit.CreateSIPInboundTrunkRequest.trunk:type_name -> livekit.SIPInboundTrunkInfo
	37, // 3: livekit.SIPInboundTrunkInfo.headers:type_name -> livekit.SIPInboundTrunkInfo.HeadersEntry
	38, // 4: livekit.SIPInboundTrunkInfo.headers_to_attributes:type_name -> livekit.SIPInboundTrunkInfo.HeadersToAttributesEntry
	39, // 5: livekit.SIPInboundTrunkInfo.attributes_to_headers:type_name -> livekit.SIPInboundTrunkInfo.AttributesToHeadersEntry
	1,  // 6: livekit.SIPInboundTrunkInfo.include_headers:type_name -> livekit.SIPHeaderOptions
	48, // 7: livekit.SIPInboundTrunkInfo.ringing_timeout:type_name -> google.protobuf.Duration
	48, // 8: livekit.SIPInboundTrunkInfo.max_call_duration:type_name -> google.protobuf.Duration
	2,  // 9: livekit.SIPInboundTrunkInfo.media_encryption:type_name -> livekit.SIPMediaEncryption
	11, // 10: livekit.CreateSIPOutboundTrunkRequest.trunk:type_name -> livekit.SIPOutboundTrunkInfo
	0,  // 11: livekit.SIPOutboundTrunkInfo.transport:type_name -> livekit.SIPTransport
	40, // 12: livekit.SIPOutboundTrunkInfo.headers:type_name -> livekit.SIPOutboundTrunkInfo.HeadersEntry
	41, // 13: livekit.SIPOutboundTrunkInfo.headers_to_attributes:type_name -> livekit.SIPOutboundTrunkInfo.HeadersToAttributesEntry
	42, // 14: livekit.SIPOutboundTrunkInfo.attributes_to_headers:type_name -> livekit.SIPOutboundTrunkInfo.AttributesToHeadersEntry
	1,  // 15: livekit.SIPOutboundTrunkInfo.include_headers:type_name -> livekit.SIPHeaderOptions
	2,  // 16: livekit.SIPOutboundTrunkInfo.media_encryption:type_name -> livekit.SIPMediaEncryption
	9,  // 17: livekit.GetSIPInboundTrunkResponse.trunk:type_name -> livekit.SIPInboundTrunkInfo
	11, // 18: livekit.GetSIPOutboundTrunkResponse.trunk:type_name -> livekit.SIPOutboundTrunkInfo
	7,  // 19: livekit.ListSIPTrunkResponse.items:type_name -> livekit.SIPTrunkInfo
	9,  // 20: livekit.ListSIPInboundTrunkResponse.items:type_name -> livekit.SIPInboundTrunkInfo
	11, // 21: livekit.ListSIPOutboundTrunkResponse.items:type_name -> livekit.SIPOutboundTrunkInfo
	23, // 22: livekit.SIPDispatchRule.dispatch_rule_direct:type_name -> livekit.SIPDispatchRuleDirect
	24, // 23: livekit.SIPDispatchRule.dispatch_rule_individual:type_name -> livekit.SIPDispatchRuleIndividual
	25, // 24: livekit.SIPDispatchRule.dispatch_rule_callee:type_name -> livekit.SIPDispatchRuleCallee
	26, // 25: livekit.CreateSIPDispatchRuleRequest.rule:type_name -> livekit.SIPDispatchRule
	43, // 26: livekit.CreateSIPDispatchRuleRequest.attributes:type_name -> livekit.CreateSIPDispatchRuleRequest.AttributesEntry
	49, // 27: livekit.CreateSIPDispatchRuleRequest.room_config:type_name -> livekit.RoomConfiguration
	26, // 28: livekit.SIPDispatchRuleInfo.rule:type_name -> livekit.SIPDispatchRule
	44, // 29: livekit.SIPDispatchRuleInfo.attributes:type_name -> livekit.SIPDispatchRuleInfo.AttributesEntry
	49, // 30: livekit.SIPDispatchRuleInfo.room_config:type_name -> livekit.RoomConfiguration
	2,  // 31: livekit.SIPDispatchRuleInfo.media_encryption:type_name -> livekit.SIPMediaEncryption
	28, // 32: livekit.ListSIPDispatchRuleResponse.items:type_name -> livekit.SIPDispatchRuleInfo
	45, // 33: livekit.CreateSIPParticipantRequest.participant_attributes:type_name -> livekit.CreateSIPParticipantRequest.ParticipantAttributesEntry
	46, // 34: livekit.CreateSIPParticipantRequest.headers:type_name -> livekit.CreateSIPParticipantRequest.HeadersEntry
	1,  // 35: livekit.CreateSIPParticipantRequest.include_headers:type_name -> livekit.SIPHeaderOptions
	48, // 36: livekit.CreateSIPParticipantRequest.ringing_timeout:type_name -> google.protobuf.Duration
	48, // 37: livekit.CreateSIPParticipantRequest.max_call_duration:type_name -> google.protobuf.Duration
	2,  // 38: livekit.CreateSIPParticipantRequest.media_encryption:type_name -> livekit.SIPMediaEncryption
	47, // 39: livekit.TransferSIPParticipantRequest.headers:type_name -> livekit.TransferSIPParticipantRequest.HeadersEntry
	36, // 40: livekit.SIPCallInfo.from_uri:type_name -> livekit.SIPUri
	36, // 41: livekit.SIPCallInfo.to_uri:type_name -> livekit.SIPUri
	4,  // 42: livekit.SIPCallInfo.enabled_features:type_name -> livekit.SIPFeature
	3,  // 43: livekit.SIPCallInfo.call_status:type_name -> livekit.SIPCallStatus
	50, // 44: livekit.SIPCallInfo.disconnect_reason:type_name -> livekit.DisconnectReason
	0,  // 45: livekit.SIPUri.transport:type_name -> livekit.SIPTransport
	16, // 46: livekit.SIP.ListSIPTrunk:input_type -> livekit.ListSIPTrunkRequest
	8,  // 47: livekit.SIP.CreateSIPInboundTrunk:input_type -> livekit.CreateSIPInboundTrunkRequest
	10, // 48: livekit.SIP.CreateSIPOutboundTrunk:input_type -> livekit.CreateSIPOutboundTrunkRequest
	12, // 49: livekit.SIP.GetSIPInboundTrunk:input_type -> livekit.GetSIPInboundTrunkRequest
	14, // 50: livekit.SIP.GetSIPOutboundTrunk:input_type -> livekit.GetSIPOutboundTrunkRequest
	18, // 51: livekit.SIP.ListSIPInboundTrunk:input_type -> livekit.ListSIPInboundTrunkRequest
	20, // 52: livekit.SIP.ListSIPOutboundTrunk:input_type -> livekit.ListSIPOutboundTrunkRequest
	22, // 53: livekit.SIP.DeleteSIPTrunk:input_type -> livekit.DeleteSIPTrunkRequest
	27, // 54: livekit.SIP.CreateSIPDispatchRule:input_type -> livekit.CreateSIPDispatchRuleRequest
	29, // 55: livekit.SIP.ListSIPDispatchRule:input_type -> livekit.ListSIPDispatchRuleRequest
	31, // 56: livekit.SIP.DeleteSIPDispatchRule:input_type -> livekit.DeleteSIPDispatchRuleRequest
	32, // 57: livekit.SIP.CreateSIPParticipant:input_type -> livekit.CreateSIPParticipantRequest
	34, // 58: livekit.SIP.TransferSIPParticipant:input_type -> livekit.TransferSIPParticipantRequest
	17, // 59: livekit.SIP.ListSIPTrunk:output_type -> livekit.ListSIPTrunkResponse
	9,  // 60: livekit.SIP.CreateSIPInboundTrunk:output_type -> livekit.SIPInboundTrunkInfo
	11, // 61: livekit.SIP.CreateSIPOutboundTrunk:output_type -> livekit.SIPOutboundTrunkInfo
	13, // 62: livekit.SIP.GetSIPInboundTrunk:output_type -> livekit.GetSIPInboundTrunkResponse
	15, // 63: livekit.SIP.GetSIPOutboundTrunk:output_type -> livekit.GetSIPOutboundTrunkResponse
	19, // 64: livekit.SIP.ListSIPInboundTrunk:output_type -> livekit.ListSIPInboundTrunkResponse
	21, // 65: livekit.SIP.ListSIPOutboundTrunk:output_type -> livekit.ListSIPOutboundTrunkResponse
	7,  // 66: livekit.SIP.DeleteSIPTrunk:output_type -> livekit.SIPTrunkInfo
	28, // 67: livekit.SIP.CreateSIPDispatchRule:output_type -> livekit.SIPDispatchRuleInfo
	30, // 68: livekit.SIP.ListSIPDispatchRule:output_type -> livekit.ListSIPDispatchRuleResponse
	28, // 69: livekit.SIP.DeleteSIPDispatchRule:output_type -> livekit.SIPDispatchRuleInfo
	33, // 70: livekit.SIP.CreateSIPParticipant:output_type -> livekit.SIPParticipantInfo
	51, // 71: livekit.SIP.TransferSIPParticipant:output_type -> google.protobuf.Empty
	59, // [59:72] is the sub-list for method output_type
	46, // [46:59] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_livekit_sip_proto_init() }
func file_livekit_sip_proto_init() {
	if File_livekit_sip_proto != nil {
		return
	}
	file_livekit_models_proto_init()
	file_livekit_room_proto_init()
	file_livekit_sip_proto_msgTypes[20].OneofWrappers = []any{
		(*SIPDispatchRule_DispatchRuleDirect)(nil),
		(*SIPDispatchRule_DispatchRuleIndividual)(nil),
		(*SIPDispatchRule_DispatchRuleCallee)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_livekit_sip_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_livekit_sip_proto_goTypes,
		DependencyIndexes: file_livekit_sip_proto_depIdxs,
		EnumInfos:         file_livekit_sip_proto_enumTypes,
		MessageInfos:      file_livekit_sip_proto_msgTypes,
	}.Build()
	File_livekit_sip_proto = out.File
	file_livekit_sip_proto_rawDesc = nil
	file_livekit_sip_proto_goTypes = nil
	file_livekit_sip_proto_depIdxs = nil
}
