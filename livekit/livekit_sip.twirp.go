// Code generated by protoc-gen-twirp v8.1.3, DO NOT EDIT.
// source: livekit_sip.proto

package livekit

import context "context"
import fmt "fmt"
import http "net/http"
import io "io"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

import google_protobuf2 "google.golang.org/protobuf/types/known/emptypb"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// =============
// SIP Interface
// =============

type SIP interface {
	// rpc CreateSIPTrunk(CreateSIPTrunkRequest) returns (SIPTrunkInfo) { option deprecated = true; }; DELETED
	ListSIPTrunk(context.Context, *ListSIPTrunkRequest) (*ListSIPTrunkResponse, error)

	CreateSIPInboundTrunk(context.Context, *CreateSIPInboundTrunkRequest) (*SIPInboundTrunkInfo, error)

	CreateSIPOutboundTrunk(context.Context, *CreateSIPOutboundTrunkRequest) (*SIPOutboundTrunkInfo, error)

	GetSIPInboundTrunk(context.Context, *GetSIPInboundTrunkRequest) (*GetSIPInboundTrunkResponse, error)

	GetSIPOutboundTrunk(context.Context, *GetSIPOutboundTrunkRequest) (*GetSIPOutboundTrunkResponse, error)

	ListSIPInboundTrunk(context.Context, *ListSIPInboundTrunkRequest) (*ListSIPInboundTrunkResponse, error)

	ListSIPOutboundTrunk(context.Context, *ListSIPOutboundTrunkRequest) (*ListSIPOutboundTrunkResponse, error)

	DeleteSIPTrunk(context.Context, *DeleteSIPTrunkRequest) (*SIPTrunkInfo, error)

	CreateSIPDispatchRule(context.Context, *CreateSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error)

	ListSIPDispatchRule(context.Context, *ListSIPDispatchRuleRequest) (*ListSIPDispatchRuleResponse, error)

	DeleteSIPDispatchRule(context.Context, *DeleteSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error)

	CreateSIPParticipant(context.Context, *CreateSIPParticipantRequest) (*SIPParticipantInfo, error)

	TransferSIPParticipant(context.Context, *TransferSIPParticipantRequest) (*google_protobuf2.Empty, error)
}

// ===================
// SIP Protobuf Client
// ===================

type sIPProtobufClient struct {
	client      HTTPClient
	urls        [13]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewSIPProtobufClient creates a Protobuf client that implements the SIP interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewSIPProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) SIP {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "livekit", "SIP")
	urls := [13]string{
		serviceURL + "ListSIPTrunk",
		serviceURL + "CreateSIPInboundTrunk",
		serviceURL + "CreateSIPOutboundTrunk",
		serviceURL + "GetSIPInboundTrunk",
		serviceURL + "GetSIPOutboundTrunk",
		serviceURL + "ListSIPInboundTrunk",
		serviceURL + "ListSIPOutboundTrunk",
		serviceURL + "DeleteSIPTrunk",
		serviceURL + "CreateSIPDispatchRule",
		serviceURL + "ListSIPDispatchRule",
		serviceURL + "DeleteSIPDispatchRule",
		serviceURL + "CreateSIPParticipant",
		serviceURL + "TransferSIPParticipant",
	}

	return &sIPProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *sIPProtobufClient) ListSIPTrunk(ctx context.Context, in *ListSIPTrunkRequest) (*ListSIPTrunkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "ListSIPTrunk")
	caller := c.callListSIPTrunk
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListSIPTrunkRequest) (*ListSIPTrunkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListSIPTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListSIPTrunkRequest) when calling interceptor")
					}
					return c.callListSIPTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListSIPTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListSIPTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPProtobufClient) callListSIPTrunk(ctx context.Context, in *ListSIPTrunkRequest) (*ListSIPTrunkResponse, error) {
	out := new(ListSIPTrunkResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPProtobufClient) CreateSIPInboundTrunk(ctx context.Context, in *CreateSIPInboundTrunkRequest) (*SIPInboundTrunkInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "CreateSIPInboundTrunk")
	caller := c.callCreateSIPInboundTrunk
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateSIPInboundTrunkRequest) (*SIPInboundTrunkInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSIPInboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSIPInboundTrunkRequest) when calling interceptor")
					}
					return c.callCreateSIPInboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPInboundTrunkInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPInboundTrunkInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPProtobufClient) callCreateSIPInboundTrunk(ctx context.Context, in *CreateSIPInboundTrunkRequest) (*SIPInboundTrunkInfo, error) {
	out := new(SIPInboundTrunkInfo)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPProtobufClient) CreateSIPOutboundTrunk(ctx context.Context, in *CreateSIPOutboundTrunkRequest) (*SIPOutboundTrunkInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "CreateSIPOutboundTrunk")
	caller := c.callCreateSIPOutboundTrunk
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateSIPOutboundTrunkRequest) (*SIPOutboundTrunkInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSIPOutboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSIPOutboundTrunkRequest) when calling interceptor")
					}
					return c.callCreateSIPOutboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPOutboundTrunkInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPOutboundTrunkInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPProtobufClient) callCreateSIPOutboundTrunk(ctx context.Context, in *CreateSIPOutboundTrunkRequest) (*SIPOutboundTrunkInfo, error) {
	out := new(SIPOutboundTrunkInfo)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPProtobufClient) GetSIPInboundTrunk(ctx context.Context, in *GetSIPInboundTrunkRequest) (*GetSIPInboundTrunkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "GetSIPInboundTrunk")
	caller := c.callGetSIPInboundTrunk
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetSIPInboundTrunkRequest) (*GetSIPInboundTrunkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSIPInboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSIPInboundTrunkRequest) when calling interceptor")
					}
					return c.callGetSIPInboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSIPInboundTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSIPInboundTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPProtobufClient) callGetSIPInboundTrunk(ctx context.Context, in *GetSIPInboundTrunkRequest) (*GetSIPInboundTrunkResponse, error) {
	out := new(GetSIPInboundTrunkResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPProtobufClient) GetSIPOutboundTrunk(ctx context.Context, in *GetSIPOutboundTrunkRequest) (*GetSIPOutboundTrunkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "GetSIPOutboundTrunk")
	caller := c.callGetSIPOutboundTrunk
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetSIPOutboundTrunkRequest) (*GetSIPOutboundTrunkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSIPOutboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSIPOutboundTrunkRequest) when calling interceptor")
					}
					return c.callGetSIPOutboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSIPOutboundTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSIPOutboundTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPProtobufClient) callGetSIPOutboundTrunk(ctx context.Context, in *GetSIPOutboundTrunkRequest) (*GetSIPOutboundTrunkResponse, error) {
	out := new(GetSIPOutboundTrunkResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPProtobufClient) ListSIPInboundTrunk(ctx context.Context, in *ListSIPInboundTrunkRequest) (*ListSIPInboundTrunkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "ListSIPInboundTrunk")
	caller := c.callListSIPInboundTrunk
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListSIPInboundTrunkRequest) (*ListSIPInboundTrunkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListSIPInboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListSIPInboundTrunkRequest) when calling interceptor")
					}
					return c.callListSIPInboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListSIPInboundTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListSIPInboundTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPProtobufClient) callListSIPInboundTrunk(ctx context.Context, in *ListSIPInboundTrunkRequest) (*ListSIPInboundTrunkResponse, error) {
	out := new(ListSIPInboundTrunkResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPProtobufClient) ListSIPOutboundTrunk(ctx context.Context, in *ListSIPOutboundTrunkRequest) (*ListSIPOutboundTrunkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "ListSIPOutboundTrunk")
	caller := c.callListSIPOutboundTrunk
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListSIPOutboundTrunkRequest) (*ListSIPOutboundTrunkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListSIPOutboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListSIPOutboundTrunkRequest) when calling interceptor")
					}
					return c.callListSIPOutboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListSIPOutboundTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListSIPOutboundTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPProtobufClient) callListSIPOutboundTrunk(ctx context.Context, in *ListSIPOutboundTrunkRequest) (*ListSIPOutboundTrunkResponse, error) {
	out := new(ListSIPOutboundTrunkResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPProtobufClient) DeleteSIPTrunk(ctx context.Context, in *DeleteSIPTrunkRequest) (*SIPTrunkInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteSIPTrunk")
	caller := c.callDeleteSIPTrunk
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteSIPTrunkRequest) (*SIPTrunkInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteSIPTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteSIPTrunkRequest) when calling interceptor")
					}
					return c.callDeleteSIPTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPTrunkInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPTrunkInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPProtobufClient) callDeleteSIPTrunk(ctx context.Context, in *DeleteSIPTrunkRequest) (*SIPTrunkInfo, error) {
	out := new(SIPTrunkInfo)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPProtobufClient) CreateSIPDispatchRule(ctx context.Context, in *CreateSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "CreateSIPDispatchRule")
	caller := c.callCreateSIPDispatchRule
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSIPDispatchRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSIPDispatchRuleRequest) when calling interceptor")
					}
					return c.callCreateSIPDispatchRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPDispatchRuleInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPDispatchRuleInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPProtobufClient) callCreateSIPDispatchRule(ctx context.Context, in *CreateSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error) {
	out := new(SIPDispatchRuleInfo)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPProtobufClient) ListSIPDispatchRule(ctx context.Context, in *ListSIPDispatchRuleRequest) (*ListSIPDispatchRuleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "ListSIPDispatchRule")
	caller := c.callListSIPDispatchRule
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListSIPDispatchRuleRequest) (*ListSIPDispatchRuleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListSIPDispatchRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListSIPDispatchRuleRequest) when calling interceptor")
					}
					return c.callListSIPDispatchRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListSIPDispatchRuleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListSIPDispatchRuleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPProtobufClient) callListSIPDispatchRule(ctx context.Context, in *ListSIPDispatchRuleRequest) (*ListSIPDispatchRuleResponse, error) {
	out := new(ListSIPDispatchRuleResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPProtobufClient) DeleteSIPDispatchRule(ctx context.Context, in *DeleteSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteSIPDispatchRule")
	caller := c.callDeleteSIPDispatchRule
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteSIPDispatchRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteSIPDispatchRuleRequest) when calling interceptor")
					}
					return c.callDeleteSIPDispatchRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPDispatchRuleInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPDispatchRuleInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPProtobufClient) callDeleteSIPDispatchRule(ctx context.Context, in *DeleteSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error) {
	out := new(SIPDispatchRuleInfo)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPProtobufClient) CreateSIPParticipant(ctx context.Context, in *CreateSIPParticipantRequest) (*SIPParticipantInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "CreateSIPParticipant")
	caller := c.callCreateSIPParticipant
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateSIPParticipantRequest) (*SIPParticipantInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSIPParticipantRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSIPParticipantRequest) when calling interceptor")
					}
					return c.callCreateSIPParticipant(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPParticipantInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPParticipantInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPProtobufClient) callCreateSIPParticipant(ctx context.Context, in *CreateSIPParticipantRequest) (*SIPParticipantInfo, error) {
	out := new(SIPParticipantInfo)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[11], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPProtobufClient) TransferSIPParticipant(ctx context.Context, in *TransferSIPParticipantRequest) (*google_protobuf2.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "TransferSIPParticipant")
	caller := c.callTransferSIPParticipant
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *TransferSIPParticipantRequest) (*google_protobuf2.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TransferSIPParticipantRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TransferSIPParticipantRequest) when calling interceptor")
					}
					return c.callTransferSIPParticipant(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf2.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf2.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPProtobufClient) callTransferSIPParticipant(ctx context.Context, in *TransferSIPParticipantRequest) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[12], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ===============
// SIP JSON Client
// ===============

type sIPJSONClient struct {
	client      HTTPClient
	urls        [13]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewSIPJSONClient creates a JSON client that implements the SIP interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewSIPJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) SIP {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "livekit", "SIP")
	urls := [13]string{
		serviceURL + "ListSIPTrunk",
		serviceURL + "CreateSIPInboundTrunk",
		serviceURL + "CreateSIPOutboundTrunk",
		serviceURL + "GetSIPInboundTrunk",
		serviceURL + "GetSIPOutboundTrunk",
		serviceURL + "ListSIPInboundTrunk",
		serviceURL + "ListSIPOutboundTrunk",
		serviceURL + "DeleteSIPTrunk",
		serviceURL + "CreateSIPDispatchRule",
		serviceURL + "ListSIPDispatchRule",
		serviceURL + "DeleteSIPDispatchRule",
		serviceURL + "CreateSIPParticipant",
		serviceURL + "TransferSIPParticipant",
	}

	return &sIPJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *sIPJSONClient) ListSIPTrunk(ctx context.Context, in *ListSIPTrunkRequest) (*ListSIPTrunkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "ListSIPTrunk")
	caller := c.callListSIPTrunk
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListSIPTrunkRequest) (*ListSIPTrunkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListSIPTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListSIPTrunkRequest) when calling interceptor")
					}
					return c.callListSIPTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListSIPTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListSIPTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPJSONClient) callListSIPTrunk(ctx context.Context, in *ListSIPTrunkRequest) (*ListSIPTrunkResponse, error) {
	out := new(ListSIPTrunkResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPJSONClient) CreateSIPInboundTrunk(ctx context.Context, in *CreateSIPInboundTrunkRequest) (*SIPInboundTrunkInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "CreateSIPInboundTrunk")
	caller := c.callCreateSIPInboundTrunk
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateSIPInboundTrunkRequest) (*SIPInboundTrunkInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSIPInboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSIPInboundTrunkRequest) when calling interceptor")
					}
					return c.callCreateSIPInboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPInboundTrunkInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPInboundTrunkInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPJSONClient) callCreateSIPInboundTrunk(ctx context.Context, in *CreateSIPInboundTrunkRequest) (*SIPInboundTrunkInfo, error) {
	out := new(SIPInboundTrunkInfo)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPJSONClient) CreateSIPOutboundTrunk(ctx context.Context, in *CreateSIPOutboundTrunkRequest) (*SIPOutboundTrunkInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "CreateSIPOutboundTrunk")
	caller := c.callCreateSIPOutboundTrunk
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateSIPOutboundTrunkRequest) (*SIPOutboundTrunkInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSIPOutboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSIPOutboundTrunkRequest) when calling interceptor")
					}
					return c.callCreateSIPOutboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPOutboundTrunkInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPOutboundTrunkInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPJSONClient) callCreateSIPOutboundTrunk(ctx context.Context, in *CreateSIPOutboundTrunkRequest) (*SIPOutboundTrunkInfo, error) {
	out := new(SIPOutboundTrunkInfo)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPJSONClient) GetSIPInboundTrunk(ctx context.Context, in *GetSIPInboundTrunkRequest) (*GetSIPInboundTrunkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "GetSIPInboundTrunk")
	caller := c.callGetSIPInboundTrunk
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetSIPInboundTrunkRequest) (*GetSIPInboundTrunkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSIPInboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSIPInboundTrunkRequest) when calling interceptor")
					}
					return c.callGetSIPInboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSIPInboundTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSIPInboundTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPJSONClient) callGetSIPInboundTrunk(ctx context.Context, in *GetSIPInboundTrunkRequest) (*GetSIPInboundTrunkResponse, error) {
	out := new(GetSIPInboundTrunkResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPJSONClient) GetSIPOutboundTrunk(ctx context.Context, in *GetSIPOutboundTrunkRequest) (*GetSIPOutboundTrunkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "GetSIPOutboundTrunk")
	caller := c.callGetSIPOutboundTrunk
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetSIPOutboundTrunkRequest) (*GetSIPOutboundTrunkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSIPOutboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSIPOutboundTrunkRequest) when calling interceptor")
					}
					return c.callGetSIPOutboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSIPOutboundTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSIPOutboundTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPJSONClient) callGetSIPOutboundTrunk(ctx context.Context, in *GetSIPOutboundTrunkRequest) (*GetSIPOutboundTrunkResponse, error) {
	out := new(GetSIPOutboundTrunkResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPJSONClient) ListSIPInboundTrunk(ctx context.Context, in *ListSIPInboundTrunkRequest) (*ListSIPInboundTrunkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "ListSIPInboundTrunk")
	caller := c.callListSIPInboundTrunk
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListSIPInboundTrunkRequest) (*ListSIPInboundTrunkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListSIPInboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListSIPInboundTrunkRequest) when calling interceptor")
					}
					return c.callListSIPInboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListSIPInboundTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListSIPInboundTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPJSONClient) callListSIPInboundTrunk(ctx context.Context, in *ListSIPInboundTrunkRequest) (*ListSIPInboundTrunkResponse, error) {
	out := new(ListSIPInboundTrunkResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPJSONClient) ListSIPOutboundTrunk(ctx context.Context, in *ListSIPOutboundTrunkRequest) (*ListSIPOutboundTrunkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "ListSIPOutboundTrunk")
	caller := c.callListSIPOutboundTrunk
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListSIPOutboundTrunkRequest) (*ListSIPOutboundTrunkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListSIPOutboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListSIPOutboundTrunkRequest) when calling interceptor")
					}
					return c.callListSIPOutboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListSIPOutboundTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListSIPOutboundTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPJSONClient) callListSIPOutboundTrunk(ctx context.Context, in *ListSIPOutboundTrunkRequest) (*ListSIPOutboundTrunkResponse, error) {
	out := new(ListSIPOutboundTrunkResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPJSONClient) DeleteSIPTrunk(ctx context.Context, in *DeleteSIPTrunkRequest) (*SIPTrunkInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteSIPTrunk")
	caller := c.callDeleteSIPTrunk
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteSIPTrunkRequest) (*SIPTrunkInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteSIPTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteSIPTrunkRequest) when calling interceptor")
					}
					return c.callDeleteSIPTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPTrunkInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPTrunkInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPJSONClient) callDeleteSIPTrunk(ctx context.Context, in *DeleteSIPTrunkRequest) (*SIPTrunkInfo, error) {
	out := new(SIPTrunkInfo)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPJSONClient) CreateSIPDispatchRule(ctx context.Context, in *CreateSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "CreateSIPDispatchRule")
	caller := c.callCreateSIPDispatchRule
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSIPDispatchRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSIPDispatchRuleRequest) when calling interceptor")
					}
					return c.callCreateSIPDispatchRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPDispatchRuleInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPDispatchRuleInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPJSONClient) callCreateSIPDispatchRule(ctx context.Context, in *CreateSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error) {
	out := new(SIPDispatchRuleInfo)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPJSONClient) ListSIPDispatchRule(ctx context.Context, in *ListSIPDispatchRuleRequest) (*ListSIPDispatchRuleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "ListSIPDispatchRule")
	caller := c.callListSIPDispatchRule
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListSIPDispatchRuleRequest) (*ListSIPDispatchRuleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListSIPDispatchRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListSIPDispatchRuleRequest) when calling interceptor")
					}
					return c.callListSIPDispatchRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListSIPDispatchRuleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListSIPDispatchRuleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPJSONClient) callListSIPDispatchRule(ctx context.Context, in *ListSIPDispatchRuleRequest) (*ListSIPDispatchRuleResponse, error) {
	out := new(ListSIPDispatchRuleResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPJSONClient) DeleteSIPDispatchRule(ctx context.Context, in *DeleteSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteSIPDispatchRule")
	caller := c.callDeleteSIPDispatchRule
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteSIPDispatchRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteSIPDispatchRuleRequest) when calling interceptor")
					}
					return c.callDeleteSIPDispatchRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPDispatchRuleInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPDispatchRuleInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPJSONClient) callDeleteSIPDispatchRule(ctx context.Context, in *DeleteSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error) {
	out := new(SIPDispatchRuleInfo)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPJSONClient) CreateSIPParticipant(ctx context.Context, in *CreateSIPParticipantRequest) (*SIPParticipantInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "CreateSIPParticipant")
	caller := c.callCreateSIPParticipant
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateSIPParticipantRequest) (*SIPParticipantInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSIPParticipantRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSIPParticipantRequest) when calling interceptor")
					}
					return c.callCreateSIPParticipant(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPParticipantInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPParticipantInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPJSONClient) callCreateSIPParticipant(ctx context.Context, in *CreateSIPParticipantRequest) (*SIPParticipantInfo, error) {
	out := new(SIPParticipantInfo)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[11], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *sIPJSONClient) TransferSIPParticipant(ctx context.Context, in *TransferSIPParticipantRequest) (*google_protobuf2.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithMethodName(ctx, "TransferSIPParticipant")
	caller := c.callTransferSIPParticipant
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *TransferSIPParticipantRequest) (*google_protobuf2.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TransferSIPParticipantRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TransferSIPParticipantRequest) when calling interceptor")
					}
					return c.callTransferSIPParticipant(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf2.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf2.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *sIPJSONClient) callTransferSIPParticipant(ctx context.Context, in *TransferSIPParticipantRequest) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[12], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==================
// SIP Server Handler
// ==================

type sIPServer struct {
	SIP
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewSIPServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewSIPServer(svc SIP, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &sIPServer{
		SIP:              svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *sIPServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *sIPServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// SIPPathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const SIPPathPrefix = "/twirp/livekit.SIP/"

func (s *sIPServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "SIP")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "livekit.SIP" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "ListSIPTrunk":
		s.serveListSIPTrunk(ctx, resp, req)
		return
	case "CreateSIPInboundTrunk":
		s.serveCreateSIPInboundTrunk(ctx, resp, req)
		return
	case "CreateSIPOutboundTrunk":
		s.serveCreateSIPOutboundTrunk(ctx, resp, req)
		return
	case "GetSIPInboundTrunk":
		s.serveGetSIPInboundTrunk(ctx, resp, req)
		return
	case "GetSIPOutboundTrunk":
		s.serveGetSIPOutboundTrunk(ctx, resp, req)
		return
	case "ListSIPInboundTrunk":
		s.serveListSIPInboundTrunk(ctx, resp, req)
		return
	case "ListSIPOutboundTrunk":
		s.serveListSIPOutboundTrunk(ctx, resp, req)
		return
	case "DeleteSIPTrunk":
		s.serveDeleteSIPTrunk(ctx, resp, req)
		return
	case "CreateSIPDispatchRule":
		s.serveCreateSIPDispatchRule(ctx, resp, req)
		return
	case "ListSIPDispatchRule":
		s.serveListSIPDispatchRule(ctx, resp, req)
		return
	case "DeleteSIPDispatchRule":
		s.serveDeleteSIPDispatchRule(ctx, resp, req)
		return
	case "CreateSIPParticipant":
		s.serveCreateSIPParticipant(ctx, resp, req)
		return
	case "TransferSIPParticipant":
		s.serveTransferSIPParticipant(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *sIPServer) serveListSIPTrunk(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListSIPTrunkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListSIPTrunkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *sIPServer) serveListSIPTrunkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListSIPTrunk")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListSIPTrunkRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SIP.ListSIPTrunk
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListSIPTrunkRequest) (*ListSIPTrunkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListSIPTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListSIPTrunkRequest) when calling interceptor")
					}
					return s.SIP.ListSIPTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListSIPTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListSIPTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListSIPTrunkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListSIPTrunkResponse and nil error while calling ListSIPTrunk. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveListSIPTrunkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListSIPTrunk")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListSIPTrunkRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SIP.ListSIPTrunk
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListSIPTrunkRequest) (*ListSIPTrunkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListSIPTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListSIPTrunkRequest) when calling interceptor")
					}
					return s.SIP.ListSIPTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListSIPTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListSIPTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListSIPTrunkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListSIPTrunkResponse and nil error while calling ListSIPTrunk. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveCreateSIPInboundTrunk(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateSIPInboundTrunkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateSIPInboundTrunkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *sIPServer) serveCreateSIPInboundTrunkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateSIPInboundTrunk")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreateSIPInboundTrunkRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SIP.CreateSIPInboundTrunk
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateSIPInboundTrunkRequest) (*SIPInboundTrunkInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSIPInboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSIPInboundTrunkRequest) when calling interceptor")
					}
					return s.SIP.CreateSIPInboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPInboundTrunkInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPInboundTrunkInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SIPInboundTrunkInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SIPInboundTrunkInfo and nil error while calling CreateSIPInboundTrunk. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveCreateSIPInboundTrunkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateSIPInboundTrunk")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreateSIPInboundTrunkRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SIP.CreateSIPInboundTrunk
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateSIPInboundTrunkRequest) (*SIPInboundTrunkInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSIPInboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSIPInboundTrunkRequest) when calling interceptor")
					}
					return s.SIP.CreateSIPInboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPInboundTrunkInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPInboundTrunkInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SIPInboundTrunkInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SIPInboundTrunkInfo and nil error while calling CreateSIPInboundTrunk. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveCreateSIPOutboundTrunk(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateSIPOutboundTrunkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateSIPOutboundTrunkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *sIPServer) serveCreateSIPOutboundTrunkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateSIPOutboundTrunk")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreateSIPOutboundTrunkRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SIP.CreateSIPOutboundTrunk
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateSIPOutboundTrunkRequest) (*SIPOutboundTrunkInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSIPOutboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSIPOutboundTrunkRequest) when calling interceptor")
					}
					return s.SIP.CreateSIPOutboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPOutboundTrunkInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPOutboundTrunkInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SIPOutboundTrunkInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SIPOutboundTrunkInfo and nil error while calling CreateSIPOutboundTrunk. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveCreateSIPOutboundTrunkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateSIPOutboundTrunk")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreateSIPOutboundTrunkRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SIP.CreateSIPOutboundTrunk
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateSIPOutboundTrunkRequest) (*SIPOutboundTrunkInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSIPOutboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSIPOutboundTrunkRequest) when calling interceptor")
					}
					return s.SIP.CreateSIPOutboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPOutboundTrunkInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPOutboundTrunkInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SIPOutboundTrunkInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SIPOutboundTrunkInfo and nil error while calling CreateSIPOutboundTrunk. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveGetSIPInboundTrunk(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetSIPInboundTrunkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetSIPInboundTrunkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *sIPServer) serveGetSIPInboundTrunkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSIPInboundTrunk")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetSIPInboundTrunkRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SIP.GetSIPInboundTrunk
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetSIPInboundTrunkRequest) (*GetSIPInboundTrunkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSIPInboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSIPInboundTrunkRequest) when calling interceptor")
					}
					return s.SIP.GetSIPInboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSIPInboundTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSIPInboundTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetSIPInboundTrunkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetSIPInboundTrunkResponse and nil error while calling GetSIPInboundTrunk. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveGetSIPInboundTrunkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSIPInboundTrunk")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetSIPInboundTrunkRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SIP.GetSIPInboundTrunk
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetSIPInboundTrunkRequest) (*GetSIPInboundTrunkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSIPInboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSIPInboundTrunkRequest) when calling interceptor")
					}
					return s.SIP.GetSIPInboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSIPInboundTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSIPInboundTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetSIPInboundTrunkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetSIPInboundTrunkResponse and nil error while calling GetSIPInboundTrunk. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveGetSIPOutboundTrunk(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetSIPOutboundTrunkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetSIPOutboundTrunkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *sIPServer) serveGetSIPOutboundTrunkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSIPOutboundTrunk")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetSIPOutboundTrunkRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SIP.GetSIPOutboundTrunk
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetSIPOutboundTrunkRequest) (*GetSIPOutboundTrunkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSIPOutboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSIPOutboundTrunkRequest) when calling interceptor")
					}
					return s.SIP.GetSIPOutboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSIPOutboundTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSIPOutboundTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetSIPOutboundTrunkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetSIPOutboundTrunkResponse and nil error while calling GetSIPOutboundTrunk. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveGetSIPOutboundTrunkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetSIPOutboundTrunk")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetSIPOutboundTrunkRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SIP.GetSIPOutboundTrunk
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetSIPOutboundTrunkRequest) (*GetSIPOutboundTrunkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetSIPOutboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetSIPOutboundTrunkRequest) when calling interceptor")
					}
					return s.SIP.GetSIPOutboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetSIPOutboundTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetSIPOutboundTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetSIPOutboundTrunkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetSIPOutboundTrunkResponse and nil error while calling GetSIPOutboundTrunk. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveListSIPInboundTrunk(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListSIPInboundTrunkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListSIPInboundTrunkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *sIPServer) serveListSIPInboundTrunkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListSIPInboundTrunk")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListSIPInboundTrunkRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SIP.ListSIPInboundTrunk
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListSIPInboundTrunkRequest) (*ListSIPInboundTrunkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListSIPInboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListSIPInboundTrunkRequest) when calling interceptor")
					}
					return s.SIP.ListSIPInboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListSIPInboundTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListSIPInboundTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListSIPInboundTrunkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListSIPInboundTrunkResponse and nil error while calling ListSIPInboundTrunk. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveListSIPInboundTrunkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListSIPInboundTrunk")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListSIPInboundTrunkRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SIP.ListSIPInboundTrunk
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListSIPInboundTrunkRequest) (*ListSIPInboundTrunkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListSIPInboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListSIPInboundTrunkRequest) when calling interceptor")
					}
					return s.SIP.ListSIPInboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListSIPInboundTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListSIPInboundTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListSIPInboundTrunkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListSIPInboundTrunkResponse and nil error while calling ListSIPInboundTrunk. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveListSIPOutboundTrunk(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListSIPOutboundTrunkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListSIPOutboundTrunkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *sIPServer) serveListSIPOutboundTrunkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListSIPOutboundTrunk")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListSIPOutboundTrunkRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SIP.ListSIPOutboundTrunk
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListSIPOutboundTrunkRequest) (*ListSIPOutboundTrunkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListSIPOutboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListSIPOutboundTrunkRequest) when calling interceptor")
					}
					return s.SIP.ListSIPOutboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListSIPOutboundTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListSIPOutboundTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListSIPOutboundTrunkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListSIPOutboundTrunkResponse and nil error while calling ListSIPOutboundTrunk. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveListSIPOutboundTrunkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListSIPOutboundTrunk")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListSIPOutboundTrunkRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SIP.ListSIPOutboundTrunk
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListSIPOutboundTrunkRequest) (*ListSIPOutboundTrunkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListSIPOutboundTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListSIPOutboundTrunkRequest) when calling interceptor")
					}
					return s.SIP.ListSIPOutboundTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListSIPOutboundTrunkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListSIPOutboundTrunkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListSIPOutboundTrunkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListSIPOutboundTrunkResponse and nil error while calling ListSIPOutboundTrunk. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveDeleteSIPTrunk(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteSIPTrunkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteSIPTrunkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *sIPServer) serveDeleteSIPTrunkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteSIPTrunk")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeleteSIPTrunkRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SIP.DeleteSIPTrunk
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteSIPTrunkRequest) (*SIPTrunkInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteSIPTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteSIPTrunkRequest) when calling interceptor")
					}
					return s.SIP.DeleteSIPTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPTrunkInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPTrunkInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SIPTrunkInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SIPTrunkInfo and nil error while calling DeleteSIPTrunk. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveDeleteSIPTrunkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteSIPTrunk")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeleteSIPTrunkRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SIP.DeleteSIPTrunk
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteSIPTrunkRequest) (*SIPTrunkInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteSIPTrunkRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteSIPTrunkRequest) when calling interceptor")
					}
					return s.SIP.DeleteSIPTrunk(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPTrunkInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPTrunkInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SIPTrunkInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SIPTrunkInfo and nil error while calling DeleteSIPTrunk. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveCreateSIPDispatchRule(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateSIPDispatchRuleJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateSIPDispatchRuleProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *sIPServer) serveCreateSIPDispatchRuleJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateSIPDispatchRule")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreateSIPDispatchRuleRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SIP.CreateSIPDispatchRule
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSIPDispatchRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSIPDispatchRuleRequest) when calling interceptor")
					}
					return s.SIP.CreateSIPDispatchRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPDispatchRuleInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPDispatchRuleInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SIPDispatchRuleInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SIPDispatchRuleInfo and nil error while calling CreateSIPDispatchRule. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveCreateSIPDispatchRuleProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateSIPDispatchRule")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreateSIPDispatchRuleRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SIP.CreateSIPDispatchRule
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSIPDispatchRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSIPDispatchRuleRequest) when calling interceptor")
					}
					return s.SIP.CreateSIPDispatchRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPDispatchRuleInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPDispatchRuleInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SIPDispatchRuleInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SIPDispatchRuleInfo and nil error while calling CreateSIPDispatchRule. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveListSIPDispatchRule(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListSIPDispatchRuleJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListSIPDispatchRuleProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *sIPServer) serveListSIPDispatchRuleJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListSIPDispatchRule")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListSIPDispatchRuleRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SIP.ListSIPDispatchRule
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListSIPDispatchRuleRequest) (*ListSIPDispatchRuleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListSIPDispatchRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListSIPDispatchRuleRequest) when calling interceptor")
					}
					return s.SIP.ListSIPDispatchRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListSIPDispatchRuleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListSIPDispatchRuleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListSIPDispatchRuleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListSIPDispatchRuleResponse and nil error while calling ListSIPDispatchRule. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveListSIPDispatchRuleProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListSIPDispatchRule")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListSIPDispatchRuleRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SIP.ListSIPDispatchRule
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListSIPDispatchRuleRequest) (*ListSIPDispatchRuleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListSIPDispatchRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListSIPDispatchRuleRequest) when calling interceptor")
					}
					return s.SIP.ListSIPDispatchRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListSIPDispatchRuleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListSIPDispatchRuleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListSIPDispatchRuleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListSIPDispatchRuleResponse and nil error while calling ListSIPDispatchRule. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveDeleteSIPDispatchRule(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteSIPDispatchRuleJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteSIPDispatchRuleProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *sIPServer) serveDeleteSIPDispatchRuleJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteSIPDispatchRule")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeleteSIPDispatchRuleRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SIP.DeleteSIPDispatchRule
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteSIPDispatchRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteSIPDispatchRuleRequest) when calling interceptor")
					}
					return s.SIP.DeleteSIPDispatchRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPDispatchRuleInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPDispatchRuleInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SIPDispatchRuleInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SIPDispatchRuleInfo and nil error while calling DeleteSIPDispatchRule. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveDeleteSIPDispatchRuleProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteSIPDispatchRule")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeleteSIPDispatchRuleRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SIP.DeleteSIPDispatchRule
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteSIPDispatchRuleRequest) (*SIPDispatchRuleInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteSIPDispatchRuleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteSIPDispatchRuleRequest) when calling interceptor")
					}
					return s.SIP.DeleteSIPDispatchRule(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPDispatchRuleInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPDispatchRuleInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SIPDispatchRuleInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SIPDispatchRuleInfo and nil error while calling DeleteSIPDispatchRule. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveCreateSIPParticipant(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateSIPParticipantJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateSIPParticipantProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *sIPServer) serveCreateSIPParticipantJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateSIPParticipant")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreateSIPParticipantRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SIP.CreateSIPParticipant
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateSIPParticipantRequest) (*SIPParticipantInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSIPParticipantRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSIPParticipantRequest) when calling interceptor")
					}
					return s.SIP.CreateSIPParticipant(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPParticipantInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPParticipantInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SIPParticipantInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SIPParticipantInfo and nil error while calling CreateSIPParticipant. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveCreateSIPParticipantProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateSIPParticipant")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreateSIPParticipantRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SIP.CreateSIPParticipant
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateSIPParticipantRequest) (*SIPParticipantInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateSIPParticipantRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateSIPParticipantRequest) when calling interceptor")
					}
					return s.SIP.CreateSIPParticipant(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SIPParticipantInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SIPParticipantInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SIPParticipantInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SIPParticipantInfo and nil error while calling CreateSIPParticipant. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveTransferSIPParticipant(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveTransferSIPParticipantJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveTransferSIPParticipantProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *sIPServer) serveTransferSIPParticipantJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TransferSIPParticipant")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(TransferSIPParticipantRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.SIP.TransferSIPParticipant
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *TransferSIPParticipantRequest) (*google_protobuf2.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TransferSIPParticipantRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TransferSIPParticipantRequest) when calling interceptor")
					}
					return s.SIP.TransferSIPParticipant(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf2.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf2.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf2.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf2.Empty and nil error while calling TransferSIPParticipant. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) serveTransferSIPParticipantProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TransferSIPParticipant")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(TransferSIPParticipantRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.SIP.TransferSIPParticipant
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *TransferSIPParticipantRequest) (*google_protobuf2.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TransferSIPParticipantRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TransferSIPParticipantRequest) when calling interceptor")
					}
					return s.SIP.TransferSIPParticipant(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf2.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf2.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf2.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf2.Empty and nil error while calling TransferSIPParticipant. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *sIPServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor4, 0
}

func (s *sIPServer) ProtocGenTwirpVersion() string {
	return "v8.1.3"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *sIPServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "livekit", "SIP")
}

var twirpFileDescriptor4 = []byte{
	// 2213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0x5f, 0x73, 0xe3, 0x48,
	0x11, 0x5f, 0xdb, 0xf1, 0xbf, 0x76, 0xe2, 0x38, 0x93, 0x3f, 0xe7, 0x38, 0xc9, 0xee, 0x96, 0xf7,
	0xf6, 0xf6, 0xcf, 0x5d, 0x79, 0x0b, 0x6f, 0x71, 0xc0, 0x56, 0x1d, 0x94, 0x63, 0x67, 0xb3, 0x66,
	0x73, 0x8e, 0x91, 0x1d, 0x8a, 0xa3, 0x0e, 0x84, 0x62, 0x4d, 0xe2, 0x21, 0xb6, 0x24, 0xa4, 0x71,
	0x6e, 0xc3, 0x33, 0x0f, 0xf0, 0x31, 0x28, 0xaa, 0x78, 0x80, 0x67, 0x1e, 0xe0, 0x5b, 0xf0, 0x01,
	0xa8, 0xe2, 0x91, 0xe2, 0x53, 0x50, 0x33, 0x1a, 0xc9, 0x23, 0x59, 0x52, 0x9c, 0xe5, 0xae, 0xea,
	0xde, 0xac, 0xee, 0xdf, 0xf4, 0xf4, 0x74, 0xff, 0x7a, 0x7a, 0x66, 0x0c, 0x1b, 0x13, 0x72, 0x8d,
	0xaf, 0x08, 0x55, 0x1d, 0x62, 0x35, 0x2c, 0xdb, 0xa4, 0x26, 0xca, 0x0b, 0x51, 0xed, 0xfe, 0xa5,
	0x69, 0x5e, 0x4e, 0xf0, 0x0b, 0x2e, 0x3e, 0x9f, 0x5d, 0xbc, 0xd0, 0x67, 0xb6, 0x46, 0x89, 0x69,
	0xb8, 0xc0, 0xda, 0x5e, 0x58, 0x8f, 0xa7, 0x16, 0xbd, 0x11, 0xca, 0x2d, 0xcf, 0xf0, 0xd4, 0xd4,
	0xf1, 0xc4, 0x71, 0xa5, 0xf5, 0x7f, 0x65, 0x60, 0xbb, 0x6d, 0x63, 0x8d, 0xe2, 0x41, 0xb7, 0x3f,
	0xb4, 0x67, 0xc6, 0x95, 0x82, 0x7f, 0x33, 0xc3, 0x0e, 0x45, 0x1f, 0xc3, 0x06, 0x31, 0xce, 0xcd,
	0x99, 0xa1, 0xab, 0x9a, 0xae, 0xdb, 0xd8, 0x71, 0xb0, 0x53, 0x4d, 0x3d, 0xcc, 0x3c, 0x2d, 0x2a,
	0x15, 0xa1, 0x68, 0x79, 0x72, 0xf4, 0x0c, 0x2a, 0xe6, 0x8c, 0x06, 0xd0, 0xd5, 0xf4, 0xc3, 0xd4,
	0xd3, 0xa2, 0xb2, 0xee, 0xc9, 0x05, 0x18, 0x3d, 0x01, 0x5f, 0xa4, 0x1a, 0xb3, 0xe9, 0x39, 0xb6,
	0xab, 0x19, 0x8e, 0x2c, 0x7b, 0xe2, 0x1e, 0x97, 0xa2, 0x4f, 0x61, 0xdb, 0x73, 0xc0, 0xc5, 0x39,
	0xaa, 0x8d, 0x2f, 0xf1, 0xbb, 0xea, 0x0a, 0x73, 0xe2, 0x30, 0x5d, 0x4d, 0x29, 0x9b, 0x02, 0xe0,
	0x8e, 0x70, 0x14, 0xa6, 0x66, 0x13, 0x84, 0xc6, 0x55, 0x8b, 0xdc, 0xed, 0x72, 0x10, 0xcd, 0x9c,
	0xf6, 0x80, 0x33, 0x07, 0xdb, 0x86, 0x36, 0xc5, 0xd5, 0xac, 0xeb, 0xb4, 0x90, 0x9f, 0x09, 0xb1,
	0x0c, 0xb5, 0x34, 0xc7, 0xf9, 0xca, 0xb4, 0xf5, 0x6a, 0x2e, 0x00, 0xed, 0x0b, 0x31, 0x8b, 0x9b,
	0xbf, 0x3e, 0xdf, 0x6c, 0x9e, 0x63, 0xfd, 0x18, 0xf9, 0x76, 0x65, 0xb0, 0x6f, 0xb8, 0x10, 0x04,
	0xfb, 0x96, 0x11, 0xac, 0x70, 0x63, 0xc0, 0xf5, 0xfc, 0x37, 0xaa, 0x41, 0x61, 0x8a, 0xa9, 0xa6,
	0x6b, 0x54, 0xab, 0x96, 0xb8, 0xdc, 0xff, 0x7e, 0x95, 0xae, 0xa6, 0xea, 0x7f, 0xce, 0xc2, 0xaa,
	0x97, 0xd9, 0xae, 0x71, 0x61, 0xa2, 0x87, 0xb0, 0xea, 0x10, 0x4b, 0xa5, 0x4c, 0xa0, 0x12, 0xbd,
	0x9a, 0xe2, 0x83, 0xc0, 0x21, 0x96, 0x8b, 0xd1, 0xd1, 0x4b, 0x58, 0xb9, 0x22, 0x86, 0x5e, 0x2d,
	0x3f, 0x4c, 0x3d, 0x2d, 0x37, 0x1f, 0x34, 0x04, 0x6f, 0x1a, 0xb2, 0x99, 0x06, 0xff, 0xf5, 0x96,
	0x18, 0xba, 0xc2, 0xc1, 0xd1, 0x6c, 0x49, 0xdf, 0x81, 0x2d, 0x99, 0xa5, 0xd9, 0xb2, 0x12, 0xc9,
	0x96, 0x97, 0x50, 0xa4, 0xb6, 0x66, 0x38, 0x96, 0x69, 0xd3, 0xea, 0x1a, 0x77, 0x7d, 0x3b, 0xe8,
	0xba, 0x50, 0x2a, 0x73, 0x5c, 0x3c, 0xc5, 0xb2, 0x77, 0xa6, 0x18, 0x2c, 0x4d, 0xb1, 0xdc, 0xf2,
	0x14, 0xcb, 0xdf, 0x81, 0x62, 0x85, 0xbb, 0x50, 0xac, 0x78, 0x0b, 0xc5, 0x4a, 0x31, 0x14, 0x5b,
	0x0d, 0x52, 0xac, 0xde, 0x81, 0xa2, 0xcf, 0x04, 0x54, 0x81, 0xd5, 0xa1, 0x72, 0xd6, 0x7b, 0xab,
	0x9e, 0x1c, 0x1d, 0xb7, 0xda, 0x5f, 0x54, 0xee, 0xa1, 0x0d, 0x58, 0x73, 0x25, 0xdd, 0xde, 0xe1,
	0xe9, 0x59, 0xaf, 0x53, 0x49, 0x21, 0x04, 0x65, 0x57, 0x74, 0x7a, 0x36, 0x74, 0x65, 0x69, 0x4e,
	0x54, 0x05, 0xf6, 0xfd, 0x7d, 0xa8, 0xeb, 0xae, 0x37, 0xb0, 0x1d, 0x35, 0x21, 0xcb, 0x39, 0xcb,
	0x09, 0x5b, 0x6a, 0xee, 0xcb, 0xb9, 0x95, 0xf1, 0x8c, 0x9d, 0x8a, 0x0b, 0xad, 0xff, 0x3b, 0x0b,
	0x9b, 0x11, 0xea, 0x25, 0x6a, 0xc0, 0x8b, 0x43, 0x3a, 0x26, 0x0e, 0x99, 0x60, 0x1c, 0x50, 0x15,
	0xf2, 0x1e, 0x11, 0xf8, 0xee, 0xa4, 0x78, 0x9f, 0x2c, 0xfc, 0xda, 0x64, 0x62, 0x7e, 0x85, 0xe5,
	0xc2, 0xc8, 0xba, 0x85, 0x21, 0x14, 0xf3, 0xc2, 0x78, 0x02, 0xeb, 0x1e, 0xd8, 0x33, 0x97, 0x73,
	0x79, 0x25, 0xc4, 0x1e, 0xaf, 0x1e, 0xc1, 0x9a, 0x36, 0xa3, 0xe3, 0xf0, 0x06, 0xb3, 0xca, 0x84,
	0x7e, 0xe6, 0x3d, 0x50, 0x68, 0x63, 0xe1, 0x20, 0x3f, 0xe3, 0x6d, 0xc8, 0x8f, 0xb1, 0xa6, 0x7b,
	0xbb, 0x64, 0xa9, 0xf9, 0x2c, 0x29, 0xb2, 0x8d, 0x37, 0x2e, 0xf6, 0xc8, 0xa0, 0xf6, 0x8d, 0xe2,
	0x8d, 0x44, 0x04, 0xb6, 0xc5, 0x4f, 0x95, 0x9a, 0xaa, 0x46, 0xa9, 0x4d, 0xce, 0x67, 0x14, 0xbb,
	0x55, 0x51, 0x6a, 0x7e, 0x77, 0x19, 0x93, 0x43, 0xb3, 0xe5, 0x8f, 0x73, 0xcd, 0x6f, 0x8e, 0x17,
	0x35, 0xe8, 0x10, 0xd6, 0x6d, 0x62, 0x5c, 0x12, 0xe3, 0x52, 0xa5, 0x64, 0x8a, 0xcd, 0x19, 0xe5,
	0x64, 0x2d, 0x35, 0x77, 0x1b, 0x6e, 0xf7, 0x6b, 0x78, 0xdd, 0xaf, 0xd1, 0x11, 0xdd, 0x51, 0x29,
	0x8b, 0x11, 0x43, 0x77, 0x00, 0x3a, 0x82, 0x8d, 0xa9, 0xf6, 0x4e, 0x1d, 0x69, 0x93, 0x89, 0xea,
	0xb5, 0x50, 0x4e, 0xed, 0x44, 0x2b, 0xeb, 0x53, 0xed, 0x5d, 0x5b, 0x9b, 0x4c, 0x3c, 0x41, 0xed,
	0x15, 0xac, 0xca, 0xe1, 0x40, 0x15, 0xc8, 0x5c, 0xe1, 0x1b, 0xc1, 0x26, 0xf6, 0x13, 0x6d, 0x41,
	0xf6, 0x5a, 0x9b, 0xcc, 0x3c, 0x1e, 0xb9, 0x1f, 0xaf, 0xd2, 0xdf, 0x4f, 0xd5, 0x5e, 0x43, 0x35,
	0x6e, 0xdd, 0x77, 0xb1, 0x53, 0x1f, 0xc2, 0x81, 0x5f, 0x36, 0xa7, 0xa2, 0x9a, 0x03, 0x75, 0xf3,
	0x32, 0x58, 0x37, 0x07, 0x72, 0x2a, 0x02, 0x03, 0xe4, 0xc2, 0xf9, 0xe7, 0x0a, 0x6c, 0x45, 0xe9,
	0xbf, 0x99, 0xca, 0xf1, 0x5a, 0x80, 0xbb, 0xb1, 0x7b, 0x9f, 0xc1, 0x1d, 0x3d, 0xbb, 0xe4, 0x8e,
	0x2e, 0x15, 0x62, 0x2e, 0x58, 0x88, 0x5f, 0x5f, 0xc9, 0x74, 0xc2, 0x25, 0xf3, 0x3c, 0x31, 0xa8,
	0x31, 0x35, 0xf3, 0xeb, 0xe4, 0x9a, 0xf9, 0x74, 0x29, 0x9b, 0xcb, 0x15, 0xcd, 0xb7, 0x82, 0xa9,
	0x9f, 0xc1, 0xee, 0x31, 0xa6, 0x31, 0xbb, 0xfb, 0xad, 0xbc, 0xaa, 0xf7, 0xa1, 0x16, 0x35, 0xdc,
	0xb1, 0x4c, 0xc3, 0xc1, 0xef, 0xd5, 0x1d, 0x7e, 0xe8, 0x59, 0x8c, 0xac, 0x9b, 0xdb, 0x3d, 0x52,
	0x60, 0x2f, 0x72, 0xbc, 0x70, 0xe9, 0xbd, 0x0a, 0x6f, 0x17, 0x36, 0x4f, 0x88, 0x43, 0x43, 0x67,
	0x71, 0xde, 0x20, 0x8f, 0x61, 0x2b, 0xa8, 0x12, 0xf3, 0x7c, 0x0c, 0x59, 0x42, 0xf1, 0xd4, 0x3d,
	0x9b, 0x97, 0xc2, 0x25, 0xe2, 0xdb, 0xe7, 0x18, 0x6e, 0x68, 0x1f, 0x6a, 0xc2, 0x50, 0x44, 0x26,
	0xea, 0x3f, 0x81, 0xbd, 0x48, 0xed, 0x3c, 0xd0, 0xf2, 0x6c, 0xb7, 0x04, 0x9a, 0x43, 0xeb, 0x07,
	0xbe, 0xc9, 0xa8, 0x48, 0xd7, 0x07, 0xb0, 0x1f, 0xad, 0x9e, 0x07, 0x52, 0x9e, 0xf2, 0xb6, 0x40,
	0xba, 0x73, 0xfe, 0x00, 0xb6, 0x3b, 0x78, 0x82, 0x17, 0xaf, 0x35, 0xb7, 0xe7, 0xf5, 0x35, 0x6c,
	0x0f, 0xba, 0xfd, 0x0e, 0x71, 0x2c, 0x8d, 0x8e, 0xc6, 0xca, 0x6c, 0x82, 0x3b, 0xc4, 0xc6, 0x23,
	0x8a, 0xf6, 0xa0, 0x68, 0x9b, 0xe6, 0x54, 0xe5, 0xbb, 0x87, 0x3b, 0xae, 0xc0, 0x04, 0x3d, 0xb6,
	0x73, 0x54, 0x20, 0x63, 0x11, 0x43, 0xd0, 0x9e, 0xfd, 0xac, 0xf7, 0x60, 0x37, 0x64, 0xa7, 0x6b,
	0xe8, 0xe4, 0x9a, 0xe8, 0x33, 0x6d, 0x82, 0x1e, 0x40, 0x89, 0xdb, 0xb2, 0x6c, 0x7c, 0x41, 0xde,
	0x79, 0x5e, 0x30, 0x51, 0x9f, 0x4b, 0x22, 0xec, 0x8d, 0x17, 0xfc, 0x62, 0xdd, 0x08, 0xe3, 0xf7,
	0xb0, 0x85, 0xf6, 0xa1, 0x68, 0x6b, 0x86, 0x6e, 0x4e, 0xc9, 0x6f, 0x31, 0xdf, 0x92, 0x0b, 0xca,
	0x5c, 0x50, 0xff, 0x63, 0x1a, 0xd6, 0x43, 0x53, 0x21, 0x05, 0xb6, 0x74, 0xf1, 0xad, 0xda, 0xb3,
	0x09, 0x56, 0x75, 0x1e, 0x14, 0xc1, 0xee, 0xfb, 0x72, 0x52, 0x16, 0x43, 0xf7, 0xe6, 0x9e, 0x82,
	0xf4, 0xc5, 0x80, 0xfe, 0x12, 0xaa, 0x41, 0x9b, 0xc4, 0x0f, 0x10, 0x77, 0xb6, 0xd4, 0xac, 0xc7,
	0xd9, 0x9d, 0x87, 0xf2, 0xcd, 0x3d, 0x65, 0x47, 0x8f, 0x0e, 0xf2, 0x82, 0xcf, 0x23, 0x1e, 0x30,
	0xbe, 0xe0, 0x04, 0x9f, 0xdd, 0xb0, 0x86, 0x7d, 0x76, 0xa5, 0x87, 0x39, 0x58, 0x61, 0xa6, 0xea,
	0xbf, 0xcb, 0x48, 0x07, 0x56, 0x79, 0xb4, 0x47, 0xb4, 0x4f, 0x5c, 0xa0, 0x08, 0x50, 0x35, 0x6e,
	0x32, 0x85, 0xa3, 0x18, 0xb7, 0x3c, 0x4a, 0x7a, 0xf7, 0xa6, 0x02, 0x75, 0x09, 0xe9, 0xa0, 0xe7,
	0xb0, 0x31, 0x26, 0x3a, 0x56, 0xad, 0xb1, 0x69, 0x60, 0xf9, 0xd2, 0x5c, 0x50, 0xd6, 0x99, 0xa2,
	0xcf, 0xe4, 0xe2, 0x1e, 0x14, 0x71, 0x35, 0xc9, 0x45, 0x5e, 0x4d, 0xbc, 0x46, 0xbd, 0x12, 0xd3,
	0xa8, 0xb3, 0xa1, 0x46, 0x7d, 0x06, 0x20, 0x35, 0xa9, 0x7c, 0xe8, 0x60, 0x97, 0x14, 0x8a, 0x46,
	0xb8, 0x47, 0x49, 0x86, 0x6a, 0x9f, 0xc1, 0xfa, 0xff, 0xd3, 0x55, 0xfe, 0x94, 0xe1, 0x47, 0xfc,
	0x20, 0x35, 0x2e, 0x4c, 0xf4, 0x02, 0xb6, 0x58, 0x99, 0x87, 0xe8, 0xe5, 0x95, 0xfb, 0x86, 0x43,
	0xac, 0xc0, 0x10, 0xdd, 0x4f, 0x57, 0xfa, 0xee, 0xe9, 0xca, 0x2c, 0x93, 0xae, 0x95, 0xa5, 0xd3,
	0x95, 0x4f, 0x4c, 0x57, 0x36, 0x26, 0x5d, 0xb9, 0x50, 0xba, 0x4e, 0x02, 0xe9, 0x2a, 0xf0, 0x74,
	0x7d, 0x12, 0x5f, 0x4d, 0x17, 0xe6, 0x37, 0x99, 0xa5, 0x79, 0xcb, 0x89, 0xa0, 0x87, 0xd4, 0x72,
	0x82, 0xda, 0x25, 0x5a, 0x4e, 0x78, 0x11, 0xde, 0xf6, 0x7f, 0x0a, 0xfb, 0xfe, 0xf6, 0x1f, 0x55,
	0x9c, 0x77, 0xa5, 0x47, 0xfd, 0x3f, 0x59, 0xd8, 0xf3, 0x39, 0xde, 0xd7, 0x6c, 0x4a, 0x46, 0xc4,
	0xd2, 0x0c, 0xba, 0x74, 0x5b, 0x41, 0xf7, 0xa1, 0xc4, 0x10, 0xfc, 0xd2, 0x41, 0x4d, 0x11, 0xa3,
	0xa2, 0x43, 0x2c, 0xb6, 0xb1, 0x0c, 0xcd, 0x60, 0x77, 0xc9, 0x84, 0xba, 0xcb, 0x77, 0x60, 0xcb,
	0x9a, 0x4f, 0xaa, 0x12, 0x1d, 0x1b, 0x94, 0xd0, 0x1b, 0x51, 0xbc, 0x9b, 0x92, 0xae, 0x2b, 0x54,
	0xe8, 0x19, 0x54, 0xe4, 0x21, 0xd2, 0x91, 0x77, 0x5d, 0x92, 0x47, 0x59, 0xf7, 0x39, 0x55, 0x58,
	0xb0, 0xfe, 0xb9, 0x47, 0xaf, 0x6b, 0xd8, 0x91, 0x87, 0x48, 0x54, 0x73, 0x8f, 0xc4, 0x3f, 0x5a,
	0xdc, 0x19, 0x16, 0xa3, 0xd6, 0x90, 0x44, 0x61, 0xf6, 0x6d, 0x5b, 0x51, 0x3a, 0x56, 0x06, 0x3a,
	0x9d, 0x5e, 0x78, 0x65, 0xc0, 0x7e, 0xa3, 0x27, 0xb0, 0x66, 0x4d, 0xb4, 0x1b, 0x95, 0xdd, 0xf2,
	0xa8, 0x69, 0xb8, 0x2f, 0x2c, 0x05, 0xfe, 0x7a, 0xb3, 0xca, 0x14, 0x8a, 0x90, 0xb3, 0xd3, 0x3d,
	0x07, 0xea, 0x44, 0x9b, 0x70, 0xe0, 0x1a, 0x2f, 0x4a, 0x0e, 0xea, 0x08, 0x59, 0x74, 0xf5, 0x42,
	0x74, 0xf5, 0x7e, 0x8b, 0x2e, 0xa3, 0x6f, 0xa0, 0x16, 0x1f, 0xcd, 0x3b, 0x15, 0xeb, 0x5f, 0x53,
	0x80, 0x82, 0xe9, 0xe2, 0x3b, 0xea, 0x63, 0x28, 0x07, 0x29, 0x28, 0xac, 0xad, 0x05, 0xc8, 0x17,
	0xcb, 0xd4, 0x74, 0x3c, 0x53, 0x13, 0x99, 0x2f, 0x97, 0x0d, 0xd1, 0x05, 0xe1, 0xbd, 0xb2, 0xe9,
	0xea, 0xf5, 0xbf, 0xa5, 0xe0, 0x80, 0xdf, 0x04, 0x2f, 0xb0, 0x1d, 0x5d, 0x9a, 0x71, 0x1e, 0xa5,
	0x96, 0xf4, 0x28, 0x1d, 0xf2, 0xe8, 0x01, 0x94, 0xa8, 0x98, 0x90, 0x15, 0xb2, 0xeb, 0x30, 0x78,
	0xa2, 0xa1, 0xb9, 0x48, 0xb3, 0x95, 0x45, 0x9a, 0xd5, 0xff, 0x9e, 0x81, 0xd2, 0xa0, 0xdb, 0xe7,
	0xab, 0x60, 0xe1, 0xfd, 0x00, 0xf2, 0xde, 0x1a, 0x5d, 0xc7, 0x72, 0x23, 0xbe, 0x40, 0xb4, 0x0b,
	0x05, 0x7f, 0x57, 0x71, 0x5d, 0xc9, 0x8b, 0x4e, 0x93, 0x1c, 0xb8, 0x0f, 0x20, 0xcf, 0x95, 0x7e,
	0xd0, 0x72, 0xec, 0x33, 0x21, 0x43, 0xd9, 0xf8, 0x78, 0x3c, 0x87, 0xc2, 0x85, 0x6d, 0x4e, 0xd5,
	0x99, 0x4d, 0x78, 0x71, 0x95, 0x9a, 0xeb, 0xf2, 0x2e, 0x7c, 0x66, 0x13, 0x25, 0xcf, 0x00, 0x67,
	0x36, 0x41, 0x1f, 0x41, 0x8e, 0x9a, 0x1c, 0x99, 0x8f, 0x46, 0x66, 0xa9, 0xc9, 0x70, 0xdf, 0x83,
	0x12, 0x5f, 0xb0, 0x43, 0x35, 0x3a, 0x73, 0xf8, 0x5e, 0x53, 0x6e, 0xee, 0xc8, 0x60, 0x16, 0x9b,
	0x01, 0xd7, 0x2a, 0x30, 0xf2, 0x7f, 0xa3, 0x03, 0x00, 0x87, 0x6a, 0x36, 0xc5, 0xba, 0xaa, 0x51,
	0xfe, 0x92, 0x99, 0x51, 0x8a, 0x42, 0xd2, 0xa2, 0x2c, 0x5e, 0xd8, 0xd0, 0x5d, 0x25, 0x70, 0x65,
	0x9e, 0x7f, 0xb7, 0x28, 0x7a, 0x0d, 0x1b, 0x3a, 0x71, 0x46, 0xa6, 0x61, 0xe0, 0x11, 0x55, 0x6d,
	0xac, 0x39, 0xa6, 0xc1, 0x0b, 0xb6, 0xdc, 0xdc, 0xf5, 0x27, 0xee, 0xf8, 0x08, 0x85, 0x03, 0x94,
	0x8a, 0x1e, 0x92, 0xd4, 0xff, 0x90, 0x82, 0x9c, 0xbb, 0x18, 0xb6, 0x1f, 0xcd, 0x1c, 0x6c, 0x8b,
	0x9c, 0xf1, 0xdf, 0x4c, 0x36, 0x36, 0x1d, 0xea, 0x3d, 0x81, 0xb0, 0xdf, 0xa8, 0x0c, 0x69, 0x62,
	0x89, 0x1c, 0xa5, 0x89, 0xc5, 0x30, 0xfc, 0x5d, 0x43, 0x9c, 0xbe, 0xf8, 0xdb, 0xc5, 0xfb, 0x3c,
	0x78, 0x3c, 0xbf, 0x12, 0xef, 0xfb, 0xde, 0x03, 0xc8, 0x0e, 0x2f, 0x5e, 0x75, 0xa8, 0xb4, 0x7a,
	0x83, 0xfe, 0xa9, 0x32, 0x54, 0x5b, 0x67, 0xc3, 0xd3, 0xca, 0x3d, 0xb4, 0x0d, 0x1b, 0x41, 0xf9,
	0x59, 0xa7, 0x5f, 0x49, 0x2d, 0x8a, 0x87, 0xed, 0x7e, 0x25, 0x1d, 0x21, 0x3e, 0x19, 0x54, 0x32,
	0xcf, 0xc7, 0xb0, 0x16, 0xc8, 0x0b, 0xc7, 0xb5, 0x07, 0x6a, 0xbb, 0x75, 0x72, 0xa2, 0x76, 0x7b,
	0xed, 0xd3, 0xcf, 0xbb, 0xbd, 0xe3, 0xca, 0x3d, 0x54, 0x83, 0x1d, 0x26, 0xee, 0xb7, 0x94, 0x61,
	0xb7, 0xdd, 0xed, 0xb7, 0x7a, 0x43, 0xf5, 0xc7, 0xa7, 0xdd, 0xde, 0x51, 0xa7, 0x92, 0x42, 0x65,
	0x00, 0xa6, 0x6b, 0xb5, 0x87, 0xdd, 0x9f, 0x1e, 0x55, 0xd2, 0x68, 0x0b, 0x2a, 0xec, 0xbb, 0xd3,
	0x1d, 0xb4, 0x4f, 0x7b, 0xbd, 0xa3, 0xf6, 0xf0, 0xa8, 0x53, 0xc9, 0x34, 0xff, 0x51, 0x84, 0xcc,
	0xa0, 0xdb, 0x47, 0x7d, 0x58, 0x95, 0x6f, 0xbd, 0x68, 0xde, 0xfd, 0x23, 0xee, 0xc9, 0xb5, 0x83,
	0x18, 0xad, 0x7b, 0x92, 0xa8, 0x67, 0x7e, 0x9f, 0x4e, 0xa1, 0x2f, 0xa5, 0x3f, 0xbc, 0xe4, 0x1b,
	0x2b, 0x7a, 0xbc, 0xd8, 0xb2, 0x22, 0x2e, 0xc8, 0xb5, 0xc4, 0x2b, 0x2f, 0x52, 0x61, 0x27, 0xfa,
	0x3d, 0x0e, 0x7d, 0xb4, 0x68, 0x3e, 0xea, 0x3a, 0x5c, 0x4b, 0xbe, 0xdf, 0xa2, 0x5f, 0x00, 0x5a,
	0x7c, 0x07, 0x41, 0xf3, 0x7b, 0x52, 0xec, 0x1b, 0x4b, 0xed, 0x51, 0x22, 0x46, 0x1c, 0xb6, 0x7e,
	0x05, 0x9b, 0x11, 0x8f, 0x1a, 0x28, 0x3c, 0x36, 0xd2, 0xf3, 0x0f, 0x93, 0x41, 0xf3, 0x19, 0x22,
	0x1e, 0x18, 0xa4, 0x19, 0xe2, 0x1f, 0x27, 0xa4, 0x19, 0x92, 0xde, 0x28, 0x46, 0xfe, 0x4b, 0x49,
	0x70, 0x11, 0x0b, 0xa3, 0x23, 0x57, 0xf1, 0xf8, 0x16, 0x94, 0x98, 0xe4, 0x18, 0xca, 0xc1, 0x07,
	0x06, 0x34, 0xbf, 0x4f, 0x46, 0xbe, 0x3c, 0xd4, 0xa2, 0x5f, 0x66, 0x02, 0x7c, 0x0c, 0xdc, 0xb8,
	0x1f, 0x2f, 0x75, 0xb9, 0xaa, 0x25, 0x9e, 0x87, 0xa5, 0x68, 0x07, 0x6c, 0x2f, 0x44, 0x3b, 0xca,
	0xf2, 0x87, 0xc9, 0x20, 0x11, 0x88, 0x2f, 0xa5, 0x97, 0x96, 0x18, 0xff, 0x93, 0x8e, 0xe2, 0xb7,
	0xf8, 0xff, 0x05, 0x6c, 0x45, 0x1d, 0x20, 0xa5, 0x5c, 0x26, 0x9c, 0x2f, 0x6b, 0x7b, 0xb2, 0xed,
	0xf0, 0x81, 0xe6, 0x67, 0xb0, 0x13, 0x7d, 0x70, 0x90, 0x4a, 0x35, 0xf1, 0x64, 0x51, 0xdb, 0x59,
	0x38, 0x9f, 0x1d, 0x4d, 0x2d, 0x7a, 0x73, 0xf8, 0xfa, 0xe7, 0x8f, 0x2e, 0x09, 0x1d, 0xcf, 0xce,
	0x1b, 0x23, 0x73, 0xfa, 0x42, 0xd8, 0x72, 0xff, 0x95, 0x1f, 0x99, 0x13, 0x4f, 0xf0, 0x97, 0xf4,
	0xda, 0x09, 0xb9, 0xc6, 0x6f, 0x09, 0x6d, 0xf4, 0x99, 0xea, 0xbf, 0xe9, 0xb2, 0xf8, 0x7e, 0xf5,
	0x8a, 0x0b, 0xce, 0x73, 0x7c, 0xc8, 0xcb, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x2b, 0xe9, 0x38,
	0x86, 0x14, 0x20, 0x00, 0x00,
}
