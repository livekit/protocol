// Code generated by protoc-gen-twirp v8.1.3, DO NOT EDIT.
// source: livekit_phone_number.proto

package livekit

import context "context"
import fmt "fmt"
import http "net/http"
import io "io"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ============================
// PhoneNumberService Interface
// ============================

// Public Phone Number Service - External API for phone number management
type PhoneNumberService interface {
	// List available phone numbers in inventory
	ListPhoneNumberInventory(context.Context, *ListPhoneNumberInventoryRequest) (*ListPhoneNumberInventoryResponse, error)

	// Purchase a phone number from inventory
	PurchasePhoneNumber(context.Context, *PurchasePhoneNumberRequest) (*PurchasePhoneNumberResponse, error)

	// List purchased phone numbers for a project
	ListPurchasedPhoneNumbers(context.Context, *ListPurchasedPhoneNumbersRequest) (*ListPurchasedPhoneNumbersResponse, error)

	// Get a purchased phone number
	GetPurchasedPhoneNumber(context.Context, *GetPurchasedPhoneNumberRequest) (*GetPurchasedPhoneNumberResponse, error)

	// Update a purchased phone number
	UpdatePurchasedPhoneNumber(context.Context, *UpdatePurchasedPhoneNumberRequest) (*UpdatePurchasedPhoneNumberResponse, error)

	// Release a purchased phone number
	ReleasePurchasedPhoneNumber(context.Context, *ReleasePurchasedPhoneNumbersRequest) (*ReleasePurchasedPhoneNumbersResponse, error)
}

// ==================================
// PhoneNumberService Protobuf Client
// ==================================

type phoneNumberServiceProtobufClient struct {
	client      HTTPClient
	urls        [6]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewPhoneNumberServiceProtobufClient creates a Protobuf client that implements the PhoneNumberService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewPhoneNumberServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) PhoneNumberService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "livekit", "PhoneNumberService")
	urls := [6]string{
		serviceURL + "ListPhoneNumberInventory",
		serviceURL + "PurchasePhoneNumber",
		serviceURL + "ListPurchasedPhoneNumbers",
		serviceURL + "GetPurchasedPhoneNumber",
		serviceURL + "UpdatePurchasedPhoneNumber",
		serviceURL + "ReleasePurchasedPhoneNumber",
	}

	return &phoneNumberServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *phoneNumberServiceProtobufClient) ListPhoneNumberInventory(ctx context.Context, in *ListPhoneNumberInventoryRequest) (*ListPhoneNumberInventoryResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "PhoneNumberService")
	ctx = ctxsetters.WithMethodName(ctx, "ListPhoneNumberInventory")
	caller := c.callListPhoneNumberInventory
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListPhoneNumberInventoryRequest) (*ListPhoneNumberInventoryResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPhoneNumberInventoryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPhoneNumberInventoryRequest) when calling interceptor")
					}
					return c.callListPhoneNumberInventory(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPhoneNumberInventoryResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPhoneNumberInventoryResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *phoneNumberServiceProtobufClient) callListPhoneNumberInventory(ctx context.Context, in *ListPhoneNumberInventoryRequest) (*ListPhoneNumberInventoryResponse, error) {
	out := new(ListPhoneNumberInventoryResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *phoneNumberServiceProtobufClient) PurchasePhoneNumber(ctx context.Context, in *PurchasePhoneNumberRequest) (*PurchasePhoneNumberResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "PhoneNumberService")
	ctx = ctxsetters.WithMethodName(ctx, "PurchasePhoneNumber")
	caller := c.callPurchasePhoneNumber
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PurchasePhoneNumberRequest) (*PurchasePhoneNumberResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PurchasePhoneNumberRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PurchasePhoneNumberRequest) when calling interceptor")
					}
					return c.callPurchasePhoneNumber(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PurchasePhoneNumberResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PurchasePhoneNumberResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *phoneNumberServiceProtobufClient) callPurchasePhoneNumber(ctx context.Context, in *PurchasePhoneNumberRequest) (*PurchasePhoneNumberResponse, error) {
	out := new(PurchasePhoneNumberResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *phoneNumberServiceProtobufClient) ListPurchasedPhoneNumbers(ctx context.Context, in *ListPurchasedPhoneNumbersRequest) (*ListPurchasedPhoneNumbersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "PhoneNumberService")
	ctx = ctxsetters.WithMethodName(ctx, "ListPurchasedPhoneNumbers")
	caller := c.callListPurchasedPhoneNumbers
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListPurchasedPhoneNumbersRequest) (*ListPurchasedPhoneNumbersResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPurchasedPhoneNumbersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPurchasedPhoneNumbersRequest) when calling interceptor")
					}
					return c.callListPurchasedPhoneNumbers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPurchasedPhoneNumbersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPurchasedPhoneNumbersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *phoneNumberServiceProtobufClient) callListPurchasedPhoneNumbers(ctx context.Context, in *ListPurchasedPhoneNumbersRequest) (*ListPurchasedPhoneNumbersResponse, error) {
	out := new(ListPurchasedPhoneNumbersResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *phoneNumberServiceProtobufClient) GetPurchasedPhoneNumber(ctx context.Context, in *GetPurchasedPhoneNumberRequest) (*GetPurchasedPhoneNumberResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "PhoneNumberService")
	ctx = ctxsetters.WithMethodName(ctx, "GetPurchasedPhoneNumber")
	caller := c.callGetPurchasedPhoneNumber
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetPurchasedPhoneNumberRequest) (*GetPurchasedPhoneNumberResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPurchasedPhoneNumberRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPurchasedPhoneNumberRequest) when calling interceptor")
					}
					return c.callGetPurchasedPhoneNumber(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetPurchasedPhoneNumberResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetPurchasedPhoneNumberResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *phoneNumberServiceProtobufClient) callGetPurchasedPhoneNumber(ctx context.Context, in *GetPurchasedPhoneNumberRequest) (*GetPurchasedPhoneNumberResponse, error) {
	out := new(GetPurchasedPhoneNumberResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *phoneNumberServiceProtobufClient) UpdatePurchasedPhoneNumber(ctx context.Context, in *UpdatePurchasedPhoneNumberRequest) (*UpdatePurchasedPhoneNumberResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "PhoneNumberService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePurchasedPhoneNumber")
	caller := c.callUpdatePurchasedPhoneNumber
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdatePurchasedPhoneNumberRequest) (*UpdatePurchasedPhoneNumberResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePurchasedPhoneNumberRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePurchasedPhoneNumberRequest) when calling interceptor")
					}
					return c.callUpdatePurchasedPhoneNumber(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdatePurchasedPhoneNumberResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdatePurchasedPhoneNumberResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *phoneNumberServiceProtobufClient) callUpdatePurchasedPhoneNumber(ctx context.Context, in *UpdatePurchasedPhoneNumberRequest) (*UpdatePurchasedPhoneNumberResponse, error) {
	out := new(UpdatePurchasedPhoneNumberResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *phoneNumberServiceProtobufClient) ReleasePurchasedPhoneNumber(ctx context.Context, in *ReleasePurchasedPhoneNumbersRequest) (*ReleasePurchasedPhoneNumbersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "PhoneNumberService")
	ctx = ctxsetters.WithMethodName(ctx, "ReleasePurchasedPhoneNumber")
	caller := c.callReleasePurchasedPhoneNumber
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ReleasePurchasedPhoneNumbersRequest) (*ReleasePurchasedPhoneNumbersResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReleasePurchasedPhoneNumbersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReleasePurchasedPhoneNumbersRequest) when calling interceptor")
					}
					return c.callReleasePurchasedPhoneNumber(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReleasePurchasedPhoneNumbersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReleasePurchasedPhoneNumbersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *phoneNumberServiceProtobufClient) callReleasePurchasedPhoneNumber(ctx context.Context, in *ReleasePurchasedPhoneNumbersRequest) (*ReleasePurchasedPhoneNumbersResponse, error) {
	out := new(ReleasePurchasedPhoneNumbersResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==============================
// PhoneNumberService JSON Client
// ==============================

type phoneNumberServiceJSONClient struct {
	client      HTTPClient
	urls        [6]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewPhoneNumberServiceJSONClient creates a JSON client that implements the PhoneNumberService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewPhoneNumberServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) PhoneNumberService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "livekit", "PhoneNumberService")
	urls := [6]string{
		serviceURL + "ListPhoneNumberInventory",
		serviceURL + "PurchasePhoneNumber",
		serviceURL + "ListPurchasedPhoneNumbers",
		serviceURL + "GetPurchasedPhoneNumber",
		serviceURL + "UpdatePurchasedPhoneNumber",
		serviceURL + "ReleasePurchasedPhoneNumber",
	}

	return &phoneNumberServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *phoneNumberServiceJSONClient) ListPhoneNumberInventory(ctx context.Context, in *ListPhoneNumberInventoryRequest) (*ListPhoneNumberInventoryResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "PhoneNumberService")
	ctx = ctxsetters.WithMethodName(ctx, "ListPhoneNumberInventory")
	caller := c.callListPhoneNumberInventory
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListPhoneNumberInventoryRequest) (*ListPhoneNumberInventoryResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPhoneNumberInventoryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPhoneNumberInventoryRequest) when calling interceptor")
					}
					return c.callListPhoneNumberInventory(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPhoneNumberInventoryResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPhoneNumberInventoryResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *phoneNumberServiceJSONClient) callListPhoneNumberInventory(ctx context.Context, in *ListPhoneNumberInventoryRequest) (*ListPhoneNumberInventoryResponse, error) {
	out := new(ListPhoneNumberInventoryResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *phoneNumberServiceJSONClient) PurchasePhoneNumber(ctx context.Context, in *PurchasePhoneNumberRequest) (*PurchasePhoneNumberResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "PhoneNumberService")
	ctx = ctxsetters.WithMethodName(ctx, "PurchasePhoneNumber")
	caller := c.callPurchasePhoneNumber
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PurchasePhoneNumberRequest) (*PurchasePhoneNumberResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PurchasePhoneNumberRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PurchasePhoneNumberRequest) when calling interceptor")
					}
					return c.callPurchasePhoneNumber(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PurchasePhoneNumberResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PurchasePhoneNumberResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *phoneNumberServiceJSONClient) callPurchasePhoneNumber(ctx context.Context, in *PurchasePhoneNumberRequest) (*PurchasePhoneNumberResponse, error) {
	out := new(PurchasePhoneNumberResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *phoneNumberServiceJSONClient) ListPurchasedPhoneNumbers(ctx context.Context, in *ListPurchasedPhoneNumbersRequest) (*ListPurchasedPhoneNumbersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "PhoneNumberService")
	ctx = ctxsetters.WithMethodName(ctx, "ListPurchasedPhoneNumbers")
	caller := c.callListPurchasedPhoneNumbers
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListPurchasedPhoneNumbersRequest) (*ListPurchasedPhoneNumbersResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPurchasedPhoneNumbersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPurchasedPhoneNumbersRequest) when calling interceptor")
					}
					return c.callListPurchasedPhoneNumbers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPurchasedPhoneNumbersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPurchasedPhoneNumbersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *phoneNumberServiceJSONClient) callListPurchasedPhoneNumbers(ctx context.Context, in *ListPurchasedPhoneNumbersRequest) (*ListPurchasedPhoneNumbersResponse, error) {
	out := new(ListPurchasedPhoneNumbersResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *phoneNumberServiceJSONClient) GetPurchasedPhoneNumber(ctx context.Context, in *GetPurchasedPhoneNumberRequest) (*GetPurchasedPhoneNumberResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "PhoneNumberService")
	ctx = ctxsetters.WithMethodName(ctx, "GetPurchasedPhoneNumber")
	caller := c.callGetPurchasedPhoneNumber
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetPurchasedPhoneNumberRequest) (*GetPurchasedPhoneNumberResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPurchasedPhoneNumberRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPurchasedPhoneNumberRequest) when calling interceptor")
					}
					return c.callGetPurchasedPhoneNumber(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetPurchasedPhoneNumberResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetPurchasedPhoneNumberResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *phoneNumberServiceJSONClient) callGetPurchasedPhoneNumber(ctx context.Context, in *GetPurchasedPhoneNumberRequest) (*GetPurchasedPhoneNumberResponse, error) {
	out := new(GetPurchasedPhoneNumberResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *phoneNumberServiceJSONClient) UpdatePurchasedPhoneNumber(ctx context.Context, in *UpdatePurchasedPhoneNumberRequest) (*UpdatePurchasedPhoneNumberResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "PhoneNumberService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePurchasedPhoneNumber")
	caller := c.callUpdatePurchasedPhoneNumber
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdatePurchasedPhoneNumberRequest) (*UpdatePurchasedPhoneNumberResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePurchasedPhoneNumberRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePurchasedPhoneNumberRequest) when calling interceptor")
					}
					return c.callUpdatePurchasedPhoneNumber(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdatePurchasedPhoneNumberResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdatePurchasedPhoneNumberResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *phoneNumberServiceJSONClient) callUpdatePurchasedPhoneNumber(ctx context.Context, in *UpdatePurchasedPhoneNumberRequest) (*UpdatePurchasedPhoneNumberResponse, error) {
	out := new(UpdatePurchasedPhoneNumberResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *phoneNumberServiceJSONClient) ReleasePurchasedPhoneNumber(ctx context.Context, in *ReleasePurchasedPhoneNumbersRequest) (*ReleasePurchasedPhoneNumbersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "PhoneNumberService")
	ctx = ctxsetters.WithMethodName(ctx, "ReleasePurchasedPhoneNumber")
	caller := c.callReleasePurchasedPhoneNumber
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ReleasePurchasedPhoneNumbersRequest) (*ReleasePurchasedPhoneNumbersResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReleasePurchasedPhoneNumbersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReleasePurchasedPhoneNumbersRequest) when calling interceptor")
					}
					return c.callReleasePurchasedPhoneNumber(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReleasePurchasedPhoneNumbersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReleasePurchasedPhoneNumbersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *phoneNumberServiceJSONClient) callReleasePurchasedPhoneNumber(ctx context.Context, in *ReleasePurchasedPhoneNumbersRequest) (*ReleasePurchasedPhoneNumbersResponse, error) {
	out := new(ReleasePurchasedPhoneNumbersResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =================================
// PhoneNumberService Server Handler
// =================================

type phoneNumberServiceServer struct {
	PhoneNumberService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewPhoneNumberServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewPhoneNumberServiceServer(svc PhoneNumberService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &phoneNumberServiceServer{
		PhoneNumberService: svc,
		hooks:              serverOpts.Hooks,
		interceptor:        twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:         pathPrefix,
		jsonSkipDefaults:   jsonSkipDefaults,
		jsonCamelCase:      jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *phoneNumberServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *phoneNumberServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// PhoneNumberServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const PhoneNumberServicePathPrefix = "/twirp/livekit.PhoneNumberService/"

func (s *phoneNumberServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "PhoneNumberService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "livekit.PhoneNumberService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "ListPhoneNumberInventory":
		s.serveListPhoneNumberInventory(ctx, resp, req)
		return
	case "PurchasePhoneNumber":
		s.servePurchasePhoneNumber(ctx, resp, req)
		return
	case "ListPurchasedPhoneNumbers":
		s.serveListPurchasedPhoneNumbers(ctx, resp, req)
		return
	case "GetPurchasedPhoneNumber":
		s.serveGetPurchasedPhoneNumber(ctx, resp, req)
		return
	case "UpdatePurchasedPhoneNumber":
		s.serveUpdatePurchasedPhoneNumber(ctx, resp, req)
		return
	case "ReleasePurchasedPhoneNumber":
		s.serveReleasePurchasedPhoneNumber(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *phoneNumberServiceServer) serveListPhoneNumberInventory(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListPhoneNumberInventoryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListPhoneNumberInventoryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *phoneNumberServiceServer) serveListPhoneNumberInventoryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListPhoneNumberInventory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListPhoneNumberInventoryRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PhoneNumberService.ListPhoneNumberInventory
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListPhoneNumberInventoryRequest) (*ListPhoneNumberInventoryResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPhoneNumberInventoryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPhoneNumberInventoryRequest) when calling interceptor")
					}
					return s.PhoneNumberService.ListPhoneNumberInventory(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPhoneNumberInventoryResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPhoneNumberInventoryResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListPhoneNumberInventoryResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListPhoneNumberInventoryResponse and nil error while calling ListPhoneNumberInventory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *phoneNumberServiceServer) serveListPhoneNumberInventoryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListPhoneNumberInventory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListPhoneNumberInventoryRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PhoneNumberService.ListPhoneNumberInventory
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListPhoneNumberInventoryRequest) (*ListPhoneNumberInventoryResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPhoneNumberInventoryRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPhoneNumberInventoryRequest) when calling interceptor")
					}
					return s.PhoneNumberService.ListPhoneNumberInventory(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPhoneNumberInventoryResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPhoneNumberInventoryResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListPhoneNumberInventoryResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListPhoneNumberInventoryResponse and nil error while calling ListPhoneNumberInventory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *phoneNumberServiceServer) servePurchasePhoneNumber(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePurchasePhoneNumberJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePurchasePhoneNumberProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *phoneNumberServiceServer) servePurchasePhoneNumberJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PurchasePhoneNumber")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(PurchasePhoneNumberRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PhoneNumberService.PurchasePhoneNumber
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PurchasePhoneNumberRequest) (*PurchasePhoneNumberResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PurchasePhoneNumberRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PurchasePhoneNumberRequest) when calling interceptor")
					}
					return s.PhoneNumberService.PurchasePhoneNumber(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PurchasePhoneNumberResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PurchasePhoneNumberResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PurchasePhoneNumberResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PurchasePhoneNumberResponse and nil error while calling PurchasePhoneNumber. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *phoneNumberServiceServer) servePurchasePhoneNumberProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PurchasePhoneNumber")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(PurchasePhoneNumberRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PhoneNumberService.PurchasePhoneNumber
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PurchasePhoneNumberRequest) (*PurchasePhoneNumberResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PurchasePhoneNumberRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PurchasePhoneNumberRequest) when calling interceptor")
					}
					return s.PhoneNumberService.PurchasePhoneNumber(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PurchasePhoneNumberResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PurchasePhoneNumberResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PurchasePhoneNumberResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PurchasePhoneNumberResponse and nil error while calling PurchasePhoneNumber. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *phoneNumberServiceServer) serveListPurchasedPhoneNumbers(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListPurchasedPhoneNumbersJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListPurchasedPhoneNumbersProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *phoneNumberServiceServer) serveListPurchasedPhoneNumbersJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListPurchasedPhoneNumbers")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListPurchasedPhoneNumbersRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PhoneNumberService.ListPurchasedPhoneNumbers
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListPurchasedPhoneNumbersRequest) (*ListPurchasedPhoneNumbersResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPurchasedPhoneNumbersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPurchasedPhoneNumbersRequest) when calling interceptor")
					}
					return s.PhoneNumberService.ListPurchasedPhoneNumbers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPurchasedPhoneNumbersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPurchasedPhoneNumbersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListPurchasedPhoneNumbersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListPurchasedPhoneNumbersResponse and nil error while calling ListPurchasedPhoneNumbers. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *phoneNumberServiceServer) serveListPurchasedPhoneNumbersProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListPurchasedPhoneNumbers")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListPurchasedPhoneNumbersRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PhoneNumberService.ListPurchasedPhoneNumbers
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListPurchasedPhoneNumbersRequest) (*ListPurchasedPhoneNumbersResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListPurchasedPhoneNumbersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListPurchasedPhoneNumbersRequest) when calling interceptor")
					}
					return s.PhoneNumberService.ListPurchasedPhoneNumbers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListPurchasedPhoneNumbersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListPurchasedPhoneNumbersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListPurchasedPhoneNumbersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListPurchasedPhoneNumbersResponse and nil error while calling ListPurchasedPhoneNumbers. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *phoneNumberServiceServer) serveGetPurchasedPhoneNumber(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetPurchasedPhoneNumberJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetPurchasedPhoneNumberProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *phoneNumberServiceServer) serveGetPurchasedPhoneNumberJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPurchasedPhoneNumber")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetPurchasedPhoneNumberRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PhoneNumberService.GetPurchasedPhoneNumber
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetPurchasedPhoneNumberRequest) (*GetPurchasedPhoneNumberResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPurchasedPhoneNumberRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPurchasedPhoneNumberRequest) when calling interceptor")
					}
					return s.PhoneNumberService.GetPurchasedPhoneNumber(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetPurchasedPhoneNumberResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetPurchasedPhoneNumberResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetPurchasedPhoneNumberResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetPurchasedPhoneNumberResponse and nil error while calling GetPurchasedPhoneNumber. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *phoneNumberServiceServer) serveGetPurchasedPhoneNumberProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPurchasedPhoneNumber")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetPurchasedPhoneNumberRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PhoneNumberService.GetPurchasedPhoneNumber
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetPurchasedPhoneNumberRequest) (*GetPurchasedPhoneNumberResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPurchasedPhoneNumberRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPurchasedPhoneNumberRequest) when calling interceptor")
					}
					return s.PhoneNumberService.GetPurchasedPhoneNumber(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetPurchasedPhoneNumberResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetPurchasedPhoneNumberResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetPurchasedPhoneNumberResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetPurchasedPhoneNumberResponse and nil error while calling GetPurchasedPhoneNumber. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *phoneNumberServiceServer) serveUpdatePurchasedPhoneNumber(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdatePurchasedPhoneNumberJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdatePurchasedPhoneNumberProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *phoneNumberServiceServer) serveUpdatePurchasedPhoneNumberJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePurchasedPhoneNumber")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UpdatePurchasedPhoneNumberRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PhoneNumberService.UpdatePurchasedPhoneNumber
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdatePurchasedPhoneNumberRequest) (*UpdatePurchasedPhoneNumberResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePurchasedPhoneNumberRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePurchasedPhoneNumberRequest) when calling interceptor")
					}
					return s.PhoneNumberService.UpdatePurchasedPhoneNumber(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdatePurchasedPhoneNumberResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdatePurchasedPhoneNumberResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdatePurchasedPhoneNumberResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdatePurchasedPhoneNumberResponse and nil error while calling UpdatePurchasedPhoneNumber. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *phoneNumberServiceServer) serveUpdatePurchasedPhoneNumberProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePurchasedPhoneNumber")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UpdatePurchasedPhoneNumberRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PhoneNumberService.UpdatePurchasedPhoneNumber
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdatePurchasedPhoneNumberRequest) (*UpdatePurchasedPhoneNumberResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePurchasedPhoneNumberRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePurchasedPhoneNumberRequest) when calling interceptor")
					}
					return s.PhoneNumberService.UpdatePurchasedPhoneNumber(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdatePurchasedPhoneNumberResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdatePurchasedPhoneNumberResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdatePurchasedPhoneNumberResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdatePurchasedPhoneNumberResponse and nil error while calling UpdatePurchasedPhoneNumber. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *phoneNumberServiceServer) serveReleasePurchasedPhoneNumber(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReleasePurchasedPhoneNumberJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReleasePurchasedPhoneNumberProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *phoneNumberServiceServer) serveReleasePurchasedPhoneNumberJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReleasePurchasedPhoneNumber")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ReleasePurchasedPhoneNumbersRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.PhoneNumberService.ReleasePurchasedPhoneNumber
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ReleasePurchasedPhoneNumbersRequest) (*ReleasePurchasedPhoneNumbersResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReleasePurchasedPhoneNumbersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReleasePurchasedPhoneNumbersRequest) when calling interceptor")
					}
					return s.PhoneNumberService.ReleasePurchasedPhoneNumber(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReleasePurchasedPhoneNumbersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReleasePurchasedPhoneNumbersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ReleasePurchasedPhoneNumbersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReleasePurchasedPhoneNumbersResponse and nil error while calling ReleasePurchasedPhoneNumber. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *phoneNumberServiceServer) serveReleasePurchasedPhoneNumberProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReleasePurchasedPhoneNumber")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ReleasePurchasedPhoneNumbersRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.PhoneNumberService.ReleasePurchasedPhoneNumber
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ReleasePurchasedPhoneNumbersRequest) (*ReleasePurchasedPhoneNumbersResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReleasePurchasedPhoneNumbersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReleasePurchasedPhoneNumbersRequest) when calling interceptor")
					}
					return s.PhoneNumberService.ReleasePurchasedPhoneNumber(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReleasePurchasedPhoneNumbersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReleasePurchasedPhoneNumbersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ReleasePurchasedPhoneNumbersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReleasePurchasedPhoneNumbersResponse and nil error while calling ReleasePurchasedPhoneNumber. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *phoneNumberServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor6, 0
}

func (s *phoneNumberServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.3"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *phoneNumberServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "livekit", "PhoneNumberService")
}

var twirpFileDescriptor6 = []byte{
	// 1242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xae, 0x93, 0xcd, 0x76, 0x73, 0xd2, 0x96, 0xec, 0xb0, 0x6a, 0x5d, 0x2f, 0x6d, 0xb2, 0xde,
	0xb6, 0x84, 0x52, 0xb2, 0x22, 0x45, 0xad, 0xaa, 0xaa, 0x52, 0xb3, 0x59, 0xb7, 0x44, 0xda, 0x66,
	0x23, 0xc7, 0xa9, 0x54, 0x6e, 0x2c, 0xc7, 0x99, 0xcd, 0x8e, 0xea, 0x78, 0x5c, 0xcf, 0x78, 0x21,
	0x12, 0xe2, 0x96, 0x87, 0x00, 0x9e, 0x80, 0x1b, 0xc4, 0x2d, 0x2f, 0xc0, 0x13, 0xf0, 0x18, 0x70,
	0xcd, 0x1d, 0xf2, 0x6f, 0x92, 0x8d, 0x9d, 0x04, 0x51, 0x89, 0x4b, 0x9f, 0xf9, 0xce, 0x9c, 0x33,
	0xdf, 0xf9, 0x35, 0x48, 0x16, 0x39, 0xc7, 0x6f, 0x09, 0xd7, 0x9d, 0x33, 0x6a, 0x63, 0xdd, 0xf6,
	0xc6, 0x03, 0xec, 0xd6, 0x1d, 0x97, 0x72, 0x8a, 0x2e, 0x47, 0x67, 0x52, 0x65, 0x44, 0xe9, 0xc8,
	0xc2, 0x07, 0x81, 0x78, 0xe0, 0x9d, 0x1e, 0x70, 0x32, 0xc6, 0x8c, 0x1b, 0x63, 0x27, 0x44, 0x4a,
	0x3b, 0xf1, 0x2d, 0x63, 0x3a, 0xc4, 0x16, 0x8b, 0xa4, 0xdb, 0xb1, 0x94, 0x91, 0x08, 0x28, 0xff,
	0x22, 0x40, 0xe5, 0x98, 0x30, 0xde, 0xf5, 0xad, 0x75, 0x02, 0x63, 0x6d, 0xfb, 0x1c, 0xdb, 0x9c,
	0xba, 0x13, 0x15, 0xbf, 0xf3, 0x30, 0xe3, 0x68, 0x0f, 0xae, 0x98, 0xd4, 0xb3, 0xb9, 0x3b, 0xd1,
	0x4d, 0x3a, 0xc4, 0xa2, 0x50, 0x15, 0x6a, 0x45, 0xb5, 0x14, 0xc9, 0x5a, 0x74, 0x88, 0xd1, 0x2e,
	0x14, 0x0d, 0x17, 0x1b, 0xe1, 0x79, 0x2e, 0x38, 0xdf, 0xf2, 0x05, 0xc1, 0xe1, 0x0e, 0x14, 0x2c,
	0x32, 0x26, 0x5c, 0xcc, 0x57, 0x85, 0x5a, 0x41, 0x0d, 0x3f, 0xd0, 0x63, 0x00, 0xc7, 0x18, 0x61,
	0x9d, 0xd3, 0xb7, 0xd8, 0x16, 0x37, 0xaa, 0x42, 0xad, 0xd4, 0x10, 0xeb, 0x91, 0x87, 0x75, 0xcd,
	0x97, 0x76, 0x8d, 0x11, 0xb1, 0x0d, 0x4e, 0xa8, 0xad, 0x16, 0x7d, 0x6c, 0x20, 0x94, 0x7f, 0x12,
	0xa0, 0x9a, 0xed, 0x32, 0x73, 0xa8, 0xcd, 0x30, 0x7a, 0x0c, 0x05, 0xc2, 0xf1, 0x98, 0x89, 0x42,
	0x35, 0x5f, 0x2b, 0x35, 0xf6, 0x92, 0x8b, 0xd3, 0xb4, 0xda, 0x1c, 0x8f, 0xd5, 0x10, 0x8f, 0x9e,
	0xc3, 0x07, 0x36, 0xfe, 0x86, 0xeb, 0x33, 0xbe, 0xe5, 0x56, 0xf8, 0x76, 0xd5, 0x57, 0xe8, 0x26,
	0xfe, 0xb9, 0x20, 0x75, 0x3d, 0xd7, 0x3c, 0x33, 0x18, 0x9e, 0x31, 0x16, 0x93, 0xb9, 0x0f, 0x57,
	0x67, 0x23, 0x1b, 0x3a, 0x58, 0x54, 0xaf, 0x38, 0x53, 0x28, 0x43, 0x07, 0xb0, 0xc3, 0x88, 0xa3,
	0x0f, 0x09, 0x73, 0x0c, 0x6e, 0x9e, 0xe9, 0xae, 0x67, 0x61, 0x9d, 0x0c, 0x23, 0x66, 0xb7, 0x19,
	0x71, 0x8e, 0xa2, 0x23, 0xd5, 0xb3, 0x70, 0x7b, 0x28, 0x1b, 0xb0, 0x9b, 0x6a, 0x33, 0x62, 0xe3,
	0x30, 0xcd, 0x68, 0xa9, 0x71, 0x6b, 0xca, 0x4a, 0xa4, 0x3c, 0x9c, 0xd5, 0x9e, 0xf3, 0x49, 0xfe,
	0x23, 0xa6, 0x3d, 0x05, 0xca, 0xe2, 0xd7, 0x25, 0xa1, 0x16, 0x66, 0x43, 0xdd, 0x80, 0x4d, 0xc6,
	0x0d, 0xee, 0xb1, 0xe0, 0x01, 0xd7, 0x1a, 0x52, 0x5a, 0x34, 0x7a, 0x01, 0x42, 0x8d, 0x90, 0x17,
	0xd2, 0x23, 0xbf, 0x76, 0x7a, 0x64, 0x72, 0xb7, 0x91, 0xc5, 0xdd, 0x6f, 0x02, 0xec, 0x2d, 0x79,
	0x58, 0x44, 0xe1, 0xc3, 0xf9, 0x84, 0x5a, 0x41, 0xdd, 0xfb, 0x4a, 0x26, 0x54, 0x81, 0x12, 0xa7,
	0xdc, 0xb0, 0xf4, 0xa0, 0xda, 0xa2, 0x0a, 0x82, 0x40, 0xd4, 0xf2, 0x25, 0xf2, 0x77, 0x70, 0xfb,
	0x25, 0x4e, 0xf5, 0x3d, 0x8e, 0xc9, 0x13, 0xb8, 0xe9, 0xc4, 0xc7, 0x73, 0x5d, 0xc5, 0x67, 0x25,
	0xac, 0xe5, 0xeb, 0x4e, 0x8a, 0x7e, 0x7b, 0xe8, 0x57, 0xfe, 0xac, 0x42, 0x94, 0x7f, 0xa5, 0x99,
	0xbc, 0x90, 0x4d, 0xa8, 0x64, 0xda, 0x8f, 0xa8, 0x7b, 0x7e, 0xe1, 0x16, 0x21, 0xa0, 0x60, 0x05,
	0x83, 0x73, 0x46, 0x7e, 0x15, 0x60, 0xaf, 0xef, 0x0c, 0x0d, 0x8e, 0xff, 0xb7, 0x87, 0x66, 0xe6,
	0x55, 0x3e, 0x2b, 0xaf, 0x4e, 0x41, 0x5e, 0xe6, 0xf3, 0x7b, 0x23, 0xe7, 0x7b, 0x01, 0xf6, 0x55,
	0x6c, 0x61, 0xbf, 0xf6, 0x97, 0xd5, 0xe6, 0x53, 0x90, 0x32, 0xe9, 0x89, 0xdb, 0xd0, 0x8d, 0x74,
	0x7e, 0xd8, 0x62, 0xdb, 0xca, 0x2d, 0xb6, 0x2d, 0xf9, 0x1e, 0xdc, 0x59, 0xee, 0x48, 0xf8, 0x66,
	0xf9, 0xcf, 0x1c, 0x6c, 0xbf, 0xb4, 0xe8, 0xc0, 0xb0, 0x66, 0x8e, 0xd1, 0x35, 0xc8, 0x25, 0x71,
	0xca, 0x91, 0xa1, 0x9f, 0xfa, 0xf8, 0xf3, 0x47, 0x5f, 0xe8, 0xa7, 0xd4, 0x1d, 0x1b, 0x3c, 0x0a,
	0x09, 0xf8, 0xa2, 0x17, 0x81, 0x64, 0x61, 0x2e, 0xe5, 0x57, 0xcc, 0xa5, 0x8d, 0x0b, 0x73, 0xa9,
	0x02, 0xa5, 0x88, 0x00, 0x3e, 0x71, 0xb0, 0x58, 0x08, 0x0d, 0x84, 0x22, 0x6d, 0xe2, 0x60, 0x24,
	0xc1, 0x96, 0x45, 0x4d, 0xc3, 0x22, 0x7c, 0x22, 0x6e, 0x86, 0xca, 0xf1, 0x37, 0xba, 0x0e, 0x9b,
	0x2e, 0x1e, 0x11, 0x6a, 0x8b, 0x97, 0x83, 0x93, 0xe8, 0x0b, 0xdd, 0x02, 0x60, 0x8e, 0x31, 0xd6,
	0x99, 0x49, 0x5d, 0x2c, 0x6e, 0x55, 0x85, 0x9a, 0xa0, 0x16, 0x7d, 0x49, 0xcf, 0x17, 0xa0, 0x27,
	0x00, 0xa6, 0x8b, 0x0d, 0x8e, 0x87, 0xba, 0xc1, 0xc5, 0x62, 0x10, 0x6c, 0xa9, 0x1e, 0x8e, 0xf3,
	0x7a, 0x3c, 0xce, 0xeb, 0x5a, 0x3c, 0xce, 0xd5, 0x62, 0x84, 0x6e, 0xfa, 0xe9, 0x0d, 0x5e, 0x90,
	0x4f, 0x81, 0x2a, 0xac, 0x56, 0x8d, 0xd0, 0x4d, 0x2e, 0xff, 0x28, 0xc0, 0x55, 0x0d, 0x5b, 0xd8,
	0x8f, 0xd6, 0xa4, 0x45, 0x19, 0x47, 0x8f, 0x60, 0xcb, 0xc5, 0x8c, 0x7a, 0xae, 0x19, 0xce, 0xf3,
	0xd9, 0xa6, 0x3c, 0x87, 0xf4, 0x89, 0x50, 0x13, 0xac, 0x4f, 0x89, 0xe9, 0xb9, 0x2e, 0xb6, 0xcd,
	0x49, 0x3c, 0xe7, 0xe3, 0x6f, 0xbf, 0xf9, 0x3b, 0x2e, 0x31, 0xc3, 0x40, 0x08, 0x6a, 0xf8, 0xe1,
	0x47, 0x69, 0x40, 0x2c, 0x8b, 0xd8, 0x23, 0xdd, 0xb3, 0x09, 0x8f, 0xa2, 0x50, 0x8a, 0x64, 0x7d,
	0x9b, 0x70, 0xf9, 0x67, 0x01, 0xc4, 0xac, 0xb9, 0x8c, 0x9e, 0xa5, 0x16, 0xc8, 0xd4, 0xdb, 0x85,
	0x44, 0x9a, 0x2f, 0x5b, 0x19, 0xae, 0x98, 0x86, 0x63, 0x0c, 0x88, 0x45, 0x38, 0xc1, 0x49, 0xde,
	0xce, 0xca, 0xd0, 0x03, 0x28, 0x98, 0x94, 0x71, 0x26, 0xe6, 0x83, 0xde, 0x7e, 0x3d, 0x9d, 0x09,
	0x35, 0x04, 0xc9, 0x7f, 0xe5, 0x60, 0x27, 0x2d, 0xbf, 0xff, 0x4b, 0xff, 0x79, 0x96, 0xd2, 0x7f,
	0xfe, 0xc5, 0x23, 0xa7, 0x03, 0x36, 0xbf, 0xf6, 0x80, 0x7d, 0x0a, 0x25, 0x83, 0x31, 0x32, 0xb2,
	0xc3, 0x7c, 0xda, 0x58, 0x99, 0x4f, 0x10, 0xc3, 0x9b, 0x7e, 0x2f, 0x29, 0xb9, 0x61, 0xa5, 0x07,
	0xca, 0x85, 0xd5, 0xca, 0x31, 0xbc, 0xc9, 0x33, 0x3b, 0xe9, 0x66, 0x46, 0x27, 0xbd, 0xff, 0xb7,
	0x00, 0xdb, 0x0b, 0x49, 0x89, 0xf6, 0xa1, 0xa2, 0x29, 0xc7, 0x4a, 0xf7, 0xcb, 0x93, 0xce, 0x1b,
	0xbd, 0x75, 0xd2, 0xd3, 0x74, 0xed, 0x4d, 0x57, 0xd1, 0xfb, 0x9d, 0x5e, 0x57, 0x69, 0xb5, 0x5f,
	0xb4, 0x95, 0xa3, 0xf2, 0x25, 0x74, 0x17, 0xf6, 0xd2, 0x40, 0x9d, 0xfe, 0xab, 0x43, 0x45, 0xd5,
	0x55, 0xa5, 0xa3, 0x35, 0x8f, 0xcb, 0x42, 0x16, 0xec, 0xf5, 0x49, 0xbb, 0xa5, 0xe8, 0xed, 0xce,
	0xe1, 0x49, 0xbf, 0x73, 0x54, 0xce, 0xa1, 0x7b, 0x20, 0x67, 0xc3, 0x4e, 0xfa, 0x5a, 0x88, 0xcb,
	0x67, 0xb9, 0xd6, 0x7b, 0xd5, 0x4b, 0x2e, 0xdb, 0x40, 0x77, 0xa0, 0x9a, 0x05, 0x4a, 0xae, 0x2a,
	0xdc, 0xff, 0x41, 0x80, 0xed, 0x85, 0x20, 0xfa, 0x06, 0x7c, 0xbd, 0xe4, 0x21, 0x3d, 0xad, 0xa9,
	0xf5, 0x7b, 0x17, 0xde, 0x7e, 0x1b, 0xa4, 0x34, 0x50, 0xb3, 0xa5, 0xb5, 0x5f, 0x2b, 0x65, 0x01,
	0x55, 0x60, 0x37, 0xed, 0xbc, 0xab, 0x74, 0x8e, 0xda, 0x9d, 0x97, 0xe5, 0x1c, 0xaa, 0xc2, 0x47,
	0x69, 0x00, 0x55, 0x39, 0x56, 0x9a, 0x3d, 0xe5, 0xa8, 0x9c, 0x6f, 0xfc, 0x5e, 0x00, 0x34, 0xeb,
	0x1d, 0x76, 0xcf, 0xfd, 0x9a, 0x7f, 0x07, 0x62, 0xd6, 0x86, 0x8e, 0x6a, 0x49, 0x6e, 0xae, 0xf8,
	0xef, 0x90, 0x3e, 0x59, 0x03, 0x19, 0x4d, 0x94, 0x4b, 0x68, 0x00, 0x1f, 0xa6, 0x6c, 0xc0, 0x68,
	0x7f, 0x61, 0x90, 0x2e, 0x2e, 0x0e, 0xd2, 0x9d, 0xe5, 0xa0, 0xc4, 0x06, 0x87, 0x9b, 0x99, 0x8b,
	0x22, 0xba, 0xe0, 0xed, 0x92, 0x49, 0x2c, 0xdd, 0x5f, 0x07, 0x9a, 0x58, 0xb5, 0xe1, 0x46, 0xc6,
	0x86, 0x85, 0x3e, 0x9e, 0x36, 0x88, 0xa5, 0x3b, 0xa0, 0x54, 0x5b, 0x0d, 0x4c, 0xec, 0x7d, 0x0d,
	0x52, 0xf6, 0xde, 0x82, 0xa6, 0xbe, 0xaf, 0x5c, 0xc8, 0xa4, 0x4f, 0xd7, 0xc2, 0x26, 0x86, 0xbf,
	0x85, 0xdd, 0x25, 0xeb, 0x03, 0x7a, 0x90, 0xdc, 0xb6, 0xc6, 0xb6, 0x23, 0x7d, 0xb6, 0x26, 0x3a,
	0xb6, 0x7e, 0x78, 0xf7, 0xab, 0xfd, 0x11, 0xe1, 0x67, 0xde, 0xa0, 0x6e, 0xd2, 0xf1, 0x41, 0xa4,
	0x1c, 0xfe, 0x61, 0x9b, 0xd4, 0x8a, 0x05, 0x83, 0xcd, 0x40, 0xf2, 0xf0, 0x9f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x89, 0x28, 0x6f, 0x02, 0xa8, 0x0f, 0x00, 0x00,
}
