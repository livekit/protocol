// Code generated by protoc-gen-twirp v8.1.3, DO NOT EDIT.
// source: livekit_egress.proto

package livekit

import context "context"
import fmt "fmt"
import http "net/http"
import io "io"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ================
// Egress Interface
// ================

type Egress interface {
	// start recording or streaming a room, participant, or tracks
	StartRoomCompositeEgress(context.Context, *RoomCompositeEgressRequest) (*EgressInfo, error)

	StartWebEgress(context.Context, *WebEgressRequest) (*EgressInfo, error)

	StartParticipantEgress(context.Context, *ParticipantEgressRequest) (*EgressInfo, error)

	StartTrackCompositeEgress(context.Context, *TrackCompositeEgressRequest) (*EgressInfo, error)

	StartTrackEgress(context.Context, *TrackEgressRequest) (*EgressInfo, error)

	// update web composite layout
	UpdateLayout(context.Context, *UpdateLayoutRequest) (*EgressInfo, error)

	// add or remove stream endpoints
	UpdateStream(context.Context, *UpdateStreamRequest) (*EgressInfo, error)

	// list available egress
	ListEgress(context.Context, *ListEgressRequest) (*ListEgressResponse, error)

	// stop a recording or stream
	StopEgress(context.Context, *StopEgressRequest) (*EgressInfo, error)
}

// ======================
// Egress Protobuf Client
// ======================

type egressProtobufClient struct {
	client      HTTPClient
	urls        [9]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewEgressProtobufClient creates a Protobuf client that implements the Egress interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewEgressProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Egress {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "livekit", "Egress")
	urls := [9]string{
		serviceURL + "StartRoomCompositeEgress",
		serviceURL + "StartWebEgress",
		serviceURL + "StartParticipantEgress",
		serviceURL + "StartTrackCompositeEgress",
		serviceURL + "StartTrackEgress",
		serviceURL + "UpdateLayout",
		serviceURL + "UpdateStream",
		serviceURL + "ListEgress",
		serviceURL + "StopEgress",
	}

	return &egressProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *egressProtobufClient) StartRoomCompositeEgress(ctx context.Context, in *RoomCompositeEgressRequest) (*EgressInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "Egress")
	ctx = ctxsetters.WithMethodName(ctx, "StartRoomCompositeEgress")
	caller := c.callStartRoomCompositeEgress
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RoomCompositeEgressRequest) (*EgressInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RoomCompositeEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RoomCompositeEgressRequest) when calling interceptor")
					}
					return c.callStartRoomCompositeEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *egressProtobufClient) callStartRoomCompositeEgress(ctx context.Context, in *RoomCompositeEgressRequest) (*EgressInfo, error) {
	out := new(EgressInfo)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *egressProtobufClient) StartWebEgress(ctx context.Context, in *WebEgressRequest) (*EgressInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "Egress")
	ctx = ctxsetters.WithMethodName(ctx, "StartWebEgress")
	caller := c.callStartWebEgress
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *WebEgressRequest) (*EgressInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*WebEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*WebEgressRequest) when calling interceptor")
					}
					return c.callStartWebEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *egressProtobufClient) callStartWebEgress(ctx context.Context, in *WebEgressRequest) (*EgressInfo, error) {
	out := new(EgressInfo)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *egressProtobufClient) StartParticipantEgress(ctx context.Context, in *ParticipantEgressRequest) (*EgressInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "Egress")
	ctx = ctxsetters.WithMethodName(ctx, "StartParticipantEgress")
	caller := c.callStartParticipantEgress
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ParticipantEgressRequest) (*EgressInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ParticipantEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ParticipantEgressRequest) when calling interceptor")
					}
					return c.callStartParticipantEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *egressProtobufClient) callStartParticipantEgress(ctx context.Context, in *ParticipantEgressRequest) (*EgressInfo, error) {
	out := new(EgressInfo)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *egressProtobufClient) StartTrackCompositeEgress(ctx context.Context, in *TrackCompositeEgressRequest) (*EgressInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "Egress")
	ctx = ctxsetters.WithMethodName(ctx, "StartTrackCompositeEgress")
	caller := c.callStartTrackCompositeEgress
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *TrackCompositeEgressRequest) (*EgressInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TrackCompositeEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TrackCompositeEgressRequest) when calling interceptor")
					}
					return c.callStartTrackCompositeEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *egressProtobufClient) callStartTrackCompositeEgress(ctx context.Context, in *TrackCompositeEgressRequest) (*EgressInfo, error) {
	out := new(EgressInfo)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *egressProtobufClient) StartTrackEgress(ctx context.Context, in *TrackEgressRequest) (*EgressInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "Egress")
	ctx = ctxsetters.WithMethodName(ctx, "StartTrackEgress")
	caller := c.callStartTrackEgress
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *TrackEgressRequest) (*EgressInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TrackEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TrackEgressRequest) when calling interceptor")
					}
					return c.callStartTrackEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *egressProtobufClient) callStartTrackEgress(ctx context.Context, in *TrackEgressRequest) (*EgressInfo, error) {
	out := new(EgressInfo)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *egressProtobufClient) UpdateLayout(ctx context.Context, in *UpdateLayoutRequest) (*EgressInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "Egress")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateLayout")
	caller := c.callUpdateLayout
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateLayoutRequest) (*EgressInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateLayoutRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateLayoutRequest) when calling interceptor")
					}
					return c.callUpdateLayout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *egressProtobufClient) callUpdateLayout(ctx context.Context, in *UpdateLayoutRequest) (*EgressInfo, error) {
	out := new(EgressInfo)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *egressProtobufClient) UpdateStream(ctx context.Context, in *UpdateStreamRequest) (*EgressInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "Egress")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateStream")
	caller := c.callUpdateStream
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateStreamRequest) (*EgressInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateStreamRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateStreamRequest) when calling interceptor")
					}
					return c.callUpdateStream(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *egressProtobufClient) callUpdateStream(ctx context.Context, in *UpdateStreamRequest) (*EgressInfo, error) {
	out := new(EgressInfo)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *egressProtobufClient) ListEgress(ctx context.Context, in *ListEgressRequest) (*ListEgressResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "Egress")
	ctx = ctxsetters.WithMethodName(ctx, "ListEgress")
	caller := c.callListEgress
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListEgressRequest) (*ListEgressResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListEgressRequest) when calling interceptor")
					}
					return c.callListEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListEgressResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListEgressResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *egressProtobufClient) callListEgress(ctx context.Context, in *ListEgressRequest) (*ListEgressResponse, error) {
	out := new(ListEgressResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *egressProtobufClient) StopEgress(ctx context.Context, in *StopEgressRequest) (*EgressInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "Egress")
	ctx = ctxsetters.WithMethodName(ctx, "StopEgress")
	caller := c.callStopEgress
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *StopEgressRequest) (*EgressInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StopEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StopEgressRequest) when calling interceptor")
					}
					return c.callStopEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *egressProtobufClient) callStopEgress(ctx context.Context, in *StopEgressRequest) (*EgressInfo, error) {
	out := new(EgressInfo)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==================
// Egress JSON Client
// ==================

type egressJSONClient struct {
	client      HTTPClient
	urls        [9]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewEgressJSONClient creates a JSON client that implements the Egress interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewEgressJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Egress {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "livekit", "Egress")
	urls := [9]string{
		serviceURL + "StartRoomCompositeEgress",
		serviceURL + "StartWebEgress",
		serviceURL + "StartParticipantEgress",
		serviceURL + "StartTrackCompositeEgress",
		serviceURL + "StartTrackEgress",
		serviceURL + "UpdateLayout",
		serviceURL + "UpdateStream",
		serviceURL + "ListEgress",
		serviceURL + "StopEgress",
	}

	return &egressJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *egressJSONClient) StartRoomCompositeEgress(ctx context.Context, in *RoomCompositeEgressRequest) (*EgressInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "Egress")
	ctx = ctxsetters.WithMethodName(ctx, "StartRoomCompositeEgress")
	caller := c.callStartRoomCompositeEgress
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RoomCompositeEgressRequest) (*EgressInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RoomCompositeEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RoomCompositeEgressRequest) when calling interceptor")
					}
					return c.callStartRoomCompositeEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *egressJSONClient) callStartRoomCompositeEgress(ctx context.Context, in *RoomCompositeEgressRequest) (*EgressInfo, error) {
	out := new(EgressInfo)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *egressJSONClient) StartWebEgress(ctx context.Context, in *WebEgressRequest) (*EgressInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "Egress")
	ctx = ctxsetters.WithMethodName(ctx, "StartWebEgress")
	caller := c.callStartWebEgress
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *WebEgressRequest) (*EgressInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*WebEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*WebEgressRequest) when calling interceptor")
					}
					return c.callStartWebEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *egressJSONClient) callStartWebEgress(ctx context.Context, in *WebEgressRequest) (*EgressInfo, error) {
	out := new(EgressInfo)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *egressJSONClient) StartParticipantEgress(ctx context.Context, in *ParticipantEgressRequest) (*EgressInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "Egress")
	ctx = ctxsetters.WithMethodName(ctx, "StartParticipantEgress")
	caller := c.callStartParticipantEgress
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ParticipantEgressRequest) (*EgressInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ParticipantEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ParticipantEgressRequest) when calling interceptor")
					}
					return c.callStartParticipantEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *egressJSONClient) callStartParticipantEgress(ctx context.Context, in *ParticipantEgressRequest) (*EgressInfo, error) {
	out := new(EgressInfo)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *egressJSONClient) StartTrackCompositeEgress(ctx context.Context, in *TrackCompositeEgressRequest) (*EgressInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "Egress")
	ctx = ctxsetters.WithMethodName(ctx, "StartTrackCompositeEgress")
	caller := c.callStartTrackCompositeEgress
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *TrackCompositeEgressRequest) (*EgressInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TrackCompositeEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TrackCompositeEgressRequest) when calling interceptor")
					}
					return c.callStartTrackCompositeEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *egressJSONClient) callStartTrackCompositeEgress(ctx context.Context, in *TrackCompositeEgressRequest) (*EgressInfo, error) {
	out := new(EgressInfo)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *egressJSONClient) StartTrackEgress(ctx context.Context, in *TrackEgressRequest) (*EgressInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "Egress")
	ctx = ctxsetters.WithMethodName(ctx, "StartTrackEgress")
	caller := c.callStartTrackEgress
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *TrackEgressRequest) (*EgressInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TrackEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TrackEgressRequest) when calling interceptor")
					}
					return c.callStartTrackEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *egressJSONClient) callStartTrackEgress(ctx context.Context, in *TrackEgressRequest) (*EgressInfo, error) {
	out := new(EgressInfo)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *egressJSONClient) UpdateLayout(ctx context.Context, in *UpdateLayoutRequest) (*EgressInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "Egress")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateLayout")
	caller := c.callUpdateLayout
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateLayoutRequest) (*EgressInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateLayoutRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateLayoutRequest) when calling interceptor")
					}
					return c.callUpdateLayout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *egressJSONClient) callUpdateLayout(ctx context.Context, in *UpdateLayoutRequest) (*EgressInfo, error) {
	out := new(EgressInfo)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *egressJSONClient) UpdateStream(ctx context.Context, in *UpdateStreamRequest) (*EgressInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "Egress")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateStream")
	caller := c.callUpdateStream
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateStreamRequest) (*EgressInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateStreamRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateStreamRequest) when calling interceptor")
					}
					return c.callUpdateStream(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *egressJSONClient) callUpdateStream(ctx context.Context, in *UpdateStreamRequest) (*EgressInfo, error) {
	out := new(EgressInfo)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *egressJSONClient) ListEgress(ctx context.Context, in *ListEgressRequest) (*ListEgressResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "Egress")
	ctx = ctxsetters.WithMethodName(ctx, "ListEgress")
	caller := c.callListEgress
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListEgressRequest) (*ListEgressResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListEgressRequest) when calling interceptor")
					}
					return c.callListEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListEgressResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListEgressResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *egressJSONClient) callListEgress(ctx context.Context, in *ListEgressRequest) (*ListEgressResponse, error) {
	out := new(ListEgressResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *egressJSONClient) StopEgress(ctx context.Context, in *StopEgressRequest) (*EgressInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "Egress")
	ctx = ctxsetters.WithMethodName(ctx, "StopEgress")
	caller := c.callStopEgress
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *StopEgressRequest) (*EgressInfo, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StopEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StopEgressRequest) when calling interceptor")
					}
					return c.callStopEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *egressJSONClient) callStopEgress(ctx context.Context, in *StopEgressRequest) (*EgressInfo, error) {
	out := new(EgressInfo)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =====================
// Egress Server Handler
// =====================

type egressServer struct {
	Egress
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewEgressServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewEgressServer(svc Egress, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &egressServer{
		Egress:           svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *egressServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *egressServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// EgressPathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const EgressPathPrefix = "/twirp/livekit.Egress/"

func (s *egressServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "livekit")
	ctx = ctxsetters.WithServiceName(ctx, "Egress")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "livekit.Egress" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "StartRoomCompositeEgress":
		s.serveStartRoomCompositeEgress(ctx, resp, req)
		return
	case "StartWebEgress":
		s.serveStartWebEgress(ctx, resp, req)
		return
	case "StartParticipantEgress":
		s.serveStartParticipantEgress(ctx, resp, req)
		return
	case "StartTrackCompositeEgress":
		s.serveStartTrackCompositeEgress(ctx, resp, req)
		return
	case "StartTrackEgress":
		s.serveStartTrackEgress(ctx, resp, req)
		return
	case "UpdateLayout":
		s.serveUpdateLayout(ctx, resp, req)
		return
	case "UpdateStream":
		s.serveUpdateStream(ctx, resp, req)
		return
	case "ListEgress":
		s.serveListEgress(ctx, resp, req)
		return
	case "StopEgress":
		s.serveStopEgress(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *egressServer) serveStartRoomCompositeEgress(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveStartRoomCompositeEgressJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveStartRoomCompositeEgressProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *egressServer) serveStartRoomCompositeEgressJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StartRoomCompositeEgress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(RoomCompositeEgressRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Egress.StartRoomCompositeEgress
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RoomCompositeEgressRequest) (*EgressInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RoomCompositeEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RoomCompositeEgressRequest) when calling interceptor")
					}
					return s.Egress.StartRoomCompositeEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EgressInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EgressInfo and nil error while calling StartRoomCompositeEgress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *egressServer) serveStartRoomCompositeEgressProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StartRoomCompositeEgress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(RoomCompositeEgressRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Egress.StartRoomCompositeEgress
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RoomCompositeEgressRequest) (*EgressInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RoomCompositeEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RoomCompositeEgressRequest) when calling interceptor")
					}
					return s.Egress.StartRoomCompositeEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EgressInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EgressInfo and nil error while calling StartRoomCompositeEgress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *egressServer) serveStartWebEgress(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveStartWebEgressJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveStartWebEgressProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *egressServer) serveStartWebEgressJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StartWebEgress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(WebEgressRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Egress.StartWebEgress
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *WebEgressRequest) (*EgressInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*WebEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*WebEgressRequest) when calling interceptor")
					}
					return s.Egress.StartWebEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EgressInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EgressInfo and nil error while calling StartWebEgress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *egressServer) serveStartWebEgressProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StartWebEgress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(WebEgressRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Egress.StartWebEgress
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *WebEgressRequest) (*EgressInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*WebEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*WebEgressRequest) when calling interceptor")
					}
					return s.Egress.StartWebEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EgressInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EgressInfo and nil error while calling StartWebEgress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *egressServer) serveStartParticipantEgress(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveStartParticipantEgressJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveStartParticipantEgressProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *egressServer) serveStartParticipantEgressJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StartParticipantEgress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ParticipantEgressRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Egress.StartParticipantEgress
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ParticipantEgressRequest) (*EgressInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ParticipantEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ParticipantEgressRequest) when calling interceptor")
					}
					return s.Egress.StartParticipantEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EgressInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EgressInfo and nil error while calling StartParticipantEgress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *egressServer) serveStartParticipantEgressProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StartParticipantEgress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ParticipantEgressRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Egress.StartParticipantEgress
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ParticipantEgressRequest) (*EgressInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ParticipantEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ParticipantEgressRequest) when calling interceptor")
					}
					return s.Egress.StartParticipantEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EgressInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EgressInfo and nil error while calling StartParticipantEgress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *egressServer) serveStartTrackCompositeEgress(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveStartTrackCompositeEgressJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveStartTrackCompositeEgressProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *egressServer) serveStartTrackCompositeEgressJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StartTrackCompositeEgress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(TrackCompositeEgressRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Egress.StartTrackCompositeEgress
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *TrackCompositeEgressRequest) (*EgressInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TrackCompositeEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TrackCompositeEgressRequest) when calling interceptor")
					}
					return s.Egress.StartTrackCompositeEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EgressInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EgressInfo and nil error while calling StartTrackCompositeEgress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *egressServer) serveStartTrackCompositeEgressProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StartTrackCompositeEgress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(TrackCompositeEgressRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Egress.StartTrackCompositeEgress
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *TrackCompositeEgressRequest) (*EgressInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TrackCompositeEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TrackCompositeEgressRequest) when calling interceptor")
					}
					return s.Egress.StartTrackCompositeEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EgressInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EgressInfo and nil error while calling StartTrackCompositeEgress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *egressServer) serveStartTrackEgress(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveStartTrackEgressJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveStartTrackEgressProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *egressServer) serveStartTrackEgressJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StartTrackEgress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(TrackEgressRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Egress.StartTrackEgress
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *TrackEgressRequest) (*EgressInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TrackEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TrackEgressRequest) when calling interceptor")
					}
					return s.Egress.StartTrackEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EgressInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EgressInfo and nil error while calling StartTrackEgress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *egressServer) serveStartTrackEgressProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StartTrackEgress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(TrackEgressRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Egress.StartTrackEgress
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *TrackEgressRequest) (*EgressInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TrackEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TrackEgressRequest) when calling interceptor")
					}
					return s.Egress.StartTrackEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EgressInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EgressInfo and nil error while calling StartTrackEgress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *egressServer) serveUpdateLayout(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateLayoutJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateLayoutProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *egressServer) serveUpdateLayoutJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateLayout")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UpdateLayoutRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Egress.UpdateLayout
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateLayoutRequest) (*EgressInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateLayoutRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateLayoutRequest) when calling interceptor")
					}
					return s.Egress.UpdateLayout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EgressInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EgressInfo and nil error while calling UpdateLayout. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *egressServer) serveUpdateLayoutProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateLayout")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UpdateLayoutRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Egress.UpdateLayout
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateLayoutRequest) (*EgressInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateLayoutRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateLayoutRequest) when calling interceptor")
					}
					return s.Egress.UpdateLayout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EgressInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EgressInfo and nil error while calling UpdateLayout. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *egressServer) serveUpdateStream(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateStreamJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateStreamProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *egressServer) serveUpdateStreamJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateStream")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UpdateStreamRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Egress.UpdateStream
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateStreamRequest) (*EgressInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateStreamRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateStreamRequest) when calling interceptor")
					}
					return s.Egress.UpdateStream(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EgressInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EgressInfo and nil error while calling UpdateStream. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *egressServer) serveUpdateStreamProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateStream")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UpdateStreamRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Egress.UpdateStream
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateStreamRequest) (*EgressInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateStreamRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateStreamRequest) when calling interceptor")
					}
					return s.Egress.UpdateStream(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EgressInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EgressInfo and nil error while calling UpdateStream. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *egressServer) serveListEgress(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListEgressJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListEgressProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *egressServer) serveListEgressJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListEgress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListEgressRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Egress.ListEgress
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListEgressRequest) (*ListEgressResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListEgressRequest) when calling interceptor")
					}
					return s.Egress.ListEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListEgressResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListEgressResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListEgressResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListEgressResponse and nil error while calling ListEgress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *egressServer) serveListEgressProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListEgress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListEgressRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Egress.ListEgress
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListEgressRequest) (*ListEgressResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListEgressRequest) when calling interceptor")
					}
					return s.Egress.ListEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListEgressResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListEgressResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListEgressResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListEgressResponse and nil error while calling ListEgress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *egressServer) serveStopEgress(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveStopEgressJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveStopEgressProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *egressServer) serveStopEgressJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StopEgress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(StopEgressRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Egress.StopEgress
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *StopEgressRequest) (*EgressInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StopEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StopEgressRequest) when calling interceptor")
					}
					return s.Egress.StopEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EgressInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EgressInfo and nil error while calling StopEgress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *egressServer) serveStopEgressProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StopEgress")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(StopEgressRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Egress.StopEgress
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *StopEgressRequest) (*EgressInfo, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*StopEgressRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*StopEgressRequest) when calling interceptor")
					}
					return s.Egress.StopEgress(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*EgressInfo)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*EgressInfo) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *EgressInfo
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EgressInfo and nil error while calling StopEgress. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *egressServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor1, 0
}

func (s *egressServer) ProtocGenTwirpVersion() string {
	return "v8.1.3"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *egressServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "livekit", "Egress")
}

var twirpFileDescriptor1 = []byte{
	// 3226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x4b, 0x73, 0x1b, 0xc7,
	0xb5, 0xe6, 0x0c, 0xde, 0x07, 0x0f, 0x0e, 0x9b, 0x14, 0x0d, 0x51, 0xbe, 0x96, 0x0c, 0xf9, 0x21,
	0xd3, 0x36, 0xc5, 0x2b, 0xca, 0xb2, 0x2c, 0x5f, 0xfb, 0x06, 0x24, 0x87, 0x24, 0x6c, 0x90, 0x40,
	0x06, 0xa0, 0xe4, 0x64, 0x33, 0x35, 0xc4, 0x34, 0xc9, 0x29, 0x02, 0x33, 0xf0, 0x4c, 0x83, 0x32,
	0x5c, 0xf9, 0x01, 0x59, 0xe6, 0xb1, 0x4b, 0xa5, 0x2a, 0x9b, 0x54, 0x16, 0xa9, 0xec, 0xf3, 0x1f,
	0x92, 0x4a, 0x65, 0x91, 0xca, 0x1f, 0xc8, 0x32, 0xa9, 0x64, 0x97, 0x7d, 0xaa, 0x1f, 0xf3, 0xc0,
	0x60, 0x48, 0x81, 0xa2, 0xaa, 0xb2, 0x48, 0x76, 0xd3, 0xe7, 0x85, 0xd3, 0xa7, 0xbf, 0x3e, 0xdd,
	0xe7, 0x34, 0x60, 0xa9, 0x6f, 0x9d, 0xe3, 0x33, 0x8b, 0xe8, 0xf8, 0xc4, 0xc5, 0x9e, 0xb7, 0x36,
	0x74, 0x1d, 0xe2, 0xa0, 0x9c, 0xa0, 0xae, 0x04, 0xec, 0x81, 0x63, 0xe2, 0xbe, 0x60, 0xd7, 0xfe,
	0x9c, 0x85, 0x15, 0xcd, 0x71, 0x06, 0x5b, 0xce, 0x60, 0xe8, 0x78, 0x16, 0xc1, 0x2a, 0x53, 0xd6,
	0xf0, 0xd7, 0x23, 0xec, 0x11, 0x74, 0x0b, 0x0a, 0xae, 0xe3, 0x0c, 0x74, 0xdb, 0x18, 0xe0, 0xaa,
	0x74, 0x47, 0xba, 0x57, 0xd0, 0xf2, 0x94, 0x70, 0x60, 0x0c, 0x30, 0x5a, 0x86, 0x6c, 0xdf, 0x18,
	0x3b, 0x23, 0x52, 0x95, 0x19, 0x47, 0x8c, 0xd0, 0xff, 0x00, 0x18, 0x23, 0xd3, 0x72, 0x74, 0xc7,
	0xee, 0x8f, 0xab, 0xa9, 0x3b, 0xd2, 0xbd, 0xbc, 0x56, 0x60, 0x94, 0x96, 0xdd, 0x1f, 0xa3, 0x8f,
	0xa1, 0xc4, 0xd9, 0x03, 0xeb, 0x1b, 0xcb, 0x3e, 0xa9, 0xce, 0xdf, 0x91, 0xee, 0x55, 0x1e, 0x2c,
	0xad, 0x09, 0xff, 0xd6, 0xea, 0x94, 0xb9, 0xcf, 0x78, 0x5a, 0xd1, 0x08, 0x07, 0xd4, 0xee, 0xb9,
	0x65, 0x62, 0x61, 0x37, 0xcd, 0xed, 0x32, 0x0a, 0xb3, 0xfb, 0x0e, 0xcc, 0xf7, 0x46, 0x1e, 0x71,
	0x06, 0xfa, 0x91, 0xe1, 0x61, 0x7d, 0xe4, 0xf6, 0xab, 0x19, 0xe6, 0x57, 0x99, 0x93, 0x37, 0x0d,
	0x0f, 0x1f, 0xba, 0x7d, 0xf4, 0x10, 0xd2, 0xc7, 0x56, 0x1f, 0x57, 0xb3, 0x77, 0xa4, 0x7b, 0xc5,
	0x07, 0x2b, 0xc1, 0xef, 0xaa, 0x76, 0xcf, 0x31, 0xb1, 0xb9, 0x63, 0xf5, 0x71, 0x6b, 0x44, 0x86,
	0x23, 0xb2, 0x29, 0x57, 0xa5, 0xbd, 0x39, 0x8d, 0x49, 0xa3, 0x0d, 0xc8, 0x7a, 0xc4, 0xc5, 0xc6,
	0xa0, 0x9a, 0x63, 0x7a, 0x37, 0x02, 0xbd, 0x0e, 0x23, 0x4f, 0xa8, 0x08, 0x51, 0xf4, 0x39, 0xe4,
	0x3d, 0x7c, 0x32, 0xc0, 0x36, 0xf1, 0xaa, 0xc0, 0xd4, 0x5e, 0x0f, 0xd5, 0x38, 0x23, 0xe1, 0x07,
	0x03, 0x1d, 0xf4, 0x18, 0xb2, 0x43, 0x17, 0x7b, 0x98, 0x54, 0xf3, 0x2c, 0x48, 0x6f, 0x4c, 0x3a,
	0x6b, 0xd9, 0x27, 0xad, 0x21, 0xb1, 0x1c, 0xdb, 0x6b, 0x33, 0xa9, 0x3d, 0x49, 0x13, 0xf2, 0xe8,
	0x11, 0xe4, 0x0d, 0xf3, 0xdc, 0xb0, 0x7b, 0xd8, 0xac, 0x16, 0xd8, 0x2f, 0x57, 0x2f, 0xd2, 0xdd,
	0x93, 0xb4, 0x40, 0x16, 0x7d, 0x06, 0x25, 0x3a, 0x5d, 0xdd, 0x61, 0x0e, 0x79, 0xd5, 0xe2, 0x9d,
	0xd4, 0xe5, 0x41, 0xd2, 0x8a, 0xc7, 0xc1, 0xb7, 0x87, 0xfe, 0x0f, 0x2a, 0x7c, 0xea, 0x81, 0x81,
	0x12, 0x33, 0x90, 0x1c, 0x2d, 0xad, 0xec, 0x45, 0x46, 0x1e, 0x52, 0x61, 0x5e, 0x4c, 0x3d, 0x50,
	0x2f, 0x33, 0xf5, 0x4b, 0xa3, 0xa6, 0x55, 0x84, 0x92, 0x6f, 0xe6, 0x13, 0x28, 0x5b, 0x03, 0xe3,
	0x24, 0x9c, 0x44, 0x85, 0x19, 0x09, 0x11, 0xd6, 0xa0, 0x5c, 0xa1, 0x5c, 0xb2, 0xc2, 0x81, 0x87,
	0x1e, 0x40, 0xfe, 0x39, 0x3e, 0x3a, 0x75, 0x9c, 0x33, 0xaf, 0xaa, 0x30, 0xad, 0xe5, 0x40, 0xeb,
	0x19, 0x67, 0x6c, 0x39, 0xf6, 0xb1, 0x75, 0xa2, 0x05, 0x72, 0x9b, 0x79, 0xc8, 0xf2, 0x1f, 0xda,
	0x2c, 0x40, 0xce, 0xe1, 0x31, 0xad, 0xfd, 0x33, 0x03, 0xca, 0x33, 0x7c, 0x34, 0xb9, 0x9b, 0x14,
	0x48, 0x51, 0x54, 0xf2, 0x7d, 0x44, 0x3f, 0x63, 0x5b, 0x45, 0x8e, 0x6f, 0x95, 0x49, 0xc4, 0xa7,
	0xe2, 0x88, 0xff, 0x00, 0x90, 0xf1, 0xdc, 0xb0, 0x88, 0xee, 0x11, 0xc3, 0x25, 0xba, 0x67, 0x9d,
	0xd8, 0x46, 0xbf, 0x5a, 0x62, 0x62, 0x0a, 0xe3, 0x74, 0x28, 0xa3, 0xc3, 0xe8, 0x01, 0xee, 0xd3,
	0x2f, 0x89, 0xfb, 0xcc, 0xcb, 0xe1, 0x3e, 0x7b, 0x2d, 0xdc, 0xe7, 0xae, 0x81, 0xfb, 0xfc, 0x35,
	0x70, 0x5f, 0xb8, 0x2e, 0xee, 0xe1, 0x7a, 0xb8, 0x2f, 0xbe, 0x0a, 0xdc, 0x97, 0x5f, 0x0a, 0xf7,
	0x95, 0xeb, 0xe0, 0xfe, 0x57, 0x69, 0xa8, 0xb6, 0x0d, 0x97, 0x58, 0x3d, 0x6b, 0x68, 0xd8, 0xe4,
	0x0a, 0xa7, 0xc9, 0x0a, 0xe4, 0x2d, 0x13, 0xdb, 0xc4, 0x22, 0x63, 0x71, 0x9e, 0x04, 0x63, 0xf4,
	0x26, 0x94, 0xbc, 0x9e, 0x8b, 0xb1, 0xad, 0x7b, 0xa7, 0x86, 0x8b, 0xc5, 0x4e, 0x28, 0x72, 0x5a,
	0x87, 0x92, 0x22, 0x90, 0x49, 0xcf, 0x04, 0x99, 0xb9, 0x44, 0xc8, 0x64, 0x5e, 0x00, 0x99, 0xb9,
	0x4b, 0x20, 0x93, 0xbd, 0x2e, 0x64, 0x72, 0xd7, 0x83, 0x4c, 0xfe, 0x55, 0x40, 0xa6, 0xf0, 0x52,
	0x90, 0x81, 0x19, 0x21, 0x13, 0x01, 0xca, 0xdf, 0x32, 0x70, 0xab, 0xeb, 0x1a, 0xbd, 0xb3, 0x97,
	0xb9, 0x79, 0xbc, 0x05, 0x15, 0x9e, 0x36, 0x09, 0xb5, 0xa0, 0x5b, 0xa6, 0x40, 0x0c, 0xbf, 0x58,
	0x30, 0xb3, 0x0d, 0x93, 0x4a, 0xf1, 0xec, 0x19, 0x48, 0xa5, 0xb8, 0x14, 0xa3, 0xfa, 0x52, 0xff,
	0xa6, 0xb4, 0x98, 0xbf, 0x56, 0x5a, 0xcc, 0x5e, 0x23, 0x2d, 0xe6, 0xfe, 0x7b, 0x1d, 0x78, 0x19,
	0x8c, 0xcf, 0x5f, 0x27, 0x2d, 0xfe, 0x45, 0x02, 0xc4, 0x00, 0x77, 0x05, 0x90, 0xdf, 0x84, 0x7c,
	0x0c, 0xde, 0x39, 0x22, 0x30, 0x7b, 0x5f, 0x60, 0x36, 0xc5, 0x96, 0xf2, 0x66, 0xe0, 0xd3, 0xb6,
	0xe5, 0xe2, 0x1e, 0x09, 0x63, 0x11, 0xc0, 0xf5, 0x6d, 0x28, 0x3f, 0xc7, 0x47, 0x9e, 0xd3, 0x3b,
	0xc3, 0x84, 0xdd, 0x8c, 0x29, 0xda, 0x0b, 0x7b, 0x73, 0x5a, 0x29, 0x20, 0xd3, 0xab, 0x71, 0x74,
	0xbe, 0x99, 0xab, 0xce, 0xb7, 0xf6, 0x7b, 0x19, 0x16, 0xa6, 0x00, 0x81, 0x3e, 0x82, 0x02, 0x83,
	0x10, 0x19, 0x0f, 0xf9, 0x1c, 0x2b, 0x71, 0xec, 0x71, 0xf1, 0xee, 0x78, 0x88, 0xb5, 0xfc, 0xb1,
	0xf8, 0xa2, 0xc7, 0x01, 0xfd, 0x1e, 0x1a, 0xe4, 0xd4, 0x3f, 0x0e, 0xfc, 0x31, 0x7a, 0x0f, 0x14,
	0xd3, 0xf2, 0x8c, 0xa3, 0x3e, 0xd6, 0x07, 0x86, 0x6d, 0x1d, 0x63, 0x8f, 0xef, 0x88, 0xbc, 0x36,
	0x2f, 0xe8, 0xfb, 0x82, 0x8c, 0xee, 0x82, 0xec, 0x6d, 0x88, 0x38, 0x2d, 0x84, 0xb0, 0xd9, 0x38,
	0x1c, 0xf6, 0x1d, 0xc3, 0xdc, 0x9b, 0xd3, 0x64, 0x6f, 0x03, 0xbd, 0x03, 0xa9, 0x93, 0xde, 0x50,
	0x64, 0x00, 0x14, 0x48, 0xed, 0x6e, 0xb5, 0x03, 0x31, 0x2a, 0x80, 0xd6, 0x21, 0x63, 0x7c, 0x3b,
	0x72, 0xf1, 0xd4, 0x31, 0x51, 0xa7, 0xd4, 0xcd, 0xbe, 0x73, 0x14, 0xc8, 0x73, 0x41, 0x74, 0x1f,
	0xb2, 0x46, 0xdf, 0x6a, 0x75, 0x3a, 0x53, 0x55, 0x43, 0x9d, 0x91, 0x03, 0x79, 0x21, 0x16, 0x89,
	0xe6, 0x2f, 0xd3, 0xb0, 0x98, 0x00, 0x6f, 0xf4, 0x04, 0xf2, 0xac, 0x74, 0xeb, 0x39, 0x7d, 0x11,
	0xce, 0x37, 0x92, 0xb7, 0x43, 0x5b, 0x48, 0x69, 0x81, 0x3c, 0x7a, 0x17, 0xe6, 0x69, 0x10, 0x29,
	0xdc, 0xf4, 0xa1, 0x8b, 0x8f, 0xad, 0x6f, 0x44, 0x6c, 0x2b, 0x3e, 0xb9, 0xcd, 0xa8, 0xe8, 0x2e,
	0x94, 0x87, 0x7d, 0x63, 0xdc, 0xb7, 0x3c, 0xc2, 0xc1, 0x29, 0x32, 0xa7, 0x4f, 0x64, 0x00, 0xfd,
	0x00, 0x10, 0xfd, 0x61, 0x7d, 0x52, 0xb2, 0xc8, 0x24, 0x15, 0xca, 0x69, 0x47, 0xa5, 0xdf, 0x03,
	0xc5, 0xdf, 0xcd, 0xe6, 0xc8, 0x35, 0xe8, 0xbe, 0x60, 0x11, 0x2f, 0x6b, 0xfe, 0x2e, 0xdf, 0x16,
	0x64, 0xba, 0xf1, 0x03, 0x37, 0xbd, 0xd1, 0x31, 0x75, 0x13, 0xd8, 0x4c, 0x2f, 0xd8, 0xf8, 0x1d,
	0x26, 0x13, 0x4e, 0x82, 0x8f, 0x13, 0x61, 0x92, 0xbf, 0x0c, 0x26, 0x99, 0x99, 0x60, 0x92, 0x9d,
	0x19, 0x26, 0xb9, 0xab, 0xc3, 0xa4, 0x70, 0x55, 0x98, 0xfc, 0x54, 0x06, 0x25, 0xbe, 0xed, 0x27,
	0x36, 0x8f, 0x34, 0xc3, 0xe6, 0xc9, 0x5c, 0x16, 0x15, 0x79, 0xa6, 0xa8, 0xa4, 0x66, 0x8e, 0x4a,
	0xfa, 0xea, 0x51, 0xc9, 0x5e, 0x35, 0x2a, 0x7f, 0x4f, 0x41, 0x31, 0x92, 0xd6, 0xe9, 0xa4, 0x7b,
	0xc6, 0x90, 0x8c, 0x5c, 0xac, 0x5b, 0x36, 0xc1, 0xee, 0xb9, 0xc1, 0x37, 0x4f, 0x59, 0x9b, 0x17,
	0xf4, 0x86, 0x20, 0xa3, 0x25, 0xc8, 0x3c, 0xb7, 0x4c, 0x91, 0x75, 0x32, 0x1a, 0x1f, 0xa0, 0x65,
	0xc8, 0x9e, 0x62, 0xeb, 0xe4, 0x94, 0xb0, 0x89, 0x66, 0x34, 0x31, 0x4a, 0xda, 0x51, 0xe9, 0xc4,
	0x1d, 0x55, 0x9f, 0xc6, 0x74, 0x26, 0x96, 0x0c, 0x99, 0xc3, 0x97, 0xe0, 0xf9, 0x21, 0x14, 0xf9,
	0x41, 0x46, 0x73, 0x66, 0x4f, 0xdc, 0x01, 0x16, 0x27, 0xd5, 0xb7, 0x28, 0x4b, 0x03, 0x2b, 0xf8,
	0x4e, 0x5c, 0xef, 0xdc, 0x65, 0xeb, 0x9d, 0x9f, 0x69, 0xbd, 0x0b, 0x33, 0xaf, 0x37, 0x5c, 0x7d,
	0xbd, 0x8b, 0x57, 0x5d, 0xef, 0x3f, 0xa4, 0x20, 0xef, 0xfb, 0xc9, 0x8a, 0xea, 0x5e, 0x0f, 0x7b,
	0x9e, 0x7e, 0x86, 0xc7, 0x02, 0xff, 0x05, 0x4e, 0xf9, 0x12, 0x8f, 0xe9, 0x52, 0x7a, 0xb8, 0xe7,
	0xe2, 0xa0, 0x6d, 0xc5, 0x47, 0x34, 0xe7, 0x79, 0xd8, 0xf3, 0x2c, 0xc7, 0xd6, 0x89, 0x73, 0x86,
	0x6d, 0x91, 0xc9, 0x4a, 0x82, 0xd8, 0xa5, 0x34, 0xaa, 0xec, 0xe2, 0x13, 0x9a, 0xbb, 0x78, 0x46,
	0x14, 0x23, 0xba, 0xe3, 0xb0, 0x6d, 0x0e, 0x1d, 0xcb, 0x26, 0x02, 0x00, 0xc1, 0x98, 0xea, 0x1c,
	0x8d, 0xe8, 0x11, 0x2b, 0xfa, 0x51, 0x62, 0x84, 0xee, 0x81, 0x72, 0xec, 0xb8, 0x3d, 0xac, 0xd3,
	0x7d, 0xa9, 0x7b, 0x64, 0x2c, 0x9a, 0x52, 0x79, 0xad, 0xc2, 0xe8, 0x6d, 0x83, 0x9c, 0x76, 0x28,
	0x15, 0x7d, 0x0a, 0xf9, 0x01, 0x26, 0x86, 0x69, 0x10, 0x43, 0x54, 0x09, 0xb7, 0xa7, 0x96, 0x67,
	0x6d, 0x5f, 0x48, 0xa8, 0x36, 0x71, 0xc7, 0x5a, 0xa0, 0x80, 0xaa, 0x90, 0x23, 0xc6, 0xc9, 0x89,
	0x65, 0x9f, 0xb0, 0xa5, 0xa5, 0xd7, 0x08, 0x3e, 0x44, 0xf7, 0x61, 0xb1, 0xe7, 0xd8, 0x84, 0xa5,
	0x64, 0xcb, 0x63, 0xb7, 0x70, 0x3a, 0xb3, 0x02, 0x93, 0x42, 0x82, 0xb5, 0x1d, 0x72, 0xd0, 0x2a,
	0x64, 0x86, 0xae, 0xf3, 0xcd, 0x58, 0xac, 0x69, 0x78, 0x85, 0x6a, 0x53, 0xaa, 0xb8, 0x1a, 0x70,
	0x91, 0x95, 0x4f, 0xa1, 0x3c, 0xe1, 0x11, 0x52, 0x20, 0x15, 0xae, 0x07, 0xfd, 0xa4, 0x5b, 0xed,
	0xdc, 0xe8, 0x8f, 0xb0, 0x58, 0x08, 0x3e, 0x78, 0x22, 0x3f, 0x96, 0x6a, 0x5f, 0x43, 0x21, 0x00,
	0x14, 0xba, 0x03, 0xc5, 0x9e, 0x8b, 0x59, 0x2d, 0x68, 0xf4, 0x3d, 0x61, 0x20, 0x4a, 0x8a, 0x44,
	0x58, 0x9e, 0x88, 0x70, 0xe0, 0x6f, 0xea, 0x85, 0xfe, 0xd6, 0x7e, 0x00, 0xf3, 0x31, 0x64, 0xd2,
	0xb2, 0xd3, 0xe8, 0xf5, 0x9c, 0x91, 0x4d, 0xa2, 0x37, 0xb4, 0xa2, 0xa0, 0xb1, 0x53, 0xed, 0x36,
	0xf8, 0x43, 0x06, 0x36, 0xfe, 0xf3, 0x20, 0x48, 0x14, 0x6d, 0x6f, 0x43, 0x85, 0x06, 0xd2, 0xb0,
	0x6c, 0xec, 0x46, 0x8f, 0xd2, 0x72, 0x40, 0xa5, 0x76, 0x6a, 0x3f, 0x96, 0xa0, 0x14, 0x45, 0xf9,
	0xcb, 0x82, 0xf8, 0x15, 0xe2, 0xb3, 0xf6, 0x0c, 0x8a, 0x91, 0x38, 0x25, 0x74, 0xaf, 0x56, 0x20,
	0x3f, 0xf2, 0xb0, 0xcb, 0x66, 0x25, 0xee, 0x68, 0xfe, 0x98, 0xf2, 0x86, 0x86, 0xe7, 0x3d, 0x77,
	0x5c, 0xbf, 0xec, 0x0a, 0xc6, 0xb5, 0x67, 0x50, 0x8a, 0xde, 0xfb, 0xd1, 0xc6, 0xd4, 0x95, 0xe6,
	0xb5, 0x58, 0x81, 0x90, 0x70, 0x97, 0x41, 0x90, 0x1e, 0xb9, 0x7d, 0xaf, 0x2a, 0xdf, 0x49, 0xdd,
	0x2b, 0x68, 0xec, 0xbb, 0xf6, 0xbb, 0x14, 0xcc, 0xc7, 0xca, 0x99, 0x30, 0x9f, 0x4b, 0xc9, 0xf9,
	0x5c, 0x9e, 0xc8, 0xe7, 0x4b, 0x90, 0x31, 0xf1, 0x90, 0x9c, 0x8a, 0x34, 0xcf, 0x07, 0xe8, 0x75,
	0x28, 0x1c, 0xbb, 0xc6, 0x00, 0xbb, 0x06, 0xe1, 0xe7, 0x57, 0x46, 0x0b, 0x09, 0x34, 0x2f, 0xf3,
	0x6a, 0x94, 0xe7, 0xe5, 0x4c, 0x2c, 0x2f, 0xb3, 0x7e, 0xb6, 0xc8, 0xcb, 0x46, 0xf0, 0x4d, 0xd3,
	0x0d, 0xd7, 0x3a, 0xb2, 0x08, 0xb3, 0x9b, 0x65, 0x76, 0x79, 0x09, 0xbb, 0xc9, 0x69, 0xa1, 0xd0,
	0xd7, 0x23, 0xa3, 0x6f, 0x91, 0x31, 0xcb, 0x49, 0xbe, 0xd0, 0x77, 0x39, 0x8d, 0x9e, 0x41, 0x5c,
	0xe8, 0xd8, 0xa5, 0x75, 0x85, 0xdd, 0x1b, 0xb3, 0x04, 0x9f, 0xd1, 0x78, 0x91, 0xbc, 0xe3, 0x53,
	0xa9, 0xa3, 0xbc, 0x20, 0xe6, 0x8e, 0xe6, 0x63, 0x8e, 0x3e, 0xa5, 0x3c, 0xe1, 0xe8, 0x79, 0xf0,
	0x4d, 0x7d, 0xe0, 0x5a, 0xbe, 0xa3, 0x05, 0xee, 0x03, 0x23, 0x46, 0x1c, 0xe5, 0x42, 0xbe, 0xa3,
	0xa5, 0x88, 0x90, 0xef, 0xe8, 0x07, 0x80, 0xce, 0xf0, 0x58, 0x67, 0x91, 0x0b, 0xcf, 0x61, 0x9a,
	0x4b, 0x24, 0x4d, 0x39, 0xc3, 0xe3, 0x1d, 0xca, 0xf0, 0x0f, 0xe2, 0xda, 0x17, 0xb0, 0x78, 0x38,
	0x34, 0x0d, 0x82, 0x9b, 0xec, 0x59, 0x21, 0x52, 0x33, 0xf1, 0x07, 0x0e, 0x5a, 0x17, 0x89, 0xcb,
	0x0d, 0x27, 0x34, 0xcc, 0x8b, 0x9e, 0x24, 0x6a, 0x3f, 0x94, 0x7c, 0x63, 0x1c, 0x4f, 0x33, 0x19,
	0x7b, 0x07, 0xe6, 0x0d, 0xd3, 0x14, 0x65, 0xa3, 0x1e, 0x01, 0x5b, 0xd9, 0x30, 0x4d, 0x0e, 0xdd,
	0x43, 0xb7, 0xef, 0xd1, 0x69, 0xb9, 0x78, 0xe0, 0x9c, 0xe3, 0x09, 0xd1, 0x14, 0x13, 0x55, 0x38,
	0x27, 0x94, 0xae, 0x61, 0x58, 0x68, 0x5a, 0xde, 0x55, 0x3a, 0x63, 0x13, 0x4e, 0xca, 0xd3, 0x33,
	0x36, 0x7a, 0xc4, 0x3a, 0xf7, 0x9b, 0x62, 0x62, 0x54, 0xfb, 0x7f, 0x40, 0xd1, 0x9f, 0xf1, 0x86,
	0x8e, 0xed, 0xd1, 0x4b, 0x78, 0xc6, 0x22, 0x78, 0x40, 0x93, 0x28, 0x3d, 0x45, 0xc2, 0xb5, 0xe7,
	0x72, 0x0d, 0xfb, 0xd8, 0xd1, 0xb8, 0x44, 0x6d, 0x1d, 0x16, 0x3a, 0xc4, 0x19, 0x4e, 0xf9, 0x79,
	0x61, 0xbc, 0x6a, 0xbf, 0x2d, 0x00, 0x84, 0x76, 0x2e, 0x8f, 0xed, 0x6b, 0x90, 0x63, 0x13, 0x0e,
	0x66, 0x94, 0xa5, 0xc3, 0x86, 0x39, 0x19, 0x89, 0x72, 0x2c, 0x12, 0x4f, 0xa0, 0xe8, 0x39, 0x23,
	0x7a, 0x64, 0xb2, 0x6a, 0x72, 0x85, 0x01, 0xf8, 0x66, 0x6c, 0x12, 0x1d, 0x26, 0xc1, 0xca, 0x49,
	0xf0, 0x82, 0x6f, 0xf4, 0x21, 0x64, 0x3d, 0x62, 0x90, 0x91, 0xc7, 0x02, 0x55, 0x89, 0xdc, 0x2e,
	0x84, 0x1a, 0x63, 0x6a, 0x42, 0x88, 0xe6, 0x5f, 0xd6, 0x55, 0xc7, 0xa6, 0x6e, 0x10, 0x86, 0xd1,
	0x94, 0x56, 0x10, 0x94, 0x3a, 0xa1, 0xc5, 0x39, 0xb6, 0x4d, 0xce, 0x2c, 0x32, 0x66, 0x8e, 0x8d,
	0xeb, 0xec, 0xf9, 0x6b, 0xc4, 0xa0, 0xc6, 0x98, 0x88, 0x6b, 0x0a, 0x4a, 0x9d, 0xd0, 0xe3, 0xd8,
	0xc4, 0xc4, 0xb0, 0xfa, 0x5e, 0xf5, 0x06, 0x3f, 0x8e, 0xc5, 0x90, 0xe6, 0x1e, 0xec, 0xba, 0x8e,
	0x2b, 0x0e, 0x60, 0x3e, 0xa0, 0xe6, 0xd8, 0x07, 0xdb, 0xb4, 0xd5, 0x65, 0x9e, 0x7c, 0x18, 0x85,
	0x6e, 0x4f, 0xd4, 0x84, 0x0a, 0x8b, 0x57, 0xcf, 0x6f, 0xa3, 0x89, 0xfb, 0xf5, 0xdd, 0x60, 0x7a,
	0x17, 0x3f, 0xef, 0xed, 0xcd, 0x69, 0x65, 0x37, 0xca, 0x45, 0x1f, 0x42, 0xea, 0x39, 0x3e, 0xaa,
	0x56, 0x62, 0x7d, 0x85, 0xf8, 0x4b, 0x06, 0xbd, 0xe3, 0x3d, 0xc7, 0x47, 0x48, 0x85, 0xe2, 0x30,
	0x6c, 0xf6, 0x56, 0x17, 0x99, 0xda, 0x9b, 0xe1, 0x29, 0x7b, 0x41, 0x23, 0x78, 0x6f, 0x4e, 0x8b,
	0xea, 0xa1, 0x16, 0xcc, 0xf3, 0x4e, 0x47, 0x38, 0x09, 0x5e, 0x8a, 0xbd, 0x15, 0x98, 0xba, 0xa4,
	0x55, 0xb8, 0x37, 0xa7, 0x55, 0xc8, 0x04, 0x1b, 0x6d, 0x40, 0x86, 0x51, 0x44, 0xe1, 0x70, 0x6b,
	0xd2, 0x4c, 0x5c, 0x9b, 0xcb, 0xa2, 0x8f, 0x62, 0x2f, 0x7c, 0xf1, 0x33, 0x88, 0x82, 0x9a, 0x6e,
	0x29, 0xd6, 0x96, 0x93, 0x82, 0xa6, 0xde, 0xfb, 0xa2, 0x17, 0x13, 0xbf, 0x36, 0xd3, 0x8b, 0x3c,
	0x55, 0x11, 0xe2, 0xbc, 0x0f, 0xf3, 0x71, 0xa4, 0x03, 0x58, 0x8a, 0x37, 0x0e, 0x05, 0x23, 0xa2,
	0x14, 0xb6, 0xfe, 0x9e, 0x04, 0x9d, 0x34, 0x17, 0x7b, 0xa3, 0x3e, 0xf1, 0xfb, 0x51, 0x8b, 0x09,
	0x4e, 0xfa, 0x7d, 0x34, 0x8d, 0x4b, 0xa2, 0x87, 0xa2, 0x89, 0xe7, 0x6b, 0xf2, 0x87, 0xad, 0x69,
	0x4f, 0x79, 0xef, 0xce, 0xd7, 0xfa, 0x3c, 0xec, 0xbe, 0xf9, 0x8a, 0x0b, 0xf1, 0xe6, 0x5d, 0xc4,
	0xe3, 0xa0, 0xed, 0xe6, 0xeb, 0x3f, 0xf6, 0xdb, 0x6e, 0xbe, 0xf6, 0x52, 0xcc, 0x61, 0x56, 0xaf,
	0x70, 0x5d, 0xde, 0x75, 0xf3, 0x35, 0xdf, 0x87, 0x05, 0xbf, 0x52, 0xd1, 0xfb, 0x4e, 0x8f, 0xb7,
	0x0a, 0x5e, 0xe3, 0x6d, 0x05, 0x9f, 0xd1, 0x14, 0x74, 0xb4, 0x06, 0x8b, 0x47, 0x46, 0xef, 0x6c,
	0x34, 0xd4, 0x3d, 0xe2, 0xb8, 0xf4, 0xf7, 0x46, 0x1e, 0x36, 0xab, 0x37, 0x59, 0x32, 0x5c, 0xe0,
	0xac, 0x0e, 0xe7, 0x1c, 0x7a, 0xd8, 0xdc, 0x2c, 0x40, 0xce, 0xe5, 0x2b, 0x4f, 0xcb, 0x07, 0xee,
	0x5b, 0xed, 0x33, 0xa8, 0x4c, 0xae, 0x31, 0x7a, 0x17, 0xd2, 0x96, 0x7d, 0xec, 0x4c, 0xe5, 0xc9,
	0x48, 0x94, 0x99, 0xc0, 0x13, 0xb9, 0x2a, 0xd5, 0xfe, 0x21, 0x01, 0x84, 0x8c, 0xe4, 0x67, 0xbe,
	0x48, 0x32, 0x91, 0x2f, 0x4b, 0x26, 0xa9, 0xc9, 0x64, 0xb2, 0x02, 0xf9, 0x89, 0x6e, 0x49, 0x4a,
	0x0b, 0xc6, 0xe8, 0x41, 0x90, 0xd1, 0xf8, 0x95, 0x63, 0x25, 0xc1, 0xcb, 0xb5, 0x58, 0x5a, 0x0b,
	0x72, 0x4c, 0x36, 0x92, 0x63, 0x6a, 0x6b, 0x90, 0xe5, 0x72, 0x08, 0x20, 0x5b, 0xdf, 0xea, 0x36,
	0x9e, 0xaa, 0xca, 0x1c, 0x2a, 0x41, 0x7e, 0xa7, 0x71, 0xd0, 0xe8, 0xec, 0xa9, 0xdb, 0x8a, 0x44,
	0x39, 0x3b, 0xf5, 0x46, 0x53, 0xdd, 0x56, 0xe4, 0xda, 0x6f, 0x24, 0xc8, 0xfb, 0xa8, 0xf1, 0x9b,
	0x0d, 0xd1, 0xa3, 0xcb, 0x1f, 0xbf, 0xa2, 0x89, 0x67, 0x63, 0x13, 0x47, 0x90, 0xf6, 0xac, 0x6f,
	0xb1, 0x08, 0x08, 0xfb, 0xa6, 0xf2, 0x01, 0x56, 0xf8, 0x35, 0x36, 0x18, 0xd7, 0xfe, 0x24, 0x43,
	0x29, 0x8a, 0xd5, 0xe9, 0xf6, 0x96, 0x34, 0x73, 0x7b, 0x2b, 0x7f, 0x41, 0x7b, 0x2b, 0xea, 0xaf,
	0x7c, 0x81, 0xbf, 0xa9, 0x88, 0xbf, 0xef, 0xc3, 0x42, 0x60, 0x38, 0x70, 0x9c, 0xdf, 0xcc, 0x15,
	0x9f, 0x11, 0x80, 0xfc, 0x21, 0x2c, 0x4f, 0xba, 0x12, 0x68, 0xf0, 0xa3, 0x62, 0x29, 0xea, 0x4e,
	0xa0, 0xc5, 0x0a, 0x5a, 0xbe, 0x83, 0x59, 0x39, 0xc2, 0xe2, 0x92, 0xa2, 0x05, 0x2d, 0x23, 0x6e,
	0x51, 0x5a, 0x6c, 0x85, 0xb2, 0x97, 0xad, 0x50, 0x6e, 0x62, 0x85, 0x6a, 0x3f, 0x92, 0x00, 0xc2,
	0x3d, 0x3c, 0x7b, 0x27, 0xe4, 0x76, 0xd8, 0xc6, 0xa0, 0x4e, 0x49, 0xcc, 0xaa, 0xdf, 0xb1, 0x98,
	0x76, 0xe9, 0x0a, 0xa0, 0xa9, 0xfd, 0x4c, 0x86, 0x1b, 0xf5, 0x11, 0x71, 0xa6, 0x0e, 0x9e, 0xc8,
	0xd3, 0x89, 0x74, 0x8d, 0xe7, 0x41, 0xf9, 0x1a, 0xcf, 0x83, 0xa9, 0xab, 0x3d, 0x9d, 0x24, 0x3c,
	0x7e, 0xa4, 0xaf, 0xfe, 0xf8, 0x11, 0x7d, 0x83, 0xf8, 0x89, 0x0c, 0xf3, 0x34, 0x38, 0x91, 0x33,
	0xf0, 0x3f, 0xbe, 0x51, 0xb8, 0xfa, 0x89, 0x28, 0x18, 0xc3, 0x37, 0x08, 0xb4, 0x04, 0xca, 0xb6,
	0xba, 0x53, 0x3f, 0x6c, 0x76, 0xf5, 0x9d, 0x46, 0x53, 0xed, 0x7e, 0xaf, 0x4d, 0x93, 0x61, 0x0e,
	0x52, 0xfb, 0xed, 0x87, 0x8a, 0x44, 0x3f, 0x5a, 0xbb, 0xbb, 0x8a, 0xbc, 0x7a, 0x00, 0x37, 0x12,
	0xfb, 0xed, 0xe8, 0x2e, 0xdc, 0xf6, 0x0d, 0x74, 0xd4, 0xdd, 0x7d, 0xf5, 0xa0, 0xab, 0x6e, 0x33,
	0x53, 0x7a, 0x5b, 0x6b, 0x75, 0x5b, 0x5b, 0xad, 0xa6, 0x32, 0x87, 0x14, 0x28, 0xed, 0x35, 0x3b,
	0x21, 0x45, 0x5a, 0xbd, 0x1f, 0xeb, 0xf7, 0x8b, 0xae, 0x5f, 0x01, 0x32, 0x8d, 0x83, 0x6d, 0xf5,
	0x2b, 0x65, 0x0e, 0x95, 0xa1, 0xd0, 0x6d, 0xec, 0xab, 0x9d, 0x6e, 0x7d, 0xbf, 0xad, 0x48, 0xab,
	0xc7, 0x30, 0x1f, 0x6b, 0x19, 0xa2, 0x65, 0x40, 0x8d, 0xfd, 0xfa, 0xae, 0xaa, 0x77, 0x0e, 0x77,
	0x76, 0x1a, 0x5f, 0xe9, 0xbe, 0xe6, 0x0a, 0x2c, 0x4f, 0xd0, 0x23, 0x66, 0xd0, 0x6d, 0xb8, 0x35,
	0xc1, 0x3b, 0x68, 0x1d, 0xa8, 0x7a, 0xeb, 0xa9, 0xaa, 0x3d, 0xd3, 0x1a, 0x5d, 0x55, 0x91, 0x57,
	0x3f, 0xf1, 0x4f, 0xc7, 0x60, 0x86, 0x91, 0x10, 0x45, 0xa6, 0x94, 0x87, 0xb4, 0xd6, 0x65, 0x26,
	0x73, 0x90, 0xea, 0x68, 0x5d, 0x45, 0x5e, 0x3d, 0x84, 0x62, 0xe4, 0xef, 0x5c, 0x08, 0x41, 0xc5,
	0xd7, 0xdb, 0x6f, 0x7c, 0xd5, 0x38, 0xd8, 0x55, 0xe6, 0xa8, 0xcb, 0xdb, 0x87, 0xf5, 0xa6, 0xbe,
	0xb5, 0x57, 0x3f, 0x38, 0x50, 0x9b, 0x7a, 0x7d, 0x57, 0x3d, 0xe8, 0x2a, 0x12, 0x75, 0x79, 0x92,
	0xde, 0xec, 0xaa, 0xda, 0x41, 0x9d, 0x79, 0xf4, 0x47, 0x09, 0x6e, 0x24, 0xee, 0x5b, 0x16, 0xd6,
	0x07, 0x8f, 0x1e, 0xea, 0x1f, 0x3f, 0x58, 0x6f, 0xeb, 0x1b, 0xeb, 0x22, 0xd0, 0x01, 0xe5, 0xd1,
	0xba, 0x22, 0xa1, 0x05, 0x28, 0x33, 0xca, 0xff, 0xae, 0x3f, 0xe6, 0x42, 0x72, 0x8c, 0xf4, 0x68,
	0x5d, 0x49, 0xa1, 0x9b, 0x70, 0xa3, 0xdd, 0xd2, 0xba, 0x5a, 0xbd, 0xd1, 0xd5, 0x27, 0x4c, 0xa6,
	0x2f, 0x60, 0x3d, 0x5a, 0x57, 0x32, 0xd4, 0xeb, 0x49, 0x56, 0xf0, 0x23, 0xd9, 0x8b, 0x78, 0x8f,
	0xd6, 0x95, 0xdc, 0xea, 0x2f, 0x24, 0x28, 0x45, 0xeb, 0x10, 0xb4, 0x08, 0xf3, 0xea, 0xae, 0xa6,
	0x76, 0x3a, 0x7a, 0xa7, 0x5b, 0xd7, 0xba, 0x3c, 0x56, 0x0b, 0x50, 0x16, 0x44, 0x71, 0x48, 0x4b,
	0x11, 0x92, 0x7a, 0xb0, 0x4d, 0xa5, 0xe4, 0x88, 0xea, 0x56, 0x6b, 0xbf, 0xdd, 0x54, 0xbb, 0xaa,
	0x92, 0x8a, 0xc8, 0x89, 0x53, 0x3c, 0x4d, 0x57, 0xc3, 0xb7, 0xb6, 0xd9, 0xd2, 0xba, 0xea, 0xb6,
	0x92, 0x41, 0x55, 0x58, 0x12, 0xb4, 0x66, 0x63, 0xbf, 0xd1, 0xd5, 0x35, 0xb5, 0xbe, 0x45, 0xcf,
	0xff, 0xec, 0xea, 0x17, 0xa0, 0xc4, 0xeb, 0x2b, 0x3a, 0x23, 0xdf, 0xc9, 0xd6, 0xa1, 0xb6, 0xa5,
	0xea, 0x74, 0xb3, 0xe8, 0xcf, 0xd4, 0x4d, 0x0e, 0xb9, 0x04, 0x5e, 0x67, 0xfb, 0x4b, 0x45, 0x7a,
	0xf0, 0xf3, 0x0c, 0x64, 0x45, 0x06, 0xea, 0x42, 0x95, 0xfd, 0x49, 0x29, 0xa1, 0x4a, 0x41, 0xb3,
	0xd4, 0x30, 0x2b, 0x49, 0x35, 0x2c, 0xfa, 0x0e, 0x85, 0xac, 0xe1, 0x92, 0xa0, 0x70, 0x41, 0x17,
	0x17, 0x33, 0xc9, 0x16, 0xda, 0xb0, 0xcc, 0x2c, 0x4c, 0x1f, 0x25, 0x2f, 0xae, 0x6f, 0x92, 0x2d,
	0x3e, 0x85, 0x9b, 0xcc, 0x62, 0x52, 0x29, 0x83, 0x66, 0xaa, 0x74, 0x92, 0xed, 0x6e, 0x83, 0x12,
	0xda, 0x15, 0xe6, 0x2e, 0xab, 0x78, 0x92, 0xad, 0xd4, 0xa1, 0x14, 0xed, 0xb6, 0xa0, 0xf0, 0x98,
	0x49, 0x68, 0xc2, 0xbc, 0xc0, 0x04, 0xcf, 0x16, 0x53, 0x26, 0x26, 0x5a, 0x2f, 0xc9, 0x26, 0x54,
	0x80, 0xb0, 0x6b, 0x81, 0xc2, 0xc3, 0x72, 0xaa, 0x63, 0xb2, 0x72, 0x2b, 0x91, 0x27, 0xda, 0x1c,
	0x9f, 0xd1, 0xfb, 0xb8, 0xdf, 0xbb, 0x40, 0xd1, 0x7b, 0x71, 0xac, 0xa1, 0x91, 0xe8, 0xc5, 0xe6,
	0xce, 0xf7, 0xef, 0x9e, 0x58, 0xe4, 0x74, 0x74, 0xb4, 0xd6, 0x73, 0x06, 0xf7, 0x85, 0xc0, 0x7d,
	0xbf, 0xf3, 0xe8, 0x13, 0x7e, 0x2d, 0x97, 0x9b, 0xd6, 0x39, 0xfe, 0x92, 0xb7, 0x93, 0x89, 0xf3,
	0x57, 0xb9, 0x22, 0xc6, 0x4f, 0x9e, 0x30, 0xc2, 0x51, 0x96, 0xa9, 0x6c, 0xfc, 0x2b, 0x00, 0x00,
	0xff, 0xff, 0x5f, 0xce, 0x37, 0xd2, 0x9a, 0x2b, 0x00, 0x00,
}
